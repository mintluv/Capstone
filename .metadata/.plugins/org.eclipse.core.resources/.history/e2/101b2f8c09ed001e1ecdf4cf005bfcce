/*
 * uart.c
 *
 *  Created on: Mar 25, 2024
 *      Author: Min
 */

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

#include "uart.h"

static bool is_open[UART_MAX_CH];





bool uartInit(void){
    for (int i = 0; i < UART_MAX_CH; i++){
        is_open[i] =false;
    }
}
bool uartOpen(uint8_t ch, uint32_t baud){
    bool ret =false;
    switch (ch){
    {
      case _DEF_UART1:
      /* USER CODE BEGIN USART1_Init 0 */

      /* USER CODE END USART1_Init 0 */

      /* USER CODE BEGIN USART1_Init 1 */

      /* USER CODE END USART1_Init 1 */
        huart1.Instance = USART1;
        huart1.Init.BaudRate = 115200;
        huart1.Init.WordLength = UART_WORDLENGTH_8B;
        huart1.Init.StopBits = UART_STOPBITS_1;
        huart1.Init.Parity = UART_PARITY_NONE;
        huart1.Init.Mode = UART_MODE_TX_RX;
        huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;
        huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
        huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
        if (HAL_UART_Init(&huart1) != HAL_OK)
              {
                ret = false;
              }
              else
              {
                ret = true;
                is_open[ch] = true;
              }
      /* USER CODE BEGIN USART1_Init 2 */

      /* USER CODE END USART1_Init 2 */
      case _DEF_UART2:
        /* USER CODE BEGIN USART2_Init 0 */

          /* USER CODE END USART2_Init 0 */

          /* USER CODE BEGIN USART2_Init 1 */

          /* USER CODE END USART2_Init 1 */
        huart2.Instance = USART2;
        huart2.Init.BaudRate = 115200;
        huart2.Init.WordLength = UART_WORDLENGTH_8B;
        huart2.Init.StopBits = UART_STOPBITS_1;
        huart2.Init.Parity = UART_PARITY_NONE;
        huart2.Init.Mode = UART_MODE_TX_RX;
        huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
        huart2.Init.OverSampling = UART_OVERSAMPLING_16;
        huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
        huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
        if (HAL_UART_Init(&huart2) != HAL_OK)
        {
           Error_Handler();
        }
        /* USER CODE BEGIN USART2_Init 2 */

         /* USER CODE END USART2_Init 2 */

      }
    }
}
uint32_t uartAvaliable(uint8_t ch){
    uint32_t ret =0;
    switch (ch)
    {
    case _DEF_UART1:
        ret = cdcAvail
        break;
    }
}
uint8_t uartRead(uint8_t ch, uint8_t *p_data,uint32_t length){

}
uint32_t uartWrite(uint32_t ch, uint8_t *p_data, uint32_t length){

}
uint32_t uartPrintf(unit8_t ch, char *fmt, ...){

}
