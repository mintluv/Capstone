
L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009be8  08009be8  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08009be8  08009be8  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009be8  08009be8  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009be8  08009be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bec  08009bec  00019bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08009bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020178  2**0
                  CONTENTS
 10 .bss          00001368  20000178  20000178  00020178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200014e0  200014e0  00020178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010192  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032a9  00000000  00000000  0003037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e58  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a79  00000000  00000000  00034480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023b3d  00000000  00000000  00034ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001601a  00000000  00000000  00058a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6be9  00000000  00000000  0006ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e20  00000000  00000000  0013563c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  0013945c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b0c 	.word	0x08009b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	08009b0c 	.word	0x08009b0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <apInit>:
 */


#include "ap.h"

void apInit(void){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <apMain>:

void apMain(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  while(1){
      ledToggle(0);
 8000284:	2000      	movs	r0, #0
 8000286:	f000 fa53 	bl	8000730 <ledToggle>
      delay(500);
 800028a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800028e:	f000 f841 	bl	8000314 <delay>
      ledToggle(1);
 8000292:	2001      	movs	r0, #1
 8000294:	f000 fa4c 	bl	8000730 <ledToggle>
      printf("test");
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <apMain+0x28>)
 800029a:	f008 fdc1 	bl	8008e20 <iprintf>
      delay(500);
 800029e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002a2:	f000 f837 	bl	8000314 <delay>
      ledToggle(0);
 80002a6:	e7ed      	b.n	8000284 <apMain+0x4>
 80002a8:	08009b24 	.word	0x08009b24

080002ac <bspInit>:


#include "bsp.h"
#include "usb_device.h"

void bspInit(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
  HAL_Init();
 80002b2:	f000 fa61 	bl	8000778 <HAL_Init>
  SystemClock_Config();
 80002b6:	f000 f838 	bl	800032a <SystemClock_Config>


    /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <bspInit+0x64>)
 80002bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002be:	4a14      	ldr	r2, [pc, #80]	; (8000310 <bspInit+0x64>)
 80002c0:	f043 0304 	orr.w	r3, r3, #4
 80002c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <bspInit+0x64>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ca:	f003 0304 	and.w	r3, r3, #4
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <bspInit+0x64>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <bspInit+0x64>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <bspInit+0x64>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	60bb      	str	r3, [r7, #8]
 80002e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <bspInit+0x64>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <bspInit+0x64>)
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <bspInit+0x64>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	f003 0302 	and.w	r3, r3, #2
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
  MX_USB_DEVICE_Init();
 8000302:	f007 ff37 	bl	8008174 <MX_USB_DEVICE_Init>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <delay>:

void delay(uint32_t ms){
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 fa9f 	bl	8000860 <HAL_Delay>
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <SystemClock_Config>:




void SystemClock_Config(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b096      	sub	sp, #88	; 0x58
 800032e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	2244      	movs	r2, #68	; 0x44
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f008 fdc6 	bl	8008eca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033e:	463b      	mov	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800034c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000350:	f002 fae4 	bl	800291c <HAL_PWREx_ControlVoltageScaling>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800035a:	f000 f838 	bl	80003ce <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800035e:	2310      	movs	r3, #16
 8000360:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800036a:	2360      	movs	r3, #96	; 0x60
 800036c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036e:	2302      	movs	r3, #2
 8000370:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000372:	2301      	movs	r3, #1
 8000374:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000376:	2301      	movs	r3, #1
 8000378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800037a:	2328      	movs	r3, #40	; 0x28
 800037c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800037e:	2307      	movs	r3, #7
 8000380:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000386:	2302      	movs	r3, #2
 8000388:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fb2a 	bl	80029e8 <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x74>
  {
    Error_Handler();
 800039a:	f000 f818 	bl	80003ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	230f      	movs	r3, #15
 80003a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a2:	2303      	movs	r3, #3
 80003a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003b2:	463b      	mov	r3, r7
 80003b4:	2104      	movs	r1, #4
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 ff2a 	bl	8003210 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003c2:	f000 f804 	bl	80003ce <Error_Handler>
  }
}
 80003c6:	bf00      	nop
 80003c8:	3758      	adds	r7, #88	; 0x58
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d2:	b672      	cpsid	i
}
 80003d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <Error_Handler+0x8>

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <HAL_MspInit+0x44>)
 80003e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <HAL_MspInit+0x44>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6613      	str	r3, [r2, #96]	; 0x60
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <HAL_MspInit+0x44>)
 80003ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <HAL_MspInit+0x44>)
 80003f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003fa:	4a08      	ldr	r2, [pc, #32]	; (800041c <HAL_MspInit+0x44>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	6593      	str	r3, [r2, #88]	; 0x58
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_MspInit+0x44>)
 8000404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000424:	e7fe      	b.n	8000424 <NMI_Handler+0x4>

08000426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042a:	e7fe      	b.n	800042a <HardFault_Handler+0x4>

0800042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	e7fe      	b.n	8000430 <MemManage_Handler+0x4>

08000432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000436:	e7fe      	b.n	8000436 <BusFault_Handler+0x4>

08000438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043c:	e7fe      	b.n	800043c <UsageFault_Handler+0x4>

0800043e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046c:	f000 f9d8 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}

08000474 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000478:	4802      	ldr	r0, [pc, #8]	; (8000484 <USB_IRQHandler+0x10>)
 800047a:	f000 fdeb 	bl	8001054 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000e7c 	.word	0x20000e7c

08000488 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	e00a      	b.n	80004b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800049a:	f3af 8000 	nop.w
 800049e:	4601      	mov	r1, r0
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	1c5a      	adds	r2, r3, #1
 80004a4:	60ba      	str	r2, [r7, #8]
 80004a6:	b2ca      	uxtb	r2, r1
 80004a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	3301      	adds	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	dbf0      	blt.n	800049a <_read+0x12>
  }

  return len;
 80004b8:	687b      	ldr	r3, [r7, #4]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3718      	adds	r7, #24
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b086      	sub	sp, #24
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	60f8      	str	r0, [r7, #12]
 80004ca:	60b9      	str	r1, [r7, #8]
 80004cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	e009      	b.n	80004e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	60ba      	str	r2, [r7, #8]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	3301      	adds	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697a      	ldr	r2, [r7, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dbf1      	blt.n	80004d4 <_write+0x12>
  }
  return len;
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_close>:

int _close(int file)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000522:	605a      	str	r2, [r3, #4]
  return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <_isatty>:

int _isatty(int file)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
	...

08000564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <_sbrk+0x5c>)
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <_sbrk+0x60>)
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <_sbrk+0x64>)
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <_sbrk+0x68>)
 8000584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <_sbrk+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	429a      	cmp	r2, r3
 8000592:	d207      	bcs.n	80005a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000594:	f008 fce8 	bl	8008f68 <__errno>
 8000598:	4603      	mov	r3, r0
 800059a:	220c      	movs	r2, #12
 800059c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	e009      	b.n	80005b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <_sbrk+0x64>)
 80005b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20010000 	.word	0x20010000
 80005c4:	00000400 	.word	0x00000400
 80005c8:	20000194 	.word	0x20000194
 80005cc:	200014e0 	.word	0x200014e0

080005d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <SystemInit+0x20>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <SystemInit+0x20>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800062c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f8:	f7ff ffea 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000622:	f008 fca7 	bl	8008f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000626:	f008 fb2d 	bl	8008c84 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800062c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8000638:	08009bf0 	.word	0x08009bf0
  ldr r2, =_sbss
 800063c:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8000640:	200014e0 	.word	0x200014e0

08000644 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_IRQHandler>
	...

08000648 <ledInit>:
  {GPIOB,GPIO_PIN_1, GPIO_PIN_RESET,GPIO_PIN_SET},
};



bool ledInit(void){
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
  bool ret = true;
 800064e:	2301      	movs	r3, #1
 8000650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <ledInit+0xdc>)
 8000666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000668:	4a2e      	ldr	r2, [pc, #184]	; (8000724 <ledInit+0xdc>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <ledInit+0xdc>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b29      	ldr	r3, [pc, #164]	; (8000724 <ledInit+0xdc>)
 800067e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000680:	4a28      	ldr	r2, [pc, #160]	; (8000724 <ledInit+0xdc>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <ledInit+0xdc>)
 800068a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <ledInit+0xdc>)
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <ledInit+0xdc>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <ledInit+0xdc>)
 80006a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006b2:	481d      	ldr	r0, [pc, #116]	; (8000728 <ledInit+0xe0>)
 80006b4:	f000 fb74 	bl	8000da0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2103      	movs	r1, #3
 80006bc:	481b      	ldr	r0, [pc, #108]	; (800072c <ledInit+0xe4>)
 80006be:	f000 fb6f 	bl	8000da0 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80006c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4813      	ldr	r0, [pc, #76]	; (8000728 <ledInit+0xe0>)
 80006dc:	f000 f9f6 	bl	8000acc <HAL_GPIO_Init>

    /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006e0:	2310      	movs	r3, #16
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f6:	f000 f9e9 	bl	8000acc <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006fa:	2303      	movs	r3, #3
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <ledInit+0xe4>)
 8000712:	f000 f9db 	bl	8000acc <HAL_GPIO_Init>
  return ret;
 8000716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800071a:	4618      	mov	r0, r3
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	48000800 	.word	0x48000800
 800072c:	48000400 	.word	0x48000400

08000730 <ledToggle>:
void ledOff(uint8_t ch){
  if(ch >= LED_MAX_CH) return;
  HAL_GPIO_WritePin(led_tb1[ch].port, led_tb1[ch].Pin, led_tb1[ch].Off_State);
}

void ledToggle(uint8_t ch){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d80d      	bhi.n	800075c <ledToggle+0x2c>
  HAL_GPIO_TogglePin(led_tb1[ch].port, led_tb1[ch].Pin);
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <ledToggle+0x34>)
 8000744:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4906      	ldr	r1, [pc, #24]	; (8000764 <ledToggle+0x34>)
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	440b      	add	r3, r1
 8000750:	889b      	ldrh	r3, [r3, #4]
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f000 fb3b 	bl	8000dd0 <HAL_GPIO_TogglePin>
 800075a:	e000      	b.n	800075e <ledToggle+0x2e>
  if(ch >= LED_MAX_CH) return;
 800075c:	bf00      	nop
}
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000004 	.word	0x20000004

08000768 <hwInit>:
 *  Created on: Mar 23, 2024
 *      Author: Min
 */
#include "hw.h"

void hwInit(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  bspInit();
 800076c:	f7ff fd9e 	bl	80002ac <bspInit>
  ledInit();
 8000770:	f7ff ff6a 	bl	8000648 <ledInit>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000782:	2003      	movs	r0, #3
 8000784:	f000 f960 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f80d 	bl	80007a8 <HAL_InitTick>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	e001      	b.n	800079e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800079a:	f7ff fe1d 	bl	80003d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800079e:	79fb      	ldrb	r3, [r7, #7]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_InitTick+0x6c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d023      	beq.n	8000804 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_InitTick+0x70>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_InitTick+0x6c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f96d 	bl	8000ab2 <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10f      	bne.n	80007fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d809      	bhi.n	80007f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 f937 	bl	8000a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f0:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_InitTick+0x74>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e007      	b.n	8000808 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	e004      	b.n	8000808 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e001      	b.n	8000808 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000018 	.word	0x20000018
 8000818:	20000000 	.word	0x20000000
 800081c:	20000014 	.word	0x20000014

08000820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x20>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_IncTick+0x24>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_IncTick+0x24>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000018 	.word	0x20000018
 8000844:	20000198 	.word	0x20000198

08000848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HAL_GetTick+0x14>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000198 	.word	0x20000198

08000860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff ffee 	bl	8000848 <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d005      	beq.n	8000886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_Delay+0x44>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000886:	bf00      	nop
 8000888:	f7ff ffde 	bl	8000848 <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8f7      	bhi.n	8000888 <HAL_Delay+0x28>
  {
  }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000018 	.word	0x20000018

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f7ff ff8e 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff29 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a70:	f7ff ff3e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff8e 	bl	800099c <NVIC_EncodePriority>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff5d 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff31 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffa2 	bl	8000a04 <SysTick_Config>
 8000ac0:	4603      	mov	r3, r0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ada:	e148      	b.n	8000d6e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 813a 	beq.w	8000d68 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d005      	beq.n	8000b0c <HAL_GPIO_Init+0x40>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d130      	bne.n	8000b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2203      	movs	r2, #3
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b42:	2201      	movs	r2, #1
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	f003 0201 	and.w	r2, r3, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d017      	beq.n	8000baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d123      	bne.n	8000bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	08da      	lsrs	r2, r3, #3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3208      	adds	r2, #8
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	220f      	movs	r2, #15
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	6939      	ldr	r1, [r7, #16]
 8000bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0203 	and.w	r2, r3, #3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 8094 	beq.w	8000d68 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c40:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <HAL_GPIO_Init+0x2c0>)
 8000c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c44:	4a51      	ldr	r2, [pc, #324]	; (8000d8c <HAL_GPIO_Init+0x2c0>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4c:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <HAL_GPIO_Init+0x2c0>)
 8000c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c58:	4a4d      	ldr	r2, [pc, #308]	; (8000d90 <HAL_GPIO_Init+0x2c4>)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1d4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a43      	ldr	r2, [pc, #268]	; (8000d94 <HAL_GPIO_Init+0x2c8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1d0>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a42      	ldr	r2, [pc, #264]	; (8000d98 <HAL_GPIO_Init+0x2cc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1cc>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e004      	b.n	8000ca2 <HAL_GPIO_Init+0x1d6>
 8000c98:	2307      	movs	r3, #7
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x1d6>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <HAL_GPIO_Init+0x1d6>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	f002 0203 	and.w	r2, r2, #3
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	4093      	lsls	r3, r2
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb2:	4937      	ldr	r1, [pc, #220]	; (8000d90 <HAL_GPIO_Init+0x2c4>)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ce4:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d38:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f47f aeaf 	bne.w	8000adc <HAL_GPIO_Init+0x10>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000
 8000d94:	48000400 	.word	0x48000400
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4013      	ands	r3, r2
 8000de8:	041a      	lsls	r2, r3, #16
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43d9      	mvns	r1, r3
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	400b      	ands	r3, r1
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	619a      	str	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	b08b      	sub	sp, #44	; 0x2c
 8000e08:	af06      	add	r7, sp, #24
 8000e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e0f8      	b.n	8001008 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d106      	bne.n	8000e30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f007 fb84 	bl	8008538 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2203      	movs	r2, #3
 8000e34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fee3 	bl	8003c08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	687e      	ldr	r6, [r7, #4]
 8000e4a:	466d      	mov	r5, sp
 8000e4c:	f106 0410 	add.w	r4, r6, #16
 8000e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	602b      	str	r3, [r5, #0]
 8000e58:	1d33      	adds	r3, r6, #4
 8000e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e5c:	6838      	ldr	r0, [r7, #0]
 8000e5e:	f002 feab 	bl	8003bb8 <USB_CoreInit>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e0c9      	b.n	8001008 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fedf 	bl	8003c3e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e040      	b.n	8000f08 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	440b      	add	r3, r1
 8000e96:	3301      	adds	r3, #1
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3303      	adds	r3, #3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3338      	adds	r3, #56	; 0x38
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	440b      	add	r3, r1
 8000ee8:	333c      	adds	r3, #60	; 0x3c
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	440b      	add	r3, r1
 8000efc:	3340      	adds	r3, #64	; 0x40
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	3301      	adds	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3b9      	bcc.n	8000e86 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e044      	b.n	8000fa2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	440b      	add	r3, r1
 8000f26:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3b5      	bcc.n	8000f18 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	687e      	ldr	r6, [r7, #4]
 8000fb4:	466d      	mov	r5, sp
 8000fb6:	f106 0410 	add.w	r4, r6, #16
 8000fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	602b      	str	r3, [r5, #0]
 8000fc2:	1d33      	adds	r3, r6, #4
 8000fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc6:	6838      	ldr	r0, [r7, #0]
 8000fc8:	f002 fe46 	bl	8003c58 <USB_DevInit>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e014      	b.n	8001008 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d102      	bne.n	8000ffc <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f001 fc58 	bl	80028ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f005 f8d7 	bl	80061b4 <USB_DevDisconnect>

  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001010 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_PCD_Start+0x16>
 8001022:	2302      	movs	r3, #2
 8001024:	e012      	b.n	800104c <HAL_PCD_Start+0x3c>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f002 fdd1 	bl	8003bda <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f005 f8a2 	bl	8006186 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f005 f8bc 	bl	80061de <USB_ReadInterrupts>
 8001066:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fb13 	bl	800169e <PCD_EP_ISR_Handler>

    return;
 8001078:	e110      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001096:	b292      	uxth	r2, r2
 8001098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f007 faec 	bl	800867a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010a2:	2100      	movs	r1, #0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f8fc 	bl	80012a2 <HAL_PCD_SetAddress>

    return;
 80010aa:	e0f7      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00c      	beq.n	80010d0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010be:	b29a      	uxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010c8:	b292      	uxth	r2, r2
 80010ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010ce:	e0e5      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00c      	beq.n	80010f4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010ec:	b292      	uxth	r2, r2
 80010ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010f2:	e0d3      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d034      	beq.n	8001168 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0204 	bic.w	r2, r2, #4
 8001110:	b292      	uxth	r2, r2
 8001112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800111e:	b29a      	uxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0208 	bic.w	r2, r2, #8
 8001128:	b292      	uxth	r2, r2
 800112a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d107      	bne.n	8001148 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f007 fd4a 	bl	8008bdc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f007 facf 	bl	80086ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001160:	b292      	uxth	r2, r2
 8001162:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001166:	e099      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116e:	2b00      	cmp	r3, #0
 8001170:	d027      	beq.n	80011c2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800117a:	b29a      	uxth	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0208 	orr.w	r2, r2, #8
 8001184:	b292      	uxth	r2, r2
 8001186:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001192:	b29a      	uxth	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800119c:	b292      	uxth	r2, r2
 800119e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0204 	orr.w	r2, r2, #4
 80011b4:	b292      	uxth	r2, r2
 80011b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f007 fa7c 	bl	80086b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011c0:	e06c      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d040      	beq.n	800124e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011de:	b292      	uxth	r2, r2
 80011e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d12b      	bne.n	8001246 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0204 	orr.w	r2, r2, #4
 8001200:	b292      	uxth	r2, r2
 8001202:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800120e:	b29a      	uxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0208 	orr.w	r2, r2, #8
 8001218:	b292      	uxth	r2, r2
 800121a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800122e:	b29b      	uxth	r3, r3
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800123c:	2101      	movs	r1, #1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f007 fccc 	bl	8008bdc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001244:	e02a      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f007 fa36 	bl	80086b8 <HAL_PCD_SuspendCallback>
    return;
 800124c:	e026      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00f      	beq.n	8001278 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800126a:	b292      	uxth	r2, r2
 800126c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f007 f9f4 	bl	800865e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001276:	e011      	b.n	800129c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00c      	beq.n	800129c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001294:	b292      	uxth	r2, r2
 8001296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800129a:	bf00      	nop
  }
}
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_PCD_SetAddress+0x1a>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e013      	b.n	80012e4 <HAL_PCD_SetAddress+0x42>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	78fa      	ldrb	r2, [r7, #3]
 80012c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 ff42 	bl	800615e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	4608      	mov	r0, r1
 80012f6:	4611      	mov	r1, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	4603      	mov	r3, r0
 80012fc:	70fb      	strb	r3, [r7, #3]
 80012fe:	460b      	mov	r3, r1
 8001300:	803b      	strh	r3, [r7, #0]
 8001302:	4613      	mov	r3, r2
 8001304:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800130a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130e:	2b00      	cmp	r3, #0
 8001310:	da0e      	bge.n	8001330 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	705a      	strb	r2, [r3, #1]
 800132e:	e00e      	b.n	800134e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	f003 0207 	and.w	r2, r3, #7
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	b2da      	uxtb	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800135a:	883a      	ldrh	r2, [r7, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	78ba      	ldrb	r2, [r7, #2]
 8001364:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001366:	78bb      	ldrb	r3, [r7, #2]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d102      	bne.n	8001372 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_PCD_EP_Open+0x94>
 800137c:	2302      	movs	r3, #2
 800137e:	e00e      	b.n	800139e <HAL_PCD_EP_Open+0xb2>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68f9      	ldr	r1, [r7, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fc84 	bl	8003c9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800139c:	7afb      	ldrb	r3, [r7, #11]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da0e      	bge.n	80013d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2201      	movs	r2, #1
 80013d4:	705a      	strb	r2, [r3, #1]
 80013d6:	e00e      	b.n	80013f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	f003 0207 	and.w	r2, r3, #7
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_PCD_EP_Close+0x6a>
 800140c:	2302      	movs	r3, #2
 800140e:	e00e      	b.n	800142e <HAL_PCD_EP_Close+0x88>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68f9      	ldr	r1, [r7, #12]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 f800 	bl	8004424 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	460b      	mov	r3, r1
 8001444:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	f003 0207 	and.w	r2, r3, #7
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2200      	movs	r2, #0
 8001474:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	b2da      	uxtb	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6979      	ldr	r1, [r7, #20]
 8001488:	4618      	mov	r0, r3
 800148a:	f003 f9b8 	bl	80047fe <USB_EPStartXfer>

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	f003 0207 	and.w	r2, r3, #7
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	460b      	mov	r3, r1
 80014d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014d8:	7afb      	ldrb	r3, [r7, #11]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2201      	movs	r2, #1
 8001512:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	b2da      	uxtb	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6979      	ldr	r1, [r7, #20]
 8001526:	4618      	mov	r0, r3
 8001528:	f003 f969 	bl	80047fe <USB_EPStartXfer>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	f003 0207 	and.w	r2, r3, #7
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d901      	bls.n	8001554 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e04c      	b.n	80015ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da0e      	bge.n	800157a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	705a      	strb	r2, [r3, #1]
 8001578:	e00c      	b.n	8001594 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_PCD_EP_SetStall+0x7e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e01c      	b.n	80015ee <HAL_PCD_EP_SetStall+0xb8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68f9      	ldr	r1, [r7, #12]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fccc 	bl	8005f60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f004 fe0d 	bl	80061fe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	f003 020f 	and.w	r2, r3, #15
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d901      	bls.n	8001614 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e040      	b.n	8001696 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da0e      	bge.n	800163a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2201      	movs	r2, #1
 8001636:	705a      	strb	r2, [r3, #1]
 8001638:	e00e      	b.n	8001658 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	f003 0207 	and.w	r2, r3, #7
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	b2da      	uxtb	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_PCD_EP_ClrStall+0x82>
 8001674:	2302      	movs	r3, #2
 8001676:	e00e      	b.n	8001696 <HAL_PCD_EP_ClrStall+0xa0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	f004 fcbb 	bl	8006002 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b096      	sub	sp, #88	; 0x58
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016a6:	e3b1      	b.n	8001e0c <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80016c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 8173 	bne.w	80019b2 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d150      	bne.n	800177a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e8:	81fb      	strh	r3, [r7, #14]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3328      	adds	r3, #40	; 0x28
 8001700:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800170a:	b29b      	uxth	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	4413      	add	r3, r2
 800171c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001728:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800172a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	441a      	add	r2, r3
 8001734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001736:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001738:	2100      	movs	r1, #0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f006 ff75 	bl	800862a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 835f 	beq.w	8001e0c <PCD_EP_ISR_Handler+0x76e>
 800174e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 835a 	bne.w	8001e0c <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001764:	b2da      	uxtb	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b292      	uxth	r2, r2
 800176c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001778:	e348      	b.n	8001e0c <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001780:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800178c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001794:	2b00      	cmp	r3, #0
 8001796:	d032      	beq.n	80017fe <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	f004 fd61 	bl	800629a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017e4:	4013      	ands	r3, r2
 80017e6:	823b      	strh	r3, [r7, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	8a3a      	ldrh	r2, [r7, #16]
 80017ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017f2:	b292      	uxth	r2, r2
 80017f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f006 feea 	bl	80085d0 <HAL_PCD_SetupStageCallback>
 80017fc:	e306      	b.n	8001e0c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017fe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001802:	2b00      	cmp	r3, #0
 8001804:	f280 8302 	bge.w	8001e0c <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b29a      	uxth	r2, r3
 8001810:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001814:	4013      	ands	r3, r2
 8001816:	83fb      	strh	r3, [r7, #30]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	8bfa      	ldrh	r2, [r7, #30]
 800181e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001822:	b292      	uxth	r2, r2
 8001824:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4413      	add	r3, r2
 8001840:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800184a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800184e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d019      	beq.n	800188a <PCD_EP_ISR_Handler+0x1ec>
 8001856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d015      	beq.n	800188a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001864:	6959      	ldr	r1, [r3, #20]
 8001866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001868:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800186a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800186e:	b29b      	uxth	r3, r3
 8001870:	f004 fd13 	bl	800629a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	441a      	add	r2, r3
 800187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001880:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001882:	2100      	movs	r1, #0
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f006 feb5 	bl	80085f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001894:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189c:	2b00      	cmp	r3, #0
 800189e:	f040 82b5 	bne.w	8001e0c <PCD_EP_ISR_Handler+0x76e>
 80018a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80018aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80018ae:	f000 82ad 	beq.w	8001e0c <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	4413      	add	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018dc:	b29a      	uxth	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b3e      	cmp	r3, #62	; 0x3e
 80018e8:	d91d      	bls.n	8001926 <PCD_EP_ISR_Handler+0x288>
 80018ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
 80018f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <PCD_EP_ISR_Handler+0x266>
 80018fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001900:	3b01      	subs	r3, #1
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29a      	uxth	r2, r3
 800190a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190c:	b29b      	uxth	r3, r3
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	b29b      	uxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800191a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800191e:	b29a      	uxth	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	e026      	b.n	8001974 <PCD_EP_ISR_Handler+0x2d6>
 8001926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <PCD_EP_ISR_Handler+0x2a6>
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800193c:	b29a      	uxth	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	e017      	b.n	8001974 <PCD_EP_ISR_Handler+0x2d6>
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	647b      	str	r3, [r7, #68]	; 0x44
 800194c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <PCD_EP_ISR_Handler+0x2c0>
 8001958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195a:	3301      	adds	r3, #1
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	b29a      	uxth	r2, r3
 8001964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001966:	b29b      	uxth	r3, r3
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	b29b      	uxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b29a      	uxth	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001984:	827b      	strh	r3, [r7, #18]
 8001986:	8a7b      	ldrh	r3, [r7, #18]
 8001988:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800198c:	827b      	strh	r3, [r7, #18]
 800198e:	8a7b      	ldrh	r3, [r7, #18]
 8001990:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001994:	827b      	strh	r3, [r7, #18]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	8a7b      	ldrh	r3, [r7, #18]
 800199c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	8013      	strh	r3, [r2, #0]
 80019b0:	e22c      	b.n	8001e0c <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f280 80f6 	bge.w	8001bbc <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019e6:	4013      	ands	r3, r2
 80019e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80019fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a02:	b292      	uxth	r2, r2
 8001a04:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a06:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	7b1b      	ldrb	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d123      	bne.n	8001a6c <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a48:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001a4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 808e 	beq.w	8001b72 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	6959      	ldr	r1, [r3, #20]
 8001a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a60:	88da      	ldrh	r2, [r3, #6]
 8001a62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a66:	f004 fc18 	bl	800629a <USB_ReadPMA>
 8001a6a:	e082      	b.n	8001b72 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	78db      	ldrb	r3, [r3, #3]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d10a      	bne.n	8001a8a <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a78:	461a      	mov	r2, r3
 8001a7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f9d3 	bl	8001e28 <HAL_PCD_EP_DB_Receive>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a88:	e073      	b.n	8001b72 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	441a      	add	r2, r3
 8001ab6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d022      	beq.n	8001b2e <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b0c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d02c      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	6959      	ldr	r1, [r3, #20]
 8001b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b22:	891a      	ldrh	r2, [r3, #8]
 8001b24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b28:	f004 fbb7 	bl	800629a <USB_ReadPMA>
 8001b2c:	e021      	b.n	8001b72 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b64:	6959      	ldr	r1, [r3, #20]
 8001b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b68:	895a      	ldrh	r2, [r3, #10]
 8001b6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b6e:	f004 fb94 	bl	800629a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b7a:	441a      	add	r2, r3
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b88:	441a      	add	r2, r3
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <PCD_EP_ISR_Handler+0x504>
 8001b96:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d206      	bcs.n	8001bb0 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f006 fd23 	bl	80085f4 <HAL_PCD_DataOutStageCallback>
 8001bae:	e005      	b.n	8001bbc <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 fe21 	bl	80047fe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8121 	beq.w	8001e0c <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	441a      	add	r2, r3
 8001c0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	78db      	ldrb	r3, [r3, #3]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	f040 80a2 	bne.w	8001d68 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2c:	7b1b      	ldrb	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8093 	beq.w	8001d5a <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d046      	beq.n	8001cce <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d126      	bne.n	8001c96 <PCD_EP_ISR_Handler+0x5f8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	4413      	add	r3, r2
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	00da      	lsls	r2, r3, #3
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	4413      	add	r3, r2
 8001c6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c6e:	623b      	str	r3, [r7, #32]
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	801a      	strh	r2, [r3, #0]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	801a      	strh	r2, [r3, #0]
 8001c94:	e061      	b.n	8001d5a <PCD_EP_ISR_Handler+0x6bc>
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d15d      	bne.n	8001d5a <PCD_EP_ISR_Handler+0x6bc>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	4413      	add	r3, r2
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	00da      	lsls	r2, r3, #3
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	2200      	movs	r2, #0
 8001cca:	801a      	strh	r2, [r3, #0]
 8001ccc:	e045      	b.n	8001d5a <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd6:	785b      	ldrb	r3, [r3, #1]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d126      	bne.n	8001d2a <PCD_EP_ISR_Handler+0x68c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf0:	4413      	add	r3, r2
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	00da      	lsls	r2, r3, #3
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d12:	801a      	strh	r2, [r3, #0]
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d26:	801a      	strh	r2, [r3, #0]
 8001d28:	e017      	b.n	8001d5a <PCD_EP_ISR_Handler+0x6bc>
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d113      	bne.n	8001d5a <PCD_EP_ISR_Handler+0x6bc>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d40:	4413      	add	r3, r2
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	00da      	lsls	r2, r3, #3
 8001d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	2200      	movs	r2, #0
 8001d58:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f006 fc62 	bl	800862a <HAL_PCD_DataInStageCallback>
 8001d66:	e051      	b.n	8001e0c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d144      	bne.n	8001dfe <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d907      	bls.n	8001db8 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001db0:	1ad2      	subs	r2, r2, r3
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	e002      	b.n	8001dbe <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f006 fc2c 	bl	800862a <HAL_PCD_DataInStageCallback>
 8001dd2:	e01b      	b.n	8001e0c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ddc:	441a      	add	r2, r3
 8001dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001dea:	441a      	add	r2, r3
 8001dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dee:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fd01 	bl	80047fe <USB_EPStartXfer>
 8001dfc:	e006      	b.n	8001e0c <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001dfe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e02:	461a      	mov	r2, r3
 8001e04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f917 	bl	800203a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f6ff ac45 	blt.w	80016a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3758      	adds	r7, #88	; 0x58
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d07c      	beq.n	8001f3a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	8b7b      	ldrh	r3, [r7, #26]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d306      	bcc.n	8001e7e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	8b7b      	ldrh	r3, [r7, #26]
 8001e76:	1ad2      	subs	r2, r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	619a      	str	r2, [r3, #24]
 8001e7c:	e002      	b.n	8001e84 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d123      	bne.n	8001ed4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	833b      	strh	r3, [r7, #24]
 8001ea8:	8b3b      	ldrh	r3, [r7, #24]
 8001eaa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001eae:	833b      	strh	r3, [r7, #24]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	441a      	add	r2, r3
 8001ebe:	8b3b      	ldrh	r3, [r7, #24]
 8001ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01f      	beq.n	8001f1e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef8:	82fb      	strh	r3, [r7, #22]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	8afb      	ldrh	r3, [r7, #22]
 8001f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f1e:	8b7b      	ldrh	r3, [r7, #26]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8085 	beq.w	8002030 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	6959      	ldr	r1, [r3, #20]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	891a      	ldrh	r2, [r3, #8]
 8001f32:	8b7b      	ldrh	r3, [r7, #26]
 8001f34:	f004 f9b1 	bl	800629a <USB_ReadPMA>
 8001f38:	e07a      	b.n	8002030 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	8b7b      	ldrh	r3, [r7, #26]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d306      	bcc.n	8001f78 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	8b7b      	ldrh	r3, [r7, #26]
 8001f70:	1ad2      	subs	r2, r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	619a      	str	r2, [r3, #24]
 8001f76:	e002      	b.n	8001f7e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d123      	bne.n	8001fce <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa0:	83fb      	strh	r3, [r7, #30]
 8001fa2:	8bfb      	ldrh	r3, [r7, #30]
 8001fa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fa8:	83fb      	strh	r3, [r7, #30]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	441a      	add	r2, r3
 8001fb8:	8bfb      	ldrh	r3, [r7, #30]
 8001fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d11f      	bne.n	8002018 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	83bb      	strh	r3, [r7, #28]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	8bbb      	ldrh	r3, [r7, #28]
 8002004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800200c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002014:	b29b      	uxth	r3, r3
 8002016:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002018:	8b7b      	ldrh	r3, [r7, #26]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	6959      	ldr	r1, [r3, #20]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	895a      	ldrh	r2, [r3, #10]
 800202a:	8b7b      	ldrh	r3, [r7, #26]
 800202c:	f004 f935 	bl	800629a <USB_ReadPMA>
    }
  }

  return count;
 8002030:	8b7b      	ldrh	r3, [r7, #26]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b0a4      	sub	sp, #144	; 0x90
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	4613      	mov	r3, r2
 8002046:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 81db 	beq.w	800240a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4413      	add	r3, r2
 800206e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002078:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002084:	429a      	cmp	r2, r3
 8002086:	d907      	bls.n	8002098 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	e002      	b.n	800209e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80b9 	bne.w	800221a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	785b      	ldrb	r3, [r3, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d126      	bne.n	80020fe <HAL_PCD_EP_DB_Transmit+0xc4>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	4413      	add	r3, r2
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	00da      	lsls	r2, r3, #3
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	4413      	add	r3, r2
 80020d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	e01a      	b.n	8002134 <HAL_PCD_EP_DB_Transmit+0xfa>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d116      	bne.n	8002134 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	4413      	add	r3, r2
 800211c:	637b      	str	r3, [r7, #52]	; 0x34
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	00da      	lsls	r2, r3, #3
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	4413      	add	r3, r2
 8002128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d126      	bne.n	8002190 <HAL_PCD_EP_DB_Transmit+0x156>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	00da      	lsls	r2, r3, #3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002174:	b29a      	uxth	r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002188:	b29a      	uxth	r2, r3
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	e017      	b.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d113      	bne.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	4413      	add	r3, r2
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	00da      	lsls	r2, r3, #3
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	4413      	add	r3, r2
 80021b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	2200      	movs	r2, #0
 80021be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f006 fa2f 	bl	800862a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 82fa 	beq.w	80027cc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f2:	82fb      	strh	r3, [r7, #22]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	8afb      	ldrh	r3, [r7, #22]
 8002204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800220c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	b29b      	uxth	r3, r3
 8002216:	8013      	strh	r3, [r2, #0]
 8002218:	e2d8      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d021      	beq.n	8002268 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800223a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800225c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002264:	b29b      	uxth	r3, r3
 8002266:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800226e:	2b01      	cmp	r3, #1
 8002270:	f040 82ac 	bne.w	80027cc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800227c:	441a      	add	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800228a:	441a      	add	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	429a      	cmp	r2, r3
 800229a:	d30b      	bcc.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ac:	1ad2      	subs	r2, r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	621a      	str	r2, [r3, #32]
 80022b2:	e017      	b.n	80022e4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80022bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022cc:	e00a      	b.n	80022e4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d165      	bne.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x37e>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002300:	4413      	add	r3, r2
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	00da      	lsls	r2, r3, #3
 800230a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230c:	4413      	add	r3, r2
 800230e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002312:	63bb      	str	r3, [r7, #56]	; 0x38
 8002314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231e:	b29a      	uxth	r2, r3
 8002320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002328:	2b3e      	cmp	r3, #62	; 0x3e
 800232a:	d91d      	bls.n	8002368 <HAL_PCD_EP_DB_Transmit+0x32e>
 800232c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	64bb      	str	r3, [r7, #72]	; 0x48
 8002334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002342:	3b01      	subs	r3, #1
 8002344:	64bb      	str	r3, [r7, #72]	; 0x48
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29a      	uxth	r2, r3
 800234c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234e:	b29b      	uxth	r3, r3
 8002350:	029b      	lsls	r3, r3, #10
 8002352:	b29b      	uxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800235c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002360:	b29a      	uxth	r2, r3
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	e044      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237e:	b29a      	uxth	r2, r3
 8002380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	e035      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
 800238e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_PCD_EP_DB_Transmit+0x366>
 800239a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239c:	3301      	adds	r3, #1
 800239e:	64bb      	str	r3, [r7, #72]	; 0x48
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	e01c      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	785b      	ldrb	r3, [r3, #1]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d118      	bne.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	647b      	str	r3, [r7, #68]	; 0x44
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d4:	4413      	add	r3, r2
 80023d6:	647b      	str	r3, [r7, #68]	; 0x44
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	00da      	lsls	r2, r3, #3
 80023de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e0:	4413      	add	r3, r2
 80023e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023e6:	643b      	str	r3, [r7, #64]	; 0x40
 80023e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6959      	ldr	r1, [r3, #20]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	891a      	ldrh	r2, [r3, #8]
 80023fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002402:	b29b      	uxth	r3, r3
 8002404:	f003 ff07 	bl	8006216 <USB_WritePMA>
 8002408:	e1e0      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	4413      	add	r3, r2
 8002424:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800242e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800243a:	429a      	cmp	r2, r3
 800243c:	d307      	bcc.n	800244e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002446:	1ad2      	subs	r2, r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	619a      	str	r2, [r3, #24]
 800244c:	e002      	b.n	8002454 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f040 80c0 	bne.w	80025de <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	785b      	ldrb	r3, [r3, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d126      	bne.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800247a:	4413      	add	r3, r2
 800247c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	00da      	lsls	r2, r3, #3
 8002484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002486:	4413      	add	r3, r2
 8002488:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800248c:	67bb      	str	r3, [r7, #120]	; 0x78
 800248e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002498:	b29a      	uxth	r2, r3
 800249a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b0:	801a      	strh	r2, [r3, #0]
 80024b2:	e01a      	b.n	80024ea <HAL_PCD_EP_DB_Transmit+0x4b0>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d116      	bne.n	80024ea <HAL_PCD_EP_DB_Transmit+0x4b0>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	667b      	str	r3, [r7, #100]	; 0x64
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024d0:	4413      	add	r3, r2
 80024d2:	667b      	str	r3, [r7, #100]	; 0x64
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	00da      	lsls	r2, r3, #3
 80024da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024dc:	4413      	add	r3, r2
 80024de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e2:	663b      	str	r3, [r7, #96]	; 0x60
 80024e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e6:	2200      	movs	r2, #0
 80024e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	677b      	str	r3, [r7, #116]	; 0x74
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d12b      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0x516>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250c:	4413      	add	r3, r2
 800250e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	00da      	lsls	r2, r3, #3
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	4413      	add	r3, r2
 800251a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800251e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252e:	b29a      	uxth	r2, r3
 8002530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002546:	b29a      	uxth	r2, r3
 8002548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	e017      	b.n	8002580 <HAL_PCD_EP_DB_Transmit+0x546>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d113      	bne.n	8002580 <HAL_PCD_EP_DB_Transmit+0x546>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002560:	b29b      	uxth	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002566:	4413      	add	r3, r2
 8002568:	677b      	str	r3, [r7, #116]	; 0x74
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	00da      	lsls	r2, r3, #3
 8002570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002572:	4413      	add	r3, r2
 8002574:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002578:	673b      	str	r3, [r7, #112]	; 0x70
 800257a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257c:	2200      	movs	r2, #0
 800257e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f006 f84f 	bl	800862a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 811a 	bne.w	80027cc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	441a      	add	r2, r3
 80025c4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80025c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d8:	b29b      	uxth	r3, r3
 80025da:	8013      	strh	r3, [r2, #0]
 80025dc:	e0f6      	b.n	80027cc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d121      	bne.n	800262c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	441a      	add	r2, r3
 8002614:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800261c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002628:	b29b      	uxth	r3, r3
 800262a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002632:	2b01      	cmp	r3, #1
 8002634:	f040 80ca 	bne.w	80027cc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002640:	441a      	add	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800264e:	441a      	add	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d30b      	bcc.n	8002678 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	6a1a      	ldr	r2, [r3, #32]
 800266c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002670:	1ad2      	subs	r2, r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	621a      	str	r2, [r3, #32]
 8002676:	e017      	b.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d108      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002680:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002690:	e00a      	b.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2200      	movs	r2, #0
 800269e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	657b      	str	r3, [r7, #84]	; 0x54
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d165      	bne.n	8002782 <HAL_PCD_EP_DB_Transmit+0x748>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ca:	4413      	add	r3, r2
 80026cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	00da      	lsls	r2, r3, #3
 80026d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d6:	4413      	add	r3, r2
 80026d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80026de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026f2:	2b3e      	cmp	r3, #62	; 0x3e
 80026f4:	d91d      	bls.n	8002732 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80026fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800270a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800270c:	3b01      	subs	r3, #1
 800270e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29a      	uxth	r2, r3
 8002716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002718:	b29b      	uxth	r3, r3
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	b29b      	uxth	r3, r3
 800271e:	4313      	orrs	r3, r2
 8002720:	b29b      	uxth	r3, r3
 8002722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272a:	b29a      	uxth	r2, r3
 800272c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	e041      	b.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <HAL_PCD_EP_DB_Transmit+0x716>
 800273a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002748:	b29a      	uxth	r2, r3
 800274a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	e032      	b.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	66bb      	str	r3, [r7, #104]	; 0x68
 8002758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_PCD_EP_DB_Transmit+0x730>
 8002764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002766:	3301      	adds	r3, #1
 8002768:	66bb      	str	r3, [r7, #104]	; 0x68
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29a      	uxth	r2, r3
 8002770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002772:	b29b      	uxth	r3, r3
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	b29b      	uxth	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b29a      	uxth	r2, r3
 800277c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	e019      	b.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d115      	bne.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002798:	4413      	add	r3, r2
 800279a:	657b      	str	r3, [r7, #84]	; 0x54
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	00da      	lsls	r2, r3, #3
 80027a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a4:	4413      	add	r3, r2
 80027a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027aa:	653b      	str	r3, [r7, #80]	; 0x50
 80027ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6959      	ldr	r1, [r3, #20]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	895a      	ldrh	r2, [r3, #10]
 80027c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f003 fd25 	bl	8006216 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e6:	82bb      	strh	r3, [r7, #20]
 80027e8:	8abb      	ldrh	r3, [r7, #20]
 80027ea:	f083 0310 	eor.w	r3, r3, #16
 80027ee:	82bb      	strh	r3, [r7, #20]
 80027f0:	8abb      	ldrh	r3, [r7, #20]
 80027f2:	f083 0320 	eor.w	r3, r3, #32
 80027f6:	82bb      	strh	r3, [r7, #20]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	8abb      	ldrh	r3, [r7, #20]
 8002808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800280c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002818:	b29b      	uxth	r3, r3
 800281a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3790      	adds	r7, #144	; 0x90
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002826:	b480      	push	{r7}
 8002828:	b087      	sub	sp, #28
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
 8002834:	4613      	mov	r3, r2
 8002836:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002838:	897b      	ldrh	r3, [r7, #10]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002844:	897b      	ldrh	r3, [r7, #10]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e009      	b.n	8002870 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800285c:	897a      	ldrh	r2, [r7, #10]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	b29a      	uxth	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	80da      	strh	r2, [r3, #6]
 8002884:	e00b      	b.n	800289e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2201      	movs	r2, #1
 800288a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	b29a      	uxth	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	b29a      	uxth	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <HAL_PWREx_GetVoltageRange+0x18>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40007000 	.word	0x40007000

0800291c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800292a:	d130      	bne.n	800298e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002938:	d038      	beq.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002942:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2232      	movs	r2, #50	; 0x32
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0c9b      	lsrs	r3, r3, #18
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002960:	e002      	b.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b01      	subs	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002974:	d102      	bne.n	800297c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f2      	bne.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002988:	d110      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299a:	d007      	beq.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40007000 	.word	0x40007000
 80029c0:	20000000 	.word	0x20000000
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d6:	6053      	str	r3, [r2, #4]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40007000 	.word	0x40007000

080029e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f000 bc02 	b.w	8003200 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fc:	4b96      	ldr	r3, [pc, #600]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a06:	4b94      	ldr	r3, [pc, #592]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80e4 	beq.w	8002be6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4c>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	f040 808b 	bne.w	8002b42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	f040 8087 	bne.w	8002b42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a34:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x64>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e3d9      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	4b81      	ldr	r3, [pc, #516]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_RCC_OscConfig+0x7e>
 8002a5c:	4b7e      	ldr	r3, [pc, #504]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a64:	e005      	b.n	8002a72 <HAL_RCC_OscConfig+0x8a>
 8002a66:	4b7c      	ldr	r3, [pc, #496]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d223      	bcs.n	8002abe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd54 	bl	8003528 <RCC_SetFlashLatencyFromMSIRange>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e3ba      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8a:	4b73      	ldr	r3, [pc, #460]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a72      	ldr	r2, [pc, #456]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b70      	ldr	r3, [pc, #448]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	496d      	ldr	r1, [pc, #436]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa8:	4b6b      	ldr	r3, [pc, #428]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	4968      	ldr	r1, [pc, #416]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	e025      	b.n	8002b0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002abe:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4960      	ldr	r1, [pc, #384]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002adc:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	495b      	ldr	r1, [pc, #364]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fd14 	bl	8003528 <RCC_SetFlashLatencyFromMSIRange>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e37a      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b0a:	f000 fc81 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	4950      	ldr	r1, [pc, #320]	; (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a4e      	ldr	r2, [pc, #312]	; (8002c60 <HAL_RCC_OscConfig+0x278>)
 8002b28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_RCC_OscConfig+0x27c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fe3a 	bl	80007a8 <HAL_InitTick>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d052      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	e35e      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d032      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b4a:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b56:	f7fd fe77 	bl	8000848 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5e:	f7fd fe73 	bl	8000848 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e347      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a35      	ldr	r2, [pc, #212]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4930      	ldr	r1, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	492b      	ldr	r1, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
 8002bae:	e01a      	b.n	8002be6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bbc:	f7fd fe44 	bl	8000848 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc4:	f7fd fe40 	bl	8000848 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e314      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1dc>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d073      	beq.n	8002cda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x21c>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d10e      	bne.n	8002c1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d10b      	bne.n	8002c1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d063      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d15f      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e2f1      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x24c>
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e025      	b.n	8002c80 <HAL_RCC_OscConfig+0x298>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d114      	bne.n	8002c68 <HAL_RCC_OscConfig+0x280>
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a02      	ldr	r2, [pc, #8]	; (8002c58 <HAL_RCC_OscConfig+0x270>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e013      	b.n	8002c80 <HAL_RCC_OscConfig+0x298>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08009b74 	.word	0x08009b74
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000014 	.word	0x20000014
 8002c68:	4ba0      	ldr	r3, [pc, #640]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a9f      	ldr	r2, [pc, #636]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b9d      	ldr	r3, [pc, #628]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a9c      	ldr	r2, [pc, #624]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fd fdde 	bl	8000848 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fd fdda 	bl	8000848 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e2ae      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca2:	4b92      	ldr	r3, [pc, #584]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2a8>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fd fdca 	bl	8000848 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fd fdc6 	bl	8000848 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e29a      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cca:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2d0>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d060      	beq.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x310>
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d119      	bne.n	8002d26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d116      	bne.n	8002d26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf8:	4b7c      	ldr	r3, [pc, #496]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_OscConfig+0x328>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e277      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	4973      	ldr	r1, [pc, #460]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d24:	e040      	b.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d023      	beq.n	8002d76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2e:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6e      	ldr	r2, [pc, #440]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fd fd85 	bl	8000848 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fd fd81 	bl	8000848 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e255      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d54:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	495f      	ldr	r1, [pc, #380]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
 8002d74:	e018      	b.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5c      	ldr	r2, [pc, #368]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fd fd61 	bl	8000848 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7fd fd5d 	bl	8000848 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e231      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d03c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fd fd3c 	bl	8000848 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fd fd38 	bl	8000848 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e20c      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ef      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x3ec>
 8002df4:	e01b      	b.n	8002e2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fd fd1f 	bl	8000848 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fd fd1b 	bl	8000848 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e1ef      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ef      	bne.n	8002e0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a6 	beq.w	8002f88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10d      	bne.n	8002e68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6593      	str	r3, [r2, #88]	; 0x58
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e64:	2301      	movs	r3, #1
 8002e66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d118      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e80:	f7fd fce2 	bl	8000848 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fd fcde 	bl	8000848 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1b2      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCC_OscConfig+0x508>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4d8>
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebe:	e029      	b.n	8002f14 <HAL_RCC_OscConfig+0x52c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d115      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x50c>
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee8:	e014      	b.n	8002f14 <HAL_RCC_OscConfig+0x52c>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	4b9a      	ldr	r3, [pc, #616]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	4a99      	ldr	r2, [pc, #612]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f04:	4b96      	ldr	r3, [pc, #600]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	4a95      	ldr	r2, [pc, #596]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fd fc94 	bl	8000848 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fd fc90 	bl	8000848 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e162      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f3a:	4b89      	ldr	r3, [pc, #548]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ed      	beq.n	8002f24 <HAL_RCC_OscConfig+0x53c>
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fd fc7d 	bl	8000848 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fd fc79 	bl	8000848 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e14b      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f68:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ed      	bne.n	8002f52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	4b78      	ldr	r3, [pc, #480]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	4a77      	ldr	r2, [pc, #476]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03c      	beq.n	800300e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f9c:	4b70      	ldr	r3, [pc, #448]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fa2:	4a6f      	ldr	r2, [pc, #444]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fd fc4c 	bl	8000848 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb4:	f7fd fc48 	bl	8000848 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e11c      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x5cc>
 8002fd4:	e01b      	b.n	800300e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fd6:	4b62      	ldr	r3, [pc, #392]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fdc:	4a60      	ldr	r2, [pc, #384]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fd fc2f 	bl	8000848 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fee:	f7fd fc2b 	bl	8000848 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0ff      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003000:	4b57      	ldr	r3, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003002:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ef      	bne.n	8002fee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80f3 	beq.w	80031fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	2b02      	cmp	r3, #2
 800301e:	f040 80c9 	bne.w	80031b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003022:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0203 	and.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	429a      	cmp	r2, r3
 8003034:	d12c      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	3b01      	subs	r3, #1
 8003042:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d123      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d11b      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d113      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d109      	bne.n	8003090 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d06b      	beq.n	8003168 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d062      	beq.n	800315c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003096:	4b32      	ldr	r3, [pc, #200]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0ac      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 80030ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b2:	f7fd fbc9 	bl	8000848 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fd fbc5 	bl	8000848 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e099      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x77c>)
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f2:	0212      	lsls	r2, r2, #8
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030fa:	0852      	lsrs	r2, r2, #1
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0552      	lsls	r2, r2, #21
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003106:	0852      	lsrs	r2, r2, #1
 8003108:	3a01      	subs	r2, #1
 800310a:	0652      	lsls	r2, r2, #25
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003112:	06d2      	lsls	r2, r2, #27
 8003114:	430a      	orrs	r2, r1
 8003116:	4912      	ldr	r1, [pc, #72]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003118:	4313      	orrs	r3, r2
 800311a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003134:	f7fd fb88 	bl	8000848 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fd fb84 	bl	8000848 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e058      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <HAL_RCC_OscConfig+0x778>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800315a:	e050      	b.n	80031fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e04f      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
 8003160:	40021000 	.word	0x40021000
 8003164:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d144      	bne.n	80031fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003174:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a23      	ldr	r2, [pc, #140]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 800317a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 8003186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800318a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800318c:	f7fd fb5c 	bl	8000848 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fd fb58 	bl	8000848 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e02c      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x7ac>
 80031b2:	e024      	b.n	80031fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d01f      	beq.n	80031fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fd fb3f 	bl	8000848 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fd fb3b 	bl	8000848 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e00f      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4905      	ldr	r1, [pc, #20]	; (8003208 <HAL_RCC_OscConfig+0x820>)
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_OscConfig+0x824>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	60cb      	str	r3, [r1, #12]
 80031f8:	e001      	b.n	80031fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	feeefffc 	.word	0xfeeefffc

08003210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0e7      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b75      	ldr	r3, [pc, #468]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d910      	bls.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b72      	ldr	r3, [pc, #456]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4970      	ldr	r1, [pc, #448]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b6e      	ldr	r3, [pc, #440]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cf      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b66      	ldr	r3, [pc, #408]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4960      	ldr	r1, [pc, #384]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04c      	beq.n	8003328 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0a6      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	4b54      	ldr	r3, [pc, #336]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d115      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e09a      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c6:	4b4e      	ldr	r3, [pc, #312]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e08e      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e086      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4943      	ldr	r1, [pc, #268]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fd faa6 	bl	8000848 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fd faa2 	bl	8000848 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e06e      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003340:	429a      	cmp	r2, r3
 8003342:	d208      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	492b      	ldr	r1, [pc, #172]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d210      	bcs.n	8003386 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 0207 	bic.w	r2, r3, #7
 800336c:	4923      	ldr	r1, [pc, #140]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003374:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e036      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	4918      	ldr	r1, [pc, #96]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4910      	ldr	r1, [pc, #64]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c4:	f000 f824 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <HAL_RCC_ClockConfig+0x1f4>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1f8>)
 80033e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1fc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f9dd 	bl	80007a8 <HAL_InitTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40022000 	.word	0x40022000
 8003400:	40021000 	.word	0x40021000
 8003404:	08009b74 	.word	0x08009b74
 8003408:	20000000 	.word	0x20000000
 800340c:	20000014 	.word	0x20000014

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d121      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d11e      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003444:	4b34      	ldr	r3, [pc, #208]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003450:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e005      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800346c:	4a2b      	ldr	r2, [pc, #172]	; (800351c <HAL_RCC_GetSysClockFreq+0x10c>)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e004      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d101      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 8003496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d134      	bne.n	8003508 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d003      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0xac>
 80034b4:	e005      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 80034b8:	617b      	str	r3, [r7, #20]
      break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	e002      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	617b      	str	r3, [r7, #20]
      break;
 80034c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c8:	4b13      	ldr	r3, [pc, #76]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	3301      	adds	r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	fb03 f202 	mul.w	r2, r3, r2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	0e5b      	lsrs	r3, r3, #25
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	3301      	adds	r3, #1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003508:	69bb      	ldr	r3, [r7, #24]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	08009b84 	.word	0x08009b84
 8003520:	00f42400 	.word	0x00f42400
 8003524:	007a1200 	.word	0x007a1200

08003528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003540:	f7ff f9de 	bl	8002900 <HAL_PWREx_GetVoltageRange>
 8003544:	6178      	str	r0, [r7, #20]
 8003546:	e014      	b.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354c:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	6593      	str	r3, [r2, #88]	; 0x58
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003560:	f7ff f9ce 	bl	8002900 <HAL_PWREx_GetVoltageRange>
 8003564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003566:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003570:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d10b      	bne.n	8003592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d919      	bls.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2ba0      	cmp	r3, #160	; 0xa0
 8003584:	d902      	bls.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003586:	2302      	movs	r3, #2
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e013      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800358c:	2301      	movs	r3, #1
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	e010      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d902      	bls.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003598:	2303      	movs	r3, #3
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	e00a      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d102      	bne.n	80035aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a4:	2302      	movs	r3, #2
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	e004      	b.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d101      	bne.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b0:	2301      	movs	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 0207 	bic.w	r2, r3, #7
 80035bc:	4909      	ldr	r1, [pc, #36]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d001      	beq.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40022000 	.word	0x40022000

080035e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003600:	2b00      	cmp	r3, #0
 8003602:	d031      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800360c:	d01a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800360e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003612:	d814      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800361c:	d10f      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4a5c      	ldr	r2, [pc, #368]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362a:	e00c      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f9ce 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	74fb      	strb	r3, [r7, #19]
      break;
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800364c:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	494e      	ldr	r1, [pc, #312]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003662:	e001      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 809e 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800367a:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b40      	ldr	r3, [pc, #256]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	4a3f      	ldr	r2, [pc, #252]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369a:	6593      	str	r3, [r2, #88]	; 0x58
 800369c:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a8:	2301      	movs	r3, #1
 80036aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a39      	ldr	r2, [pc, #228]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b8:	f7fd f8c6 	bl	8000848 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c0:	f7fd f8c2 	bl	8000848 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	74fb      	strb	r3, [r7, #19]
        break;
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d4:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d15a      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e6:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01e      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d019      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372e:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd f882 	bl	8000848 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003746:	e00b      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fd f87e 	bl	8000848 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d902      	bls.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	74fb      	strb	r3, [r7, #19]
            break;
 800375e:	e006      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0ec      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10b      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b8a      	ldr	r3, [pc, #552]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a89      	ldr	r2, [pc, #548]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037be:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 0203 	bic.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4980      	ldr	r1, [pc, #512]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e0:	4b7b      	ldr	r3, [pc, #492]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 020c 	bic.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	4978      	ldr	r1, [pc, #480]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003802:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	496f      	ldr	r1, [pc, #444]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	4967      	ldr	r1, [pc, #412]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003846:	4b62      	ldr	r3, [pc, #392]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	495e      	ldr	r1, [pc, #376]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4956      	ldr	r1, [pc, #344]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388a:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d028      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ac:	4b48      	ldr	r3, [pc, #288]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4945      	ldr	r1, [pc, #276]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ca:	d106      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038cc:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a3f      	ldr	r2, [pc, #252]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d6:	60d3      	str	r3, [r2, #12]
 80038d8:	e011      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038e2:	d10c      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f872 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d028      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	492d      	ldr	r1, [pc, #180]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003928:	d106      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392a:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4a28      	ldr	r2, [pc, #160]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003934:	60d3      	str	r3, [r2, #12]
 8003936:	e011      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003940:	d10c      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	2101      	movs	r1, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f843 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01c      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003986:	d10c      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2102      	movs	r1, #2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f820 	bl	80039d4 <RCCEx_PLLSAI1_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	4904      	ldr	r1, [pc, #16]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000

080039d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039e2:	4b74      	ldr	r3, [pc, #464]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ee:	4b71      	ldr	r3, [pc, #452]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0203 	and.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d10d      	bne.n	8003a1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
       ||
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a06:	4b6b      	ldr	r3, [pc, #428]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
       ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d047      	beq.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e044      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d018      	beq.n	8003a5a <RCCEx_PLLSAI1_Config+0x86>
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d825      	bhi.n	8003a78 <RCCEx_PLLSAI1_Config+0xa4>
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d002      	beq.n	8003a36 <RCCEx_PLLSAI1_Config+0x62>
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d009      	beq.n	8003a48 <RCCEx_PLLSAI1_Config+0x74>
 8003a34:	e020      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a36:	4b5f      	ldr	r3, [pc, #380]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11d      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a46:	e01a      	b.n	8003a7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a48:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a58:	e013      	b.n	8003a82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a66:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a76:	e006      	b.n	8003a86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7c:	e004      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a8e:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	4943      	ldr	r1, [pc, #268]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d17c      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ab0:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3f      	ldr	r2, [pc, #252]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fc fec4 	bl	8000848 <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ac2:	e009      	b.n	8003ad8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ac4:	f7fc fec0 	bl	8000848 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d902      	bls.n	8003ad8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad6:	e005      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ef      	bne.n	8003ac4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d15f      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d110      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003af0:	4b30      	ldr	r3, [pc, #192]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003af8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	0211      	lsls	r1, r2, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	06d2      	lsls	r2, r2, #27
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	492a      	ldr	r1, [pc, #168]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	610b      	str	r3, [r1, #16]
 8003b10:	e027      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d112      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6912      	ldr	r2, [r2, #16]
 8003b2e:	0852      	lsrs	r2, r2, #1
 8003b30:	3a01      	subs	r2, #1
 8003b32:	0552      	lsls	r2, r2, #21
 8003b34:	430a      	orrs	r2, r1
 8003b36:	491f      	ldr	r1, [pc, #124]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	610b      	str	r3, [r1, #16]
 8003b3c:	e011      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6892      	ldr	r2, [r2, #8]
 8003b4e:	0211      	lsls	r1, r2, #8
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6952      	ldr	r2, [r2, #20]
 8003b54:	0852      	lsrs	r2, r2, #1
 8003b56:	3a01      	subs	r2, #1
 8003b58:	0652      	lsls	r2, r2, #25
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	4915      	ldr	r1, [pc, #84]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fc fe6b 	bl	8000848 <HAL_GetTick>
 8003b72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b74:	e009      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b76:	f7fc fe67 	bl	8000848 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d902      	bls.n	8003b8a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	73fb      	strb	r3, [r7, #15]
          break;
 8003b88:	e005      	b.n	8003b96 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ef      	beq.n	8003b76 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003bb8:	b084      	sub	sp, #16
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	f107 0014 	add.w	r0, r7, #20
 8003bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	b004      	add	sp, #16
 8003bd8:	4770      	bx	lr

08003bda <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003bea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003bee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c10:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003c14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	4013      	ands	r3, r2
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c58:	b084      	sub	sp, #16
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	f107 0014 	add.w	r0, r7, #20
 8003c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	b004      	add	sp, #16
 8003c98:	4770      	bx	lr
	...

08003c9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b09d      	sub	sp, #116	; 0x74
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	78db      	ldrb	r3, [r3, #3]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d81f      	bhi.n	8003d0e <USB_ActivateEndpoint+0x72>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <USB_ActivateEndpoint+0x38>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003d17 	.word	0x08003d17
 8003ce0:	08003cf3 	.word	0x08003cf3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ce4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003cf0:	e012      	b.n	8003d18 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003cf2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003cf6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003cfa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003cfe:	e00b      	b.n	8003d18 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003d00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003d04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003d0c:	e004      	b.n	8003d18 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003d14:	e000      	b.n	8003d18 <USB_ActivateEndpoint+0x7c>
      break;
 8003d16:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	b21a      	sxth	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b21b      	sxth	r3, r3
 8003d5e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	441a      	add	r2, r3
 8003d6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	7b1b      	ldrb	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f040 8178 	bne.w	800407e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8084 	beq.w	8003ea0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	4413      	add	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	00da      	lsls	r2, r3, #3
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	88db      	ldrh	r3, [r3, #6]
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	827b      	strh	r3, [r7, #18]
 8003dda:	8a7b      	ldrh	r3, [r7, #18]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01b      	beq.n	8003e1c <USB_ActivateEndpoint+0x180>
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	823b      	strh	r3, [r7, #16]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	8a3b      	ldrh	r3, [r7, #16]
 8003e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	78db      	ldrb	r3, [r3, #3]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d020      	beq.n	8003e66 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3a:	81bb      	strh	r3, [r7, #12]
 8003e3c:	89bb      	ldrh	r3, [r7, #12]
 8003e3e:	f083 0320 	eor.w	r3, r3, #32
 8003e42:	81bb      	strh	r3, [r7, #12]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	89bb      	ldrh	r3, [r7, #12]
 8003e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	8013      	strh	r3, [r2, #0]
 8003e64:	e2d5      	b.n	8004412 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e7c:	81fb      	strh	r3, [r7, #14]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	441a      	add	r2, r3
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
 8003e9e:	e2b8      	b.n	8004412 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	4413      	add	r3, r2
 8003eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	00da      	lsls	r2, r3, #3
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	88db      	ldrh	r3, [r3, #6]
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	4413      	add	r3, r2
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b3e      	cmp	r3, #62	; 0x3e
 8003f0e:	d91d      	bls.n	8003f4c <USB_ActivateEndpoint+0x2b0>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d102      	bne.n	8003f2a <USB_ActivateEndpoint+0x28e>
 8003f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f26:	3b01      	subs	r3, #1
 8003f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	029b      	lsls	r3, r3, #10
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	e026      	b.n	8003f9a <USB_ActivateEndpoint+0x2fe>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <USB_ActivateEndpoint+0x2ce>
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	e017      	b.n	8003f9a <USB_ActivateEndpoint+0x2fe>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <USB_ActivateEndpoint+0x2e8>
 8003f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f80:	3301      	adds	r3, #1
 8003f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	029b      	lsls	r3, r3, #10
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	4313      	orrs	r3, r2
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01b      	beq.n	8003fea <USB_ActivateEndpoint+0x34e>
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc8:	843b      	strh	r3, [r7, #32]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	441a      	add	r2, r3
 8003fd4:	8c3b      	ldrh	r3, [r7, #32]
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d124      	bne.n	800403c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004008:	83bb      	strh	r3, [r7, #28]
 800400a:	8bbb      	ldrh	r3, [r7, #28]
 800400c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004010:	83bb      	strh	r3, [r7, #28]
 8004012:	8bbb      	ldrh	r3, [r7, #28]
 8004014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004018:	83bb      	strh	r3, [r7, #28]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	441a      	add	r2, r3
 8004024:	8bbb      	ldrh	r3, [r7, #28]
 8004026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800402e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004036:	b29b      	uxth	r3, r3
 8004038:	8013      	strh	r3, [r2, #0]
 800403a:	e1ea      	b.n	8004412 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	83fb      	strh	r3, [r7, #30]
 8004054:	8bfb      	ldrh	r3, [r7, #30]
 8004056:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800405a:	83fb      	strh	r3, [r7, #30]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	441a      	add	r2, r3
 8004066:	8bfb      	ldrh	r3, [r7, #30]
 8004068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004078:	b29b      	uxth	r3, r3
 800407a:	8013      	strh	r3, [r2, #0]
 800407c:	e1c9      	b.n	8004412 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	78db      	ldrb	r3, [r3, #3]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d11e      	bne.n	80040c4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80040ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80040ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040be:	b29b      	uxth	r3, r3
 80040c0:	8013      	strh	r3, [r2, #0]
 80040c2:	e01d      	b.n	8004100 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004110:	4413      	add	r3, r2
 8004112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	00da      	lsls	r2, r3, #3
 800411a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411c:	4413      	add	r3, r2
 800411e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004122:	65bb      	str	r3, [r7, #88]	; 0x58
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	891b      	ldrh	r3, [r3, #8]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	657b      	str	r3, [r7, #84]	; 0x54
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413e:	b29b      	uxth	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004144:	4413      	add	r3, r2
 8004146:	657b      	str	r3, [r7, #84]	; 0x54
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	00da      	lsls	r2, r3, #3
 800414e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004150:	4413      	add	r3, r2
 8004152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004156:	653b      	str	r3, [r7, #80]	; 0x50
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	895b      	ldrh	r3, [r3, #10]
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	b29b      	uxth	r3, r3
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004166:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f040 8093 	bne.w	8004298 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004182:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01b      	beq.n	80041c6 <USB_ActivateEndpoint+0x52a>
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80041d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01b      	beq.n	8004216 <USB_ActivateEndpoint+0x57a>
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	441a      	add	r2, r3
 8004200:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004212:	b29b      	uxth	r3, r3
 8004214:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422c:	873b      	strh	r3, [r7, #56]	; 0x38
 800422e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004230:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004234:	873b      	strh	r3, [r7, #56]	; 0x38
 8004236:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004238:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800423c:	873b      	strh	r3, [r7, #56]	; 0x38
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800424a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004274:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]
 8004296:	e0bc      	b.n	8004412 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80042a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01d      	beq.n	80042f0 <USB_ActivateEndpoint+0x654>
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	441a      	add	r2, r3
 80042d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80042dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004300:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01d      	beq.n	8004348 <USB_ActivateEndpoint+0x6ac>
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004340:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004344:	b29b      	uxth	r3, r3
 8004346:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	78db      	ldrb	r3, [r3, #3]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d024      	beq.n	800439a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004366:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800436a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800436e:	f083 0320 	eor.w	r3, r3, #32
 8004372:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004394:	b29b      	uxth	r3, r3
 8004396:	8013      	strh	r3, [r2, #0]
 8004398:	e01d      	b.n	80043d6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80043c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004412:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004416:	4618      	mov	r0, r3
 8004418:	3774      	adds	r7, #116	; 0x74
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop

08004424 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004424:	b480      	push	{r7}
 8004426:	b08d      	sub	sp, #52	; 0x34
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	7b1b      	ldrb	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 808e 	bne.w	8004554 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d044      	beq.n	80044ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	81bb      	strh	r3, [r7, #12]
 800444e:	89bb      	ldrh	r3, [r7, #12]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01b      	beq.n	8004490 <USB_DeactivateEndpoint+0x6c>
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	817b      	strh	r3, [r7, #10]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	897b      	ldrh	r3, [r7, #10]
 800447c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800448c:	b29b      	uxth	r3, r3
 800448e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a6:	813b      	strh	r3, [r7, #8]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	893b      	ldrh	r3, [r7, #8]
 80044b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	8013      	strh	r3, [r2, #0]
 80044c8:	e192      	b.n	80047f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	827b      	strh	r3, [r7, #18]
 80044d8:	8a7b      	ldrh	r3, [r7, #18]
 80044da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01b      	beq.n	800451a <USB_DeactivateEndpoint+0xf6>
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f8:	823b      	strh	r3, [r7, #16]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	441a      	add	r2, r3
 8004504:	8a3b      	ldrh	r3, [r7, #16]
 8004506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004516:	b29b      	uxth	r3, r3
 8004518:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	81fb      	strh	r3, [r7, #14]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	89fb      	ldrh	r3, [r7, #14]
 800453e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454e:	b29b      	uxth	r3, r3
 8004550:	8013      	strh	r3, [r2, #0]
 8004552:	e14d      	b.n	80047f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f040 80a5 	bne.w	80046a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	843b      	strh	r3, [r7, #32]
 800456c:	8c3b      	ldrh	r3, [r7, #32]
 800456e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01b      	beq.n	80045ae <USB_DeactivateEndpoint+0x18a>
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	83fb      	strh	r3, [r7, #30]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	8bfb      	ldrh	r3, [r7, #30]
 800459a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800459e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	83bb      	strh	r3, [r7, #28]
 80045bc:	8bbb      	ldrh	r3, [r7, #28]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01b      	beq.n	80045fe <USB_DeactivateEndpoint+0x1da>
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045dc:	837b      	strh	r3, [r7, #26]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	8b7b      	ldrh	r3, [r7, #26]
 80045ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	833b      	strh	r3, [r7, #24]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	8b3b      	ldrh	r3, [r7, #24]
 8004622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004632:	b29b      	uxth	r3, r3
 8004634:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	82fb      	strh	r3, [r7, #22]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	441a      	add	r2, r3
 8004658:	8afb      	ldrh	r3, [r7, #22]
 800465a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466a:	b29b      	uxth	r3, r3
 800466c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004684:	82bb      	strh	r3, [r7, #20]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	8abb      	ldrh	r3, [r7, #20]
 8004692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8013      	strh	r3, [r2, #0]
 80046a6:	e0a3      	b.n	80047f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <USB_DeactivateEndpoint+0x2d4>
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004706:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <USB_DeactivateEndpoint+0x324>
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	853b      	strh	r3, [r7, #40]	; 0x28
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004740:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004744:	b29b      	uxth	r3, r3
 8004746:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800476c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	b29b      	uxth	r3, r3
 800477e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004796:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3734      	adds	r7, #52	; 0x34
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b0c2      	sub	sp, #264	; 0x108
 8004802:	af00      	add	r7, sp, #0
 8004804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800480c:	6018      	str	r0, [r3, #0]
 800480e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004816:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800481c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	2b01      	cmp	r3, #1
 8004826:	f040 86b7 	bne.w	8005598 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800482a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800482e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800483a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	429a      	cmp	r2, r3
 8004844:	d908      	bls.n	8004858 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800484a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004856:	e007      	b.n	8004868 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800485c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800486c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	7b1b      	ldrb	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d13a      	bne.n	80048ee <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800487c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6959      	ldr	r1, [r3, #20]
 8004884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	88da      	ldrh	r2, [r3, #6]
 8004890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004894:	b29b      	uxth	r3, r3
 8004896:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800489a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800489e:	6800      	ldr	r0, [r0, #0]
 80048a0:	f001 fcb9 	bl	8006216 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	00da      	lsls	r2, r3, #3
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	f000 be1f 	b.w	800552c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80048ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	78db      	ldrb	r3, [r3, #3]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	f040 8462 	bne.w	80051c4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	429a      	cmp	r2, r3
 800491a:	f240 83df 	bls.w	80050dc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800491e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800492c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004944:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800494c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004976:	b29b      	uxth	r3, r3
 8004978:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800497a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800497e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6a1a      	ldr	r2, [r3, #32]
 8004986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800499c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 81c7 	beq.w	8004d4e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
 80049cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d177      	bne.n	8004acc <USB_EPStartXfer+0x2ce>
 80049dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	4413      	add	r3, r2
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	00da      	lsls	r2, r3, #3
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	4413      	add	r3, r2
 8004a12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a2e:	d921      	bls.n	8004a74 <USB_EPStartXfer+0x276>
 8004a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <USB_EPStartXfer+0x252>
 8004a46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	029b      	lsls	r3, r3, #10
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	e050      	b.n	8004b16 <USB_EPStartXfer+0x318>
 8004a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <USB_EPStartXfer+0x294>
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	e041      	b.n	8004b16 <USB_EPStartXfer+0x318>
 8004a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <USB_EPStartXfer+0x2b4>
 8004aa8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004aac:	3301      	adds	r3, #1
 8004aae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	029b      	lsls	r3, r3, #10
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	e024      	b.n	8004b16 <USB_EPStartXfer+0x318>
 8004acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d11c      	bne.n	8004b16 <USB_EPStartXfer+0x318>
 8004adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	4413      	add	r3, r2
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
 8004af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	00da      	lsls	r2, r3, #3
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	4413      	add	r3, r2
 8004b06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	895b      	ldrh	r3, [r3, #10]
 8004b22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6959      	ldr	r1, [r3, #20]
 8004b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b3c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b40:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b44:	6800      	ldr	r0, [r0, #0]
 8004b46:	f001 fb66 	bl	8006216 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b5a:	441a      	add	r2, r3
 8004b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d90f      	bls.n	8004ba4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a1a      	ldr	r2, [r3, #32]
 8004b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b94:	1ad2      	subs	r2, r2, r3
 8004b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	621a      	str	r2, [r3, #32]
 8004ba2:	e00e      	b.n	8004bc2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d177      	bne.n	8004cc2 <USB_EPStartXfer+0x4c4>
 8004bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	00da      	lsls	r2, r3, #3
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	4413      	add	r3, r2
 8004c08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	801a      	strh	r2, [r3, #0]
 8004c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c22:	2b3e      	cmp	r3, #62	; 0x3e
 8004c24:	d921      	bls.n	8004c6a <USB_EPStartXfer+0x46c>
 8004c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <USB_EPStartXfer+0x448>
 8004c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c40:	3b01      	subs	r3, #1
 8004c42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	029b      	lsls	r3, r3, #10
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4313      	orrs	r3, r2
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	e056      	b.n	8004d18 <USB_EPStartXfer+0x51a>
 8004c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <USB_EPStartXfer+0x48a>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	e047      	b.n	8004d18 <USB_EPStartXfer+0x51a>
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <USB_EPStartXfer+0x4aa>
 8004c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	e02a      	b.n	8004d18 <USB_EPStartXfer+0x51a>
 8004cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	785b      	ldrb	r3, [r3, #1]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d122      	bne.n	8004d18 <USB_EPStartXfer+0x51a>
 8004cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	00da      	lsls	r2, r3, #3
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	4413      	add	r3, r2
 8004d08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	891b      	ldrh	r3, [r3, #8]
 8004d24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6959      	ldr	r1, [r3, #20]
 8004d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004d46:	6800      	ldr	r0, [r0, #0]
 8004d48:	f001 fa65 	bl	8006216 <USB_WritePMA>
 8004d4c:	e3ee      	b.n	800552c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d177      	bne.n	8004e4e <USB_EPStartXfer+0x650>
 8004d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d7e:	4413      	add	r3, r2
 8004d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	00da      	lsls	r2, r3, #3
 8004d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d92:	4413      	add	r3, r2
 8004d94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d98:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dae:	2b3e      	cmp	r3, #62	; 0x3e
 8004db0:	d921      	bls.n	8004df6 <USB_EPStartXfer+0x5f8>
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d104      	bne.n	8004dd2 <USB_EPStartXfer+0x5d4>
 8004dc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	029b      	lsls	r3, r3, #10
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	4313      	orrs	r3, r2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	e056      	b.n	8004ea4 <USB_EPStartXfer+0x6a6>
 8004df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <USB_EPStartXfer+0x616>
 8004dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e10:	801a      	strh	r2, [r3, #0]
 8004e12:	e047      	b.n	8004ea4 <USB_EPStartXfer+0x6a6>
 8004e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <USB_EPStartXfer+0x636>
 8004e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	029b      	lsls	r3, r3, #10
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	4313      	orrs	r3, r2
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e02a      	b.n	8004ea4 <USB_EPStartXfer+0x6a6>
 8004e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d122      	bne.n	8004ea4 <USB_EPStartXfer+0x6a6>
 8004e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	653b      	str	r3, [r7, #80]	; 0x50
 8004e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7e:	4413      	add	r3, r2
 8004e80:	653b      	str	r3, [r7, #80]	; 0x50
 8004e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	00da      	lsls	r2, r3, #3
 8004e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e92:	4413      	add	r3, r2
 8004e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	891b      	ldrh	r3, [r3, #8]
 8004eb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6959      	ldr	r1, [r3, #20]
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004eca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ece:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ed2:	6800      	ldr	r0, [r0, #0]
 8004ed4:	f001 f99f 	bl	8006216 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee8:	441a      	add	r2, r3
 8004eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d90f      	bls.n	8004f32 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6a1a      	ldr	r2, [r3, #32]
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	621a      	str	r2, [r3, #32]
 8004f30:	e00e      	b.n	8004f50 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	785b      	ldrb	r3, [r3, #1]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d177      	bne.n	800505c <USB_EPStartXfer+0x85e>
 8004f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	4413      	add	r3, r2
 8004f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	00da      	lsls	r2, r3, #3
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb6:	801a      	strh	r2, [r3, #0]
 8004fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8004fbe:	d921      	bls.n	8005004 <USB_EPStartXfer+0x806>
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <USB_EPStartXfer+0x7e2>
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	029b      	lsls	r3, r3, #10
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	e050      	b.n	80050a6 <USB_EPStartXfer+0x8a8>
 8005004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <USB_EPStartXfer+0x824>
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501a:	b29a      	uxth	r2, r3
 800501c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	e041      	b.n	80050a6 <USB_EPStartXfer+0x8a8>
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800502c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <USB_EPStartXfer+0x844>
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	3301      	adds	r3, #1
 800503e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29a      	uxth	r2, r3
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	b29b      	uxth	r3, r3
 800504e:	029b      	lsls	r3, r3, #10
 8005050:	b29b      	uxth	r3, r3
 8005052:	4313      	orrs	r3, r2
 8005054:	b29a      	uxth	r2, r3
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e024      	b.n	80050a6 <USB_EPStartXfer+0x8a8>
 800505c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d11c      	bne.n	80050a6 <USB_EPStartXfer+0x8a8>
 800506c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800507a:	b29b      	uxth	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005080:	4413      	add	r3, r2
 8005082:	643b      	str	r3, [r7, #64]	; 0x40
 8005084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	00da      	lsls	r2, r3, #3
 8005092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005094:	4413      	add	r3, r2
 8005096:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800509c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	895b      	ldrh	r3, [r3, #10]
 80050b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6959      	ldr	r1, [r3, #20]
 80050c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80050cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80050d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80050d4:	6800      	ldr	r0, [r0, #0]
 80050d6:	f001 f89e 	bl	8006216 <USB_WritePMA>
 80050da:	e227      	b.n	800552c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80050dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005144:	b29b      	uxth	r3, r3
 8005146:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005168:	4413      	add	r3, r2
 800516a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	00da      	lsls	r2, r3, #3
 800517a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517c:	4413      	add	r3, r2
 800517e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005182:	65bb      	str	r3, [r7, #88]	; 0x58
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005188:	b29a      	uxth	r2, r3
 800518a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800518c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	891b      	ldrh	r3, [r3, #8]
 800519a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800519e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6959      	ldr	r1, [r3, #20]
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051bc:	6800      	ldr	r0, [r0, #0]
 80051be:	f001 f82a 	bl	8006216 <USB_WritePMA>
 80051c2:	e1b3      	b.n	800552c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80051c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a1a      	ldr	r2, [r3, #32]
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80c6 	beq.w	8005396 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800520a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	673b      	str	r3, [r7, #112]	; 0x70
 8005216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d177      	bne.n	8005316 <USB_EPStartXfer+0xb18>
 8005226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	66bb      	str	r3, [r7, #104]	; 0x68
 8005232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005240:	b29b      	uxth	r3, r3
 8005242:	461a      	mov	r2, r3
 8005244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005246:	4413      	add	r3, r2
 8005248:	66bb      	str	r3, [r7, #104]	; 0x68
 800524a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	00da      	lsls	r2, r3, #3
 8005258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525a:	4413      	add	r3, r2
 800525c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005260:	667b      	str	r3, [r7, #100]	; 0x64
 8005262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800526c:	b29a      	uxth	r2, r3
 800526e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005276:	2b3e      	cmp	r3, #62	; 0x3e
 8005278:	d921      	bls.n	80052be <USB_EPStartXfer+0xac0>
 800527a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <USB_EPStartXfer+0xa9c>
 8005290:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005294:	3b01      	subs	r3, #1
 8005296:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800529a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29a      	uxth	r2, r3
 80052a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	029b      	lsls	r3, r3, #10
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	4313      	orrs	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	e050      	b.n	8005360 <USB_EPStartXfer+0xb62>
 80052be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <USB_EPStartXfer+0xade>
 80052c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	e041      	b.n	8005360 <USB_EPStartXfer+0xb62>
 80052dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <USB_EPStartXfer+0xafe>
 80052f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052f6:	3301      	adds	r3, #1
 80052f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29a      	uxth	r2, r3
 8005302:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005306:	b29b      	uxth	r3, r3
 8005308:	029b      	lsls	r3, r3, #10
 800530a:	b29b      	uxth	r3, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	b29a      	uxth	r2, r3
 8005310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e024      	b.n	8005360 <USB_EPStartXfer+0xb62>
 8005316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d11c      	bne.n	8005360 <USB_EPStartXfer+0xb62>
 8005326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005334:	b29b      	uxth	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800533a:	4413      	add	r3, r2
 800533c:	673b      	str	r3, [r7, #112]	; 0x70
 800533e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	00da      	lsls	r2, r3, #3
 800534c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800534e:	4413      	add	r3, r2
 8005350:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005354:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535a:	b29a      	uxth	r2, r3
 800535c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	895b      	ldrh	r3, [r3, #10]
 800536c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6959      	ldr	r1, [r3, #20]
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005380:	b29b      	uxth	r3, r3
 8005382:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005386:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800538a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800538e:	6800      	ldr	r0, [r0, #0]
 8005390:	f000 ff41 	bl	8006216 <USB_WritePMA>
 8005394:	e0ca      	b.n	800552c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d177      	bne.n	8005496 <USB_EPStartXfer+0xc98>
 80053a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053c6:	4413      	add	r3, r2
 80053c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	00da      	lsls	r2, r3, #3
 80053d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053da:	4413      	add	r3, r2
 80053dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f6:	2b3e      	cmp	r3, #62	; 0x3e
 80053f8:	d921      	bls.n	800543e <USB_EPStartXfer+0xc40>
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <USB_EPStartXfer+0xc1c>
 8005410:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005414:	3b01      	subs	r3, #1
 8005416:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800541a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29a      	uxth	r2, r3
 8005420:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005424:	b29b      	uxth	r3, r3
 8005426:	029b      	lsls	r3, r3, #10
 8005428:	b29b      	uxth	r3, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	b29b      	uxth	r3, r3
 800542e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005436:	b29a      	uxth	r2, r3
 8005438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543a:	801a      	strh	r2, [r3, #0]
 800543c:	e05c      	b.n	80054f8 <USB_EPStartXfer+0xcfa>
 800543e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <USB_EPStartXfer+0xc5e>
 8005446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005454:	b29a      	uxth	r2, r3
 8005456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	e04d      	b.n	80054f8 <USB_EPStartXfer+0xcfa>
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <USB_EPStartXfer+0xc7e>
 8005472:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005476:	3301      	adds	r3, #1
 8005478:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800547c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29a      	uxth	r2, r3
 8005482:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005486:	b29b      	uxth	r3, r3
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	b29b      	uxth	r3, r3
 800548c:	4313      	orrs	r3, r2
 800548e:	b29a      	uxth	r2, r3
 8005490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	e030      	b.n	80054f8 <USB_EPStartXfer+0xcfa>
 8005496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d128      	bne.n	80054f8 <USB_EPStartXfer+0xcfa>
 80054a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054ca:	4413      	add	r3, r2
 80054cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	00da      	lsls	r2, r3, #3
 80054de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e2:	4413      	add	r3, r2
 80054e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	891b      	ldrh	r3, [r3, #8]
 8005504:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6959      	ldr	r1, [r3, #20]
 8005514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005518:	b29b      	uxth	r3, r3
 800551a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800551e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005522:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005526:	6800      	ldr	r0, [r0, #0]
 8005528:	f000 fe75 	bl	8006216 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800552c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005552:	817b      	strh	r3, [r7, #10]
 8005554:	897b      	ldrh	r3, [r7, #10]
 8005556:	f083 0310 	eor.w	r3, r3, #16
 800555a:	817b      	strh	r3, [r7, #10]
 800555c:	897b      	ldrh	r3, [r7, #10]
 800555e:	f083 0320 	eor.w	r3, r3, #32
 8005562:	817b      	strh	r3, [r7, #10]
 8005564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	897b      	ldrh	r3, [r7, #10]
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
 8005594:	f000 bcde 	b.w	8005f54 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	7b1b      	ldrb	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f040 80bb 	bne.w	8005720 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80055aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d917      	bls.n	80055f6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80055c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80055d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	619a      	str	r2, [r3, #24]
 80055f4:	e00e      	b.n	8005614 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80055f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2200      	movs	r2, #0
 8005612:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005630:	b29b      	uxth	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005638:	4413      	add	r3, r2
 800563a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800563e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	00da      	lsls	r2, r3, #3
 800564c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005650:	4413      	add	r3, r2
 8005652:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800565a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005666:	b29a      	uxth	r2, r3
 8005668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005672:	2b3e      	cmp	r3, #62	; 0x3e
 8005674:	d924      	bls.n	80056c0 <USB_EPStartXfer+0xec2>
 8005676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <USB_EPStartXfer+0xe98>
 800568c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005690:	3b01      	subs	r3, #1
 8005692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29a      	uxth	r2, r3
 800569e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	4313      	orrs	r3, r2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	f000 bc10 	b.w	8005ee0 <USB_EPStartXfer+0x16e2>
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10c      	bne.n	80056e2 <USB_EPStartXfer+0xee4>
 80056c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d8:	b29a      	uxth	r2, r3
 80056da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e3fe      	b.n	8005ee0 <USB_EPStartXfer+0x16e2>
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d004      	beq.n	8005702 <USB_EPStartXfer+0xf04>
 80056f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056fc:	3301      	adds	r3, #1
 80056fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29a      	uxth	r2, r3
 800570a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800570e:	b29b      	uxth	r3, r3
 8005710:	029b      	lsls	r3, r3, #10
 8005712:	b29b      	uxth	r3, r3
 8005714:	4313      	orrs	r3, r2
 8005716:	b29a      	uxth	r2, r3
 8005718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	e3df      	b.n	8005ee0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	2b02      	cmp	r3, #2
 800572e:	f040 8218 	bne.w	8005b62 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 809d 	bne.w	800587e <USB_EPStartXfer+0x1080>
 8005744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005768:	4413      	add	r3, r2
 800576a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800576e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	00da      	lsls	r2, r3, #3
 800577c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005780:	4413      	add	r3, r2
 8005782:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800578a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005796:	b29a      	uxth	r2, r3
 8005798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b3e      	cmp	r3, #62	; 0x3e
 80057ac:	d92b      	bls.n	8005806 <USB_EPStartXfer+0x1008>
 80057ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <USB_EPStartXfer+0xfe0>
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	3b01      	subs	r3, #1
 80057da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e070      	b.n	80058e8 <USB_EPStartXfer+0x10ea>
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10c      	bne.n	8005830 <USB_EPStartXfer+0x1032>
 8005816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	e05b      	b.n	80058e8 <USB_EPStartXfer+0x10ea>
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <USB_EPStartXfer+0x1062>
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	3301      	adds	r3, #1
 800585c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29a      	uxth	r2, r3
 8005868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586c:	b29b      	uxth	r3, r3
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	b29b      	uxth	r3, r3
 8005872:	4313      	orrs	r3, r2
 8005874:	b29a      	uxth	r2, r3
 8005876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e034      	b.n	80058e8 <USB_EPStartXfer+0x10ea>
 800587e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d12c      	bne.n	80058e8 <USB_EPStartXfer+0x10ea>
 800588e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800589c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058b2:	4413      	add	r3, r2
 80058b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	00da      	lsls	r2, r3, #3
 80058c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 809d 	bne.w	8005a42 <USB_EPStartXfer+0x1244>
 8005908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800592c:	4413      	add	r3, r2
 800592e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	00da      	lsls	r2, r3, #3
 8005940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005944:	4413      	add	r3, r2
 8005946:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800594a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800594e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800595a:	b29a      	uxth	r2, r3
 800595c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b3e      	cmp	r3, #62	; 0x3e
 8005970:	d92b      	bls.n	80059ca <USB_EPStartXfer+0x11cc>
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <USB_EPStartXfer+0x11a4>
 8005998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599c:	3b01      	subs	r3, #1
 800599e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059c6:	801a      	strh	r2, [r3, #0]
 80059c8:	e069      	b.n	8005a9e <USB_EPStartXfer+0x12a0>
 80059ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10c      	bne.n	80059f4 <USB_EPStartXfer+0x11f6>
 80059da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	e054      	b.n	8005a9e <USB_EPStartXfer+0x12a0>
 80059f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <USB_EPStartXfer+0x1226>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4313      	orrs	r3, r2
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e02d      	b.n	8005a9e <USB_EPStartXfer+0x12a0>
 8005a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d125      	bne.n	8005a9e <USB_EPStartXfer+0x12a0>
 8005a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a68:	4413      	add	r3, r2
 8005a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	00da      	lsls	r2, r3, #3
 8005a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a80:	4413      	add	r3, r2
 8005a82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a9c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8218 	beq.w	8005ee0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ad0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <USB_EPStartXfer+0x12ea>
 8005adc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10d      	bne.n	8005b04 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ae8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 81f5 	bne.w	8005ee0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005af6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 81ee 	bne.w	8005ee0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	441a      	add	r2, r3
 8005b48:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	8013      	strh	r3, [r2, #0]
 8005b60:	e1be      	b.n	8005ee0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	78db      	ldrb	r3, [r3, #3]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	f040 81b4 	bne.w	8005edc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d917      	bls.n	8005bc0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb0:	1ad2      	subs	r2, r2, r3
 8005bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	619a      	str	r2, [r3, #24]
 8005bbe:	e00e      	b.n	8005bde <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 8085 	bne.w	8005cfa <USB_EPStartXfer+0x14fc>
 8005bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c14:	4413      	add	r3, r2
 8005c16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	00da      	lsls	r2, r3, #3
 8005c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c50:	d923      	bls.n	8005c9a <USB_EPStartXfer+0x149c>
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d104      	bne.n	8005c72 <USB_EPStartXfer+0x1474>
 8005c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	e060      	b.n	8005d5c <USB_EPStartXfer+0x155e>
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10c      	bne.n	8005cbc <USB_EPStartXfer+0x14be>
 8005ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	e04f      	b.n	8005d5c <USB_EPStartXfer+0x155e>
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <USB_EPStartXfer+0x14de>
 8005cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	029b      	lsls	r3, r3, #10
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e030      	b.n	8005d5c <USB_EPStartXfer+0x155e>
 8005cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d128      	bne.n	8005d5c <USB_EPStartXfer+0x155e>
 8005d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d2e:	4413      	add	r3, r2
 8005d30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00da      	lsls	r2, r3, #3
 8005d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d46:	4413      	add	r3, r2
 8005d48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 8085 	bne.w	8005e86 <USB_EPStartXfer+0x1688>
 8005d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005da0:	4413      	add	r3, r2
 8005da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	00da      	lsls	r2, r3, #3
 8005db4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005db8:	4413      	add	r3, r2
 8005dba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	2b3e      	cmp	r3, #62	; 0x3e
 8005ddc:	d923      	bls.n	8005e26 <USB_EPStartXfer+0x1628>
 8005dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <USB_EPStartXfer+0x1600>
 8005df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	4313      	orrs	r3, r2
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e05c      	b.n	8005ee0 <USB_EPStartXfer+0x16e2>
 8005e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10c      	bne.n	8005e48 <USB_EPStartXfer+0x164a>
 8005e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e44:	801a      	strh	r2, [r3, #0]
 8005e46:	e04b      	b.n	8005ee0 <USB_EPStartXfer+0x16e2>
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d004      	beq.n	8005e68 <USB_EPStartXfer+0x166a>
 8005e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e62:	3301      	adds	r3, #1
 8005e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	e02c      	b.n	8005ee0 <USB_EPStartXfer+0x16e2>
 8005e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d124      	bne.n	8005ee0 <USB_EPStartXfer+0x16e2>
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005eac:	4413      	add	r3, r2
 8005eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	00da      	lsls	r2, r3, #3
 8005ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	e001      	b.n	8005ee0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e03a      	b.n	8005f56 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005f0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f12:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005f16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f1e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f88:	81bb      	strh	r3, [r7, #12]
 8005f8a:	89bb      	ldrh	r3, [r7, #12]
 8005f8c:	f083 0310 	eor.w	r3, r3, #16
 8005f90:	81bb      	strh	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	441a      	add	r2, r3
 8005f9c:	89bb      	ldrh	r3, [r7, #12]
 8005f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	8013      	strh	r3, [r2, #0]
 8005fb2:	e01f      	b.n	8005ff4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	81fb      	strh	r3, [r7, #14]
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
 8005fce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fd2:	81fb      	strh	r3, [r7, #14]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	89fb      	ldrh	r3, [r7, #14]
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006002:	b480      	push	{r7}
 8006004:	b087      	sub	sp, #28
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	7b1b      	ldrb	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 809d 	bne.w	8006150 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d04c      	beq.n	80060b8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	823b      	strh	r3, [r7, #16]
 800602c:	8a3b      	ldrh	r3, [r7, #16]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01b      	beq.n	800606e <USB_EPClearStall+0x6c>
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604c:	81fb      	strh	r3, [r7, #14]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	89fb      	ldrh	r3, [r7, #14]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	78db      	ldrb	r3, [r3, #3]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d06c      	beq.n	8006150 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800608c:	81bb      	strh	r3, [r7, #12]
 800608e:	89bb      	ldrh	r3, [r7, #12]
 8006090:	f083 0320 	eor.w	r3, r3, #32
 8006094:	81bb      	strh	r3, [r7, #12]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	89bb      	ldrh	r3, [r7, #12]
 80060a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	8013      	strh	r3, [r2, #0]
 80060b6:	e04b      	b.n	8006150 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	82fb      	strh	r3, [r7, #22]
 80060c6:	8afb      	ldrh	r3, [r7, #22]
 80060c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01b      	beq.n	8006108 <USB_EPClearStall+0x106>
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	82bb      	strh	r3, [r7, #20]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	8abb      	ldrh	r3, [r7, #20]
 80060f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006104:	b29b      	uxth	r3, r3
 8006106:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	827b      	strh	r3, [r7, #18]
 8006120:	8a7b      	ldrh	r3, [r7, #18]
 8006122:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006126:	827b      	strh	r3, [r7, #18]
 8006128:	8a7b      	ldrh	r3, [r7, #18]
 800612a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800612e:	827b      	strh	r3, [r7, #18]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	8a7b      	ldrh	r3, [r7, #18]
 800613c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614c:	b29b      	uxth	r3, r3
 800614e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2280      	movs	r2, #128	; 0x80
 8006174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006194:	b29b      	uxth	r3, r3
 8006196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80061f0:	68fb      	ldr	r3, [r7, #12]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006216:	b480      	push	{r7}
 8006218:	b08b      	sub	sp, #44	; 0x2c
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	4611      	mov	r1, r2
 8006222:	461a      	mov	r2, r3
 8006224:	460b      	mov	r3, r1
 8006226:	80fb      	strh	r3, [r7, #6]
 8006228:	4613      	mov	r3, r2
 800622a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800622c:	88bb      	ldrh	r3, [r7, #4]
 800622e:	3301      	adds	r3, #1
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006246:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
 800624c:	e01b      	b.n	8006286 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	3301      	adds	r3, #1
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	b21a      	sxth	r2, r3
 800625e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006262:	4313      	orrs	r3, r2
 8006264:	b21b      	sxth	r3, r3
 8006266:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	8a7a      	ldrh	r2, [r7, #18]
 800626c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	3302      	adds	r3, #2
 8006272:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3301      	adds	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	3301      	adds	r3, #1
 800627e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	3b01      	subs	r3, #1
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e0      	bne.n	800624e <USB_WritePMA+0x38>
  }
}
 800628c:	bf00      	nop
 800628e:	bf00      	nop
 8006290:	372c      	adds	r7, #44	; 0x2c
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800629a:	b480      	push	{r7}
 800629c:	b08b      	sub	sp, #44	; 0x2c
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	4611      	mov	r1, r2
 80062a6:	461a      	mov	r2, r3
 80062a8:	460b      	mov	r3, r1
 80062aa:	80fb      	strh	r3, [r7, #6]
 80062ac:	4613      	mov	r3, r2
 80062ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062b0:	88bb      	ldrh	r3, [r7, #4]
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062c0:	88fa      	ldrh	r2, [r7, #6]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
 80062d0:	e018      	b.n	8006304 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	3302      	adds	r3, #2
 80062de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	3301      	adds	r3, #1
 80062ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	0a1b      	lsrs	r3, r3, #8
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	3301      	adds	r3, #1
 80062fc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	3b01      	subs	r3, #1
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e3      	bne.n	80062d2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800630a:	88bb      	ldrh	r3, [r7, #4]
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	701a      	strb	r2, [r3, #0]
  }
}
 8006326:	bf00      	nop
 8006328:	372c      	adds	r7, #44	; 0x2c
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006340:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006344:	f002 fc80 	bl	8008c48 <USBD_static_malloc>
 8006348:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	32b0      	adds	r2, #176	; 0xb0
 800635a:	2100      	movs	r1, #0
 800635c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006360:	2302      	movs	r3, #2
 8006362:	e0d4      	b.n	800650e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006364:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006368:	2100      	movs	r1, #0
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f002 fdad 	bl	8008eca <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	32b0      	adds	r2, #176	; 0xb0
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	32b0      	adds	r2, #176	; 0xb0
 800638a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7c1b      	ldrb	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d138      	bne.n	800640e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800639c:	4b5e      	ldr	r3, [pc, #376]	; (8006518 <USBD_CDC_Init+0x1e4>)
 800639e:	7819      	ldrb	r1, [r3, #0]
 80063a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a4:	2202      	movs	r2, #2
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f002 fa50 	bl	800884c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063ac:	4b5a      	ldr	r3, [pc, #360]	; (8006518 <USBD_CDC_Init+0x1e4>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 020f 	and.w	r2, r3, #15
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	3324      	adds	r3, #36	; 0x24
 80063c2:	2201      	movs	r2, #1
 80063c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063c6:	4b55      	ldr	r3, [pc, #340]	; (800651c <USBD_CDC_Init+0x1e8>)
 80063c8:	7819      	ldrb	r1, [r3, #0]
 80063ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ce:	2202      	movs	r2, #2
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f002 fa3b 	bl	800884c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063d6:	4b51      	ldr	r3, [pc, #324]	; (800651c <USBD_CDC_Init+0x1e8>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f003 020f 	and.w	r2, r3, #15
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063ee:	2201      	movs	r2, #1
 80063f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063f2:	4b4b      	ldr	r3, [pc, #300]	; (8006520 <USBD_CDC_Init+0x1ec>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f003 020f 	and.w	r2, r3, #15
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	3326      	adds	r3, #38	; 0x26
 8006408:	2210      	movs	r2, #16
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e035      	b.n	800647a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800640e:	4b42      	ldr	r3, [pc, #264]	; (8006518 <USBD_CDC_Init+0x1e4>)
 8006410:	7819      	ldrb	r1, [r3, #0]
 8006412:	2340      	movs	r3, #64	; 0x40
 8006414:	2202      	movs	r2, #2
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f002 fa18 	bl	800884c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800641c:	4b3e      	ldr	r3, [pc, #248]	; (8006518 <USBD_CDC_Init+0x1e4>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	3324      	adds	r3, #36	; 0x24
 8006432:	2201      	movs	r2, #1
 8006434:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006436:	4b39      	ldr	r3, [pc, #228]	; (800651c <USBD_CDC_Init+0x1e8>)
 8006438:	7819      	ldrb	r1, [r3, #0]
 800643a:	2340      	movs	r3, #64	; 0x40
 800643c:	2202      	movs	r2, #2
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f002 fa04 	bl	800884c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006444:	4b35      	ldr	r3, [pc, #212]	; (800651c <USBD_CDC_Init+0x1e8>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f003 020f 	and.w	r2, r3, #15
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800645c:	2201      	movs	r2, #1
 800645e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006460:	4b2f      	ldr	r3, [pc, #188]	; (8006520 <USBD_CDC_Init+0x1ec>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	3326      	adds	r3, #38	; 0x26
 8006476:	2210      	movs	r2, #16
 8006478:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800647a:	4b29      	ldr	r3, [pc, #164]	; (8006520 <USBD_CDC_Init+0x1ec>)
 800647c:	7819      	ldrb	r1, [r3, #0]
 800647e:	2308      	movs	r3, #8
 8006480:	2203      	movs	r2, #3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f002 f9e2 	bl	800884c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006488:	4b25      	ldr	r3, [pc, #148]	; (8006520 <USBD_CDC_Init+0x1ec>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3324      	adds	r3, #36	; 0x24
 800649e:	2201      	movs	r2, #1
 80064a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	33b0      	adds	r3, #176	; 0xb0
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80064d8:	2302      	movs	r3, #2
 80064da:	e018      	b.n	800650e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	7c1b      	ldrb	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064e4:	4b0d      	ldr	r3, [pc, #52]	; (800651c <USBD_CDC_Init+0x1e8>)
 80064e6:	7819      	ldrb	r1, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f002 fb26 	bl	8008b44 <USBD_LL_PrepareReceive>
 80064f8:	e008      	b.n	800650c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064fa:	4b08      	ldr	r3, [pc, #32]	; (800651c <USBD_CDC_Init+0x1e8>)
 80064fc:	7819      	ldrb	r1, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006504:	2340      	movs	r3, #64	; 0x40
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f002 fb1c 	bl	8008b44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	200000a3 	.word	0x200000a3
 800651c:	200000a4 	.word	0x200000a4
 8006520:	200000a5 	.word	0x200000a5

08006524 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006530:	4b3a      	ldr	r3, [pc, #232]	; (800661c <USBD_CDC_DeInit+0xf8>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f002 f9c6 	bl	80088c8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800653c:	4b37      	ldr	r3, [pc, #220]	; (800661c <USBD_CDC_DeInit+0xf8>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	3324      	adds	r3, #36	; 0x24
 8006552:	2200      	movs	r2, #0
 8006554:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006556:	4b32      	ldr	r3, [pc, #200]	; (8006620 <USBD_CDC_DeInit+0xfc>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f002 f9b3 	bl	80088c8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006562:	4b2f      	ldr	r3, [pc, #188]	; (8006620 <USBD_CDC_DeInit+0xfc>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f003 020f 	and.w	r2, r3, #15
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800657a:	2200      	movs	r2, #0
 800657c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800657e:	4b29      	ldr	r3, [pc, #164]	; (8006624 <USBD_CDC_DeInit+0x100>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f002 f99f 	bl	80088c8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800658a:	4b26      	ldr	r3, [pc, #152]	; (8006624 <USBD_CDC_DeInit+0x100>)
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f003 020f 	and.w	r2, r3, #15
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3324      	adds	r3, #36	; 0x24
 80065a0:	2200      	movs	r2, #0
 80065a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80065a4:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <USBD_CDC_DeInit+0x100>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3326      	adds	r3, #38	; 0x26
 80065ba:	2200      	movs	r2, #0
 80065bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	32b0      	adds	r2, #176	; 0xb0
 80065c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01f      	beq.n	8006610 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	33b0      	adds	r3, #176	; 0xb0
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	; 0xb0
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f002 fb36 	bl	8008c64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	32b0      	adds	r2, #176	; 0xb0
 8006602:	2100      	movs	r1, #0
 8006604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200000a3 	.word	0x200000a3
 8006620:	200000a4 	.word	0x200000a4
 8006624:	200000a5 	.word	0x200000a5

08006628 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	32b0      	adds	r2, #176	; 0xb0
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006654:	2303      	movs	r3, #3
 8006656:	e0bf      	b.n	80067d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006660:	2b00      	cmp	r3, #0
 8006662:	d050      	beq.n	8006706 <USBD_CDC_Setup+0xde>
 8006664:	2b20      	cmp	r3, #32
 8006666:	f040 80af 	bne.w	80067c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	88db      	ldrh	r3, [r3, #6]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d03a      	beq.n	80066e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	b25b      	sxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	da1b      	bge.n	80066b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	33b0      	adds	r3, #176	; 0xb0
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006692:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	88d2      	ldrh	r2, [r2, #6]
 8006698:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	88db      	ldrh	r3, [r3, #6]
 800669e:	2b07      	cmp	r3, #7
 80066a0:	bf28      	it	cs
 80066a2:	2307      	movcs	r3, #7
 80066a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	89fa      	ldrh	r2, [r7, #14]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 fce1 	bl	8008074 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80066b2:	e090      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	785a      	ldrb	r2, [r3, #1]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	88db      	ldrh	r3, [r3, #6]
 80066c2:	2b3f      	cmp	r3, #63	; 0x3f
 80066c4:	d803      	bhi.n	80066ce <USBD_CDC_Setup+0xa6>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	88db      	ldrh	r3, [r3, #6]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	e000      	b.n	80066d0 <USBD_CDC_Setup+0xa8>
 80066ce:	2240      	movs	r2, #64	; 0x40
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066d6:	6939      	ldr	r1, [r7, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80066de:	461a      	mov	r2, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fcf3 	bl	80080cc <USBD_CtlPrepareRx>
      break;
 80066e6:	e076      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	33b0      	adds	r3, #176	; 0xb0
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	7850      	ldrb	r0, [r2, #1]
 80066fe:	2200      	movs	r2, #0
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	4798      	blx	r3
      break;
 8006704:	e067      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	2b0b      	cmp	r3, #11
 800670c:	d851      	bhi.n	80067b2 <USBD_CDC_Setup+0x18a>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <USBD_CDC_Setup+0xec>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006745 	.word	0x08006745
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067b3 	.word	0x080067b3
 8006720:	080067b3 	.word	0x080067b3
 8006724:	080067b3 	.word	0x080067b3
 8006728:	080067b3 	.word	0x080067b3
 800672c:	080067b3 	.word	0x080067b3
 8006730:	080067b3 	.word	0x080067b3
 8006734:	080067b3 	.word	0x080067b3
 8006738:	080067b3 	.word	0x080067b3
 800673c:	0800676f 	.word	0x0800676f
 8006740:	08006799 	.word	0x08006799
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b03      	cmp	r3, #3
 800674e:	d107      	bne.n	8006760 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006750:	f107 030a 	add.w	r3, r7, #10
 8006754:	2202      	movs	r2, #2
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fc8b 	bl	8008074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800675e:	e032      	b.n	80067c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fc15 	bl	8007f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8006768:	2303      	movs	r3, #3
 800676a:	75fb      	strb	r3, [r7, #23]
          break;
 800676c:	e02b      	b.n	80067c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b03      	cmp	r3, #3
 8006778:	d107      	bne.n	800678a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800677a:	f107 030d 	add.w	r3, r7, #13
 800677e:	2201      	movs	r2, #1
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 fc76 	bl	8008074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006788:	e01d      	b.n	80067c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fc00 	bl	8007f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8006792:	2303      	movs	r3, #3
 8006794:	75fb      	strb	r3, [r7, #23]
          break;
 8006796:	e016      	b.n	80067c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d00f      	beq.n	80067c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fbf3 	bl	8007f92 <USBD_CtlError>
            ret = USBD_FAIL;
 80067ac:	2303      	movs	r3, #3
 80067ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067b0:	e008      	b.n	80067c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fbec 	bl	8007f92 <USBD_CtlError>
          ret = USBD_FAIL;
 80067ba:	2303      	movs	r3, #3
 80067bc:	75fb      	strb	r3, [r7, #23]
          break;
 80067be:	e002      	b.n	80067c6 <USBD_CDC_Setup+0x19e>
          break;
 80067c0:	bf00      	nop
 80067c2:	e008      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>
          break;
 80067c4:	bf00      	nop
      }
      break;
 80067c6:	e006      	b.n	80067d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 fbe1 	bl	8007f92 <USBD_CtlError>
      ret = USBD_FAIL;
 80067d0:	2303      	movs	r3, #3
 80067d2:	75fb      	strb	r3, [r7, #23]
      break;
 80067d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80067f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32b0      	adds	r2, #176	; 0xb0
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006806:	2303      	movs	r3, #3
 8006808:	e065      	b.n	80068d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	32b0      	adds	r2, #176	; 0xb0
 8006814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006818:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	f003 020f 	and.w	r2, r3, #15
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	3318      	adds	r3, #24
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d02f      	beq.n	8006894 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	f003 020f 	and.w	r2, r3, #15
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	3318      	adds	r3, #24
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	f003 010f 	and.w	r1, r3, #15
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	460b      	mov	r3, r1
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4403      	add	r3, r0
 800685c:	3338      	adds	r3, #56	; 0x38
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	fbb2 f1f3 	udiv	r1, r2, r3
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800686a:	2b00      	cmp	r3, #0
 800686c:	d112      	bne.n	8006894 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	f003 020f 	and.w	r2, r3, #15
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3318      	adds	r3, #24
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006886:	78f9      	ldrb	r1, [r7, #3]
 8006888:	2300      	movs	r3, #0
 800688a:	2200      	movs	r2, #0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f002 f921 	bl	8008ad4 <USBD_LL_Transmit>
 8006892:	e01f      	b.n	80068d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	33b0      	adds	r3, #176	; 0xb0
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d010      	beq.n	80068d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	33b0      	adds	r3, #176	; 0xb0
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068d0:	78fa      	ldrb	r2, [r7, #3]
 80068d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	32b0      	adds	r2, #176	; 0xb0
 80068f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	32b0      	adds	r2, #176	; 0xb0
 8006904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800690c:	2303      	movs	r3, #3
 800690e:	e01a      	b.n	8006946 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f002 f94d 	bl	8008bb4 <USBD_LL_GetRxDataSize>
 800691a:	4602      	mov	r2, r0
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	33b0      	adds	r3, #176	; 0xb0
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006940:	4611      	mov	r1, r2
 8006942:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	32b0      	adds	r2, #176	; 0xb0
 8006960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006964:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	e025      	b.n	80069bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	33b0      	adds	r3, #176	; 0xb0
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01a      	beq.n	80069ba <USBD_CDC_EP0_RxReady+0x6c>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800698a:	2bff      	cmp	r3, #255	; 0xff
 800698c:	d015      	beq.n	80069ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	33b0      	adds	r3, #176	; 0xb0
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80069a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069ae:	b292      	uxth	r2, r2
 80069b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	22ff      	movs	r2, #255	; 0xff
 80069b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069cc:	2182      	movs	r1, #130	; 0x82
 80069ce:	4818      	ldr	r0, [pc, #96]	; (8006a30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069d0:	f000 fc7d 	bl	80072ce <USBD_GetEpDesc>
 80069d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069d6:	2101      	movs	r1, #1
 80069d8:	4815      	ldr	r0, [pc, #84]	; (8006a30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069da:	f000 fc78 	bl	80072ce <USBD_GetEpDesc>
 80069de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069e0:	2181      	movs	r1, #129	; 0x81
 80069e2:	4813      	ldr	r0, [pc, #76]	; (8006a30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069e4:	f000 fc73 	bl	80072ce <USBD_GetEpDesc>
 80069e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2210      	movs	r2, #16
 80069f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a04:	711a      	strb	r2, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d006      	beq.n	8006a1e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a18:	711a      	strb	r2, [r3, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2243      	movs	r2, #67	; 0x43
 8006a22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000060 	.word	0x20000060

08006a34 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a3c:	2182      	movs	r1, #130	; 0x82
 8006a3e:	4818      	ldr	r0, [pc, #96]	; (8006aa0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a40:	f000 fc45 	bl	80072ce <USBD_GetEpDesc>
 8006a44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a46:	2101      	movs	r1, #1
 8006a48:	4815      	ldr	r0, [pc, #84]	; (8006aa0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a4a:	f000 fc40 	bl	80072ce <USBD_GetEpDesc>
 8006a4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a50:	2181      	movs	r1, #129	; 0x81
 8006a52:	4813      	ldr	r0, [pc, #76]	; (8006aa0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a54:	f000 fc3b 	bl	80072ce <USBD_GetEpDesc>
 8006a58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2210      	movs	r2, #16
 8006a64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	711a      	strb	r2, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f042 0202 	orr.w	r2, r2, #2
 8006a78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d006      	beq.n	8006a8e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	711a      	strb	r2, [r3, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f042 0202 	orr.w	r2, r2, #2
 8006a8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2243      	movs	r2, #67	; 0x43
 8006a92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000060 	.word	0x20000060

08006aa4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006aac:	2182      	movs	r1, #130	; 0x82
 8006aae:	4818      	ldr	r0, [pc, #96]	; (8006b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ab0:	f000 fc0d 	bl	80072ce <USBD_GetEpDesc>
 8006ab4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4815      	ldr	r0, [pc, #84]	; (8006b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006aba:	f000 fc08 	bl	80072ce <USBD_GetEpDesc>
 8006abe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ac0:	2181      	movs	r1, #129	; 0x81
 8006ac2:	4813      	ldr	r0, [pc, #76]	; (8006b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ac4:	f000 fc03 	bl	80072ce <USBD_GetEpDesc>
 8006ac8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae4:	711a      	strb	r2, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d006      	beq.n	8006afe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006af8:	711a      	strb	r2, [r3, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2243      	movs	r2, #67	; 0x43
 8006b02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b04:	4b02      	ldr	r3, [pc, #8]	; (8006b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000060 	.word	0x20000060

08006b14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	220a      	movs	r2, #10
 8006b20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b22:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	2000001c 	.word	0x2000001c

08006b34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e009      	b.n	8006b5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	33b0      	adds	r3, #176	; 0xb0
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	32b0      	adds	r2, #176	; 0xb0
 8006b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b82:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e008      	b.n	8006ba0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	32b0      	adds	r2, #176	; 0xb0
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e004      	b.n	8006bda <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32b0      	adds	r2, #176	; 0xb0
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	32b0      	adds	r2, #176	; 0xb0
 8006c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e018      	b.n	8006c48 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7c1b      	ldrb	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c1e:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <USBD_CDC_ReceivePacket+0x68>)
 8006c20:	7819      	ldrb	r1, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 ff89 	bl	8008b44 <USBD_LL_PrepareReceive>
 8006c32:	e008      	b.n	8006c46 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <USBD_CDC_ReceivePacket+0x68>)
 8006c36:	7819      	ldrb	r1, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c3e:	2340      	movs	r3, #64	; 0x40
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 ff7f 	bl	8008b44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	200000a4 	.word	0x200000a4

08006c54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e01f      	b.n	8006cac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	79fa      	ldrb	r2, [r7, #7]
 8006c9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f001 fd3f 	bl	8008724 <USBD_LL_Init>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e025      	b.n	8006d18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	; 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00f      	beq.n	8006d08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	32ae      	adds	r2, #174	; 0xae
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	f107 020e 	add.w	r2, r7, #14
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fd5d 	bl	80087e8 <USBD_LL_Start>
 8006d2e:	4603      	mov	r3, r0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	4611      	mov	r1, r2
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	4611      	mov	r1, r2
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006dac:	2303      	movs	r3, #3
 8006dae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 f8a6 	bl	8007f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006de0:	461a      	mov	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d01a      	beq.n	8006e2c <USBD_LL_SetupStage+0x72>
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d822      	bhi.n	8006e40 <USBD_LL_SetupStage+0x86>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <USBD_LL_SetupStage+0x4a>
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d00a      	beq.n	8006e18 <USBD_LL_SetupStage+0x5e>
 8006e02:	e01d      	b.n	8006e40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fad3 	bl	80073b8 <USBD_StdDevReq>
 8006e12:	4603      	mov	r3, r0
 8006e14:	73fb      	strb	r3, [r7, #15]
      break;
 8006e16:	e020      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb3b 	bl	800749c <USBD_StdItfReq>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2a:	e016      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fb9d 	bl	8007574 <USBD_StdEPReq>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3e:	e00c      	b.n	8006e5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fd70 	bl	8008934 <USBD_LL_StallEP>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
      break;
 8006e58:	bf00      	nop
  }

  return ret;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d16e      	bne.n	8006f5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	f040 8098 	bne.w	8006fc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d913      	bls.n	8006ec4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	bf28      	it	cs
 8006eb6:	4613      	movcs	r3, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f001 f922 	bl	8008106 <USBD_CtlContinueRx>
 8006ec2:	e07d      	b.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d014      	beq.n	8006efc <USBD_LL_DataOutStage+0x98>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d81d      	bhi.n	8006f12 <USBD_LL_DataOutStage+0xae>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <USBD_LL_DataOutStage+0x7c>
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d003      	beq.n	8006ee6 <USBD_LL_DataOutStage+0x82>
 8006ede:	e018      	b.n	8006f12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ee4:	e018      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f9d2 	bl	800729a <USBD_CoreFindIF>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75bb      	strb	r3, [r7, #22]
            break;
 8006efa:	e00d      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f9d4 	bl	80072b4 <USBD_CoreFindEP>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006f10:	e002      	b.n	8006f18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75bb      	strb	r3, [r7, #22]
            break;
 8006f16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f18:	7dbb      	ldrb	r3, [r7, #22]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d119      	bne.n	8006f52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d113      	bne.n	8006f52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f2a:	7dba      	ldrb	r2, [r7, #22]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	32ae      	adds	r2, #174	; 0xae
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f3a:	7dba      	ldrb	r2, [r7, #22]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f42:	7dba      	ldrb	r2, [r7, #22]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	32ae      	adds	r2, #174	; 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f001 f8e8 	bl	8008128 <USBD_CtlSendStatus>
 8006f58:	e032      	b.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f9a5 	bl	80072b4 <USBD_CoreFindEP>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f6e:	7dbb      	ldrb	r3, [r7, #22]
 8006f70:	2bff      	cmp	r3, #255	; 0xff
 8006f72:	d025      	beq.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
 8006f74:	7dbb      	ldrb	r3, [r7, #22]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d122      	bne.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d117      	bne.n	8006fb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f86:	7dba      	ldrb	r2, [r7, #22]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	32ae      	adds	r2, #174	; 0xae
 8006f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f96:	7dba      	ldrb	r2, [r7, #22]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f9e:	7dba      	ldrb	r2, [r7, #22]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	32ae      	adds	r2, #174	; 0xae
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	7afa      	ldrb	r2, [r7, #11]
 8006fac:	4611      	mov	r1, r2
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	4798      	blx	r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	e000      	b.n	8006fc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d16f      	bne.n	80070be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d15a      	bne.n	80070a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d914      	bls.n	8007024 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	461a      	mov	r2, r3
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 f84a 	bl	80080aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007016:	2300      	movs	r3, #0
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fd91 	bl	8008b44 <USBD_LL_PrepareReceive>
 8007022:	e03f      	b.n	80070a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	429a      	cmp	r2, r3
 800702e:	d11c      	bne.n	800706a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007038:	429a      	cmp	r2, r3
 800703a:	d316      	bcc.n	800706a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007046:	429a      	cmp	r2, r3
 8007048:	d20f      	bcs.n	800706a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 f82b 	bl	80080aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705c:	2300      	movs	r3, #0
 800705e:	2200      	movs	r2, #0
 8007060:	2100      	movs	r1, #0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f001 fd6e 	bl	8008b44 <USBD_LL_PrepareReceive>
 8007068:	e01c      	b.n	80070a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b03      	cmp	r3, #3
 8007074:	d10f      	bne.n	8007096 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007096:	2180      	movs	r1, #128	; 0x80
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f001 fc4b 	bl	8008934 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 f855 	bl	800814e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d03a      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fe42 	bl	8006d38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070bc:	e032      	b.n	8007124 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f8f3 	bl	80072b4 <USBD_CoreFindEP>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	2bff      	cmp	r3, #255	; 0xff
 80070d6:	d025      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d122      	bne.n	8007124 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d11c      	bne.n	8007124 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070ea:	7dfa      	ldrb	r2, [r7, #23]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	32ae      	adds	r2, #174	; 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d014      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070fa:	7dfa      	ldrb	r2, [r7, #23]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007102:	7dfa      	ldrb	r2, [r7, #23]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	32ae      	adds	r2, #174	; 0xae
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	7afa      	ldrb	r2, [r7, #11]
 8007110:	4611      	mov	r1, r2
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	4798      	blx	r3
 8007116:	4603      	mov	r3, r0
 8007118:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800711a:	7dbb      	ldrb	r3, [r7, #22]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007120:	7dbb      	ldrb	r3, [r7, #22]
 8007122:	e000      	b.n	8007126 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d014      	beq.n	8007194 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6852      	ldr	r2, [r2, #4]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	4611      	mov	r1, r2
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	4798      	blx	r3
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007190:	2303      	movs	r3, #3
 8007192:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	2200      	movs	r2, #0
 8007198:	2100      	movs	r1, #0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fb56 	bl	800884c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2240      	movs	r2, #64	; 0x40
 80071ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	2200      	movs	r2, #0
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fb48 	bl	800884c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	621a      	str	r2, [r3, #32]

  return ret;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b04      	cmp	r3, #4
 8007204:	d006      	beq.n	8007214 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2da      	uxtb	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2204      	movs	r2, #4
 8007218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b04      	cmp	r3, #4
 800723c:	d106      	bne.n	800724c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b03      	cmp	r3, #3
 800726c:	d110      	bne.n	8007290 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b086      	sub	sp, #24
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	885b      	ldrh	r3, [r3, #2]
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d920      	bls.n	8007338 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80072fe:	e013      	b.n	8007328 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007300:	f107 030a 	add.w	r3, r7, #10
 8007304:	4619      	mov	r1, r3
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f000 f81b 	bl	8007342 <USBD_GetNextDesc>
 800730c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	2b05      	cmp	r3, #5
 8007314:	d108      	bne.n	8007328 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	789b      	ldrb	r3, [r3, #2]
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	429a      	cmp	r2, r3
 8007322:	d008      	beq.n	8007336 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	885b      	ldrh	r3, [r3, #2]
 800732c:	b29a      	uxth	r2, r3
 800732e:	897b      	ldrh	r3, [r7, #10]
 8007330:	429a      	cmp	r2, r3
 8007332:	d8e5      	bhi.n	8007300 <USBD_GetEpDesc+0x32>
 8007334:	e000      	b.n	8007338 <USBD_GetEpDesc+0x6a>
          break;
 8007336:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007338:	693b      	ldr	r3, [r7, #16]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007342:	b480      	push	{r7}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	881a      	ldrh	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	4413      	add	r3, r2
 800735c:	b29a      	uxth	r2, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800736e:	68fb      	ldr	r3, [r7, #12]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	3301      	adds	r3, #1
 8007392:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800739a:	8a3b      	ldrh	r3, [r7, #16]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	b21a      	sxth	r2, r3
 80073a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b21b      	sxth	r3, r3
 80073a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073aa:	89fb      	ldrh	r3, [r7, #14]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d005      	beq.n	80073de <USBD_StdDevReq+0x26>
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d857      	bhi.n	8007486 <USBD_StdDevReq+0xce>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00f      	beq.n	80073fa <USBD_StdDevReq+0x42>
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d153      	bne.n	8007486 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	32ae      	adds	r2, #174	; 0xae
 80073e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]
      break;
 80073f8:	e04a      	b.n	8007490 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b09      	cmp	r3, #9
 8007400:	d83b      	bhi.n	800747a <USBD_StdDevReq+0xc2>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <USBD_StdDevReq+0x50>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800745d 	.word	0x0800745d
 800740c:	08007471 	.word	0x08007471
 8007410:	0800747b 	.word	0x0800747b
 8007414:	08007467 	.word	0x08007467
 8007418:	0800747b 	.word	0x0800747b
 800741c:	0800743b 	.word	0x0800743b
 8007420:	08007431 	.word	0x08007431
 8007424:	0800747b 	.word	0x0800747b
 8007428:	08007453 	.word	0x08007453
 800742c:	08007445 	.word	0x08007445
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fa3c 	bl	80078b0 <USBD_GetDescriptor>
          break;
 8007438:	e024      	b.n	8007484 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fbcb 	bl	8007bd8 <USBD_SetAddress>
          break;
 8007442:	e01f      	b.n	8007484 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fc0a 	bl	8007c60 <USBD_SetConfig>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
          break;
 8007450:	e018      	b.n	8007484 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fcad 	bl	8007db4 <USBD_GetConfig>
          break;
 800745a:	e013      	b.n	8007484 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fcde 	bl	8007e20 <USBD_GetStatus>
          break;
 8007464:	e00e      	b.n	8007484 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fd0d 	bl	8007e88 <USBD_SetFeature>
          break;
 800746e:	e009      	b.n	8007484 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fd31 	bl	8007eda <USBD_ClrFeature>
          break;
 8007478:	e004      	b.n	8007484 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fd88 	bl	8007f92 <USBD_CtlError>
          break;
 8007482:	bf00      	nop
      }
      break;
 8007484:	e004      	b.n	8007490 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fd82 	bl	8007f92 <USBD_CtlError>
      break;
 800748e:	bf00      	nop
  }

  return ret;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop

0800749c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d005      	beq.n	80074c2 <USBD_StdItfReq+0x26>
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d852      	bhi.n	8007560 <USBD_StdItfReq+0xc4>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <USBD_StdItfReq+0x26>
 80074be:	2b20      	cmp	r3, #32
 80074c0:	d14e      	bne.n	8007560 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d840      	bhi.n	8007552 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	889b      	ldrh	r3, [r3, #4]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d836      	bhi.n	8007548 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	889b      	ldrh	r3, [r3, #4]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fed9 	bl	800729a <USBD_CoreFindIF>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2bff      	cmp	r3, #255	; 0xff
 80074f0:	d01d      	beq.n	800752e <USBD_StdItfReq+0x92>
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d11a      	bne.n	800752e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80074f8:	7bba      	ldrb	r2, [r7, #14]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	32ae      	adds	r2, #174	; 0xae
 80074fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00f      	beq.n	8007528 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007508:	7bba      	ldrb	r2, [r7, #14]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007510:	7bba      	ldrb	r2, [r7, #14]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	32ae      	adds	r2, #174	; 0xae
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007526:	e004      	b.n	8007532 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007528:	2303      	movs	r3, #3
 800752a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800752c:	e001      	b.n	8007532 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800752e:	2303      	movs	r3, #3
 8007530:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	88db      	ldrh	r3, [r3, #6]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d110      	bne.n	800755c <USBD_StdItfReq+0xc0>
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10d      	bne.n	800755c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fdf1 	bl	8008128 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007546:	e009      	b.n	800755c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fd21 	bl	8007f92 <USBD_CtlError>
          break;
 8007550:	e004      	b.n	800755c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fd1c 	bl	8007f92 <USBD_CtlError>
          break;
 800755a:	e000      	b.n	800755e <USBD_StdItfReq+0xc2>
          break;
 800755c:	bf00      	nop
      }
      break;
 800755e:	e004      	b.n	800756a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fd15 	bl	8007f92 <USBD_CtlError>
      break;
 8007568:	bf00      	nop
  }

  return ret;
 800756a:	7bfb      	ldrb	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	889b      	ldrh	r3, [r3, #4]
 8007586:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	d007      	beq.n	80075a4 <USBD_StdEPReq+0x30>
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	f200 817f 	bhi.w	8007898 <USBD_StdEPReq+0x324>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02a      	beq.n	80075f4 <USBD_StdEPReq+0x80>
 800759e:	2b20      	cmp	r3, #32
 80075a0:	f040 817a 	bne.w	8007898 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff fe83 	bl	80072b4 <USBD_CoreFindEP>
 80075ae:	4603      	mov	r3, r0
 80075b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075b2:	7b7b      	ldrb	r3, [r7, #13]
 80075b4:	2bff      	cmp	r3, #255	; 0xff
 80075b6:	f000 8174 	beq.w	80078a2 <USBD_StdEPReq+0x32e>
 80075ba:	7b7b      	ldrb	r3, [r7, #13]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 8170 	bne.w	80078a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80075c2:	7b7a      	ldrb	r2, [r7, #13]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80075ca:	7b7a      	ldrb	r2, [r7, #13]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	32ae      	adds	r2, #174	; 0xae
 80075d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8163 	beq.w	80078a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80075dc:	7b7a      	ldrb	r2, [r7, #13]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	32ae      	adds	r2, #174	; 0xae
 80075e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
 80075ee:	4603      	mov	r3, r0
 80075f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075f2:	e156      	b.n	80078a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	785b      	ldrb	r3, [r3, #1]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d008      	beq.n	800760e <USBD_StdEPReq+0x9a>
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	f300 8145 	bgt.w	800788c <USBD_StdEPReq+0x318>
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 809b 	beq.w	800773e <USBD_StdEPReq+0x1ca>
 8007608:	2b01      	cmp	r3, #1
 800760a:	d03c      	beq.n	8007686 <USBD_StdEPReq+0x112>
 800760c:	e13e      	b.n	800788c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d002      	beq.n	8007620 <USBD_StdEPReq+0xac>
 800761a:	2b03      	cmp	r3, #3
 800761c:	d016      	beq.n	800764c <USBD_StdEPReq+0xd8>
 800761e:	e02c      	b.n	800767a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00d      	beq.n	8007642 <USBD_StdEPReq+0xce>
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d00a      	beq.n	8007642 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f97f 	bl	8008934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007636:	2180      	movs	r1, #128	; 0x80
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f97b 	bl	8008934 <USBD_LL_StallEP>
 800763e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007640:	e020      	b.n	8007684 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fca4 	bl	8007f92 <USBD_CtlError>
              break;
 800764a:	e01b      	b.n	8007684 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	885b      	ldrh	r3, [r3, #2]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10e      	bne.n	8007672 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00b      	beq.n	8007672 <USBD_StdEPReq+0xfe>
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d008      	beq.n	8007672 <USBD_StdEPReq+0xfe>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	88db      	ldrh	r3, [r3, #6]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f961 	bl	8008934 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fd58 	bl	8008128 <USBD_CtlSendStatus>

              break;
 8007678:	e004      	b.n	8007684 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc88 	bl	8007f92 <USBD_CtlError>
              break;
 8007682:	bf00      	nop
          }
          break;
 8007684:	e107      	b.n	8007896 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d002      	beq.n	8007698 <USBD_StdEPReq+0x124>
 8007692:	2b03      	cmp	r3, #3
 8007694:	d016      	beq.n	80076c4 <USBD_StdEPReq+0x150>
 8007696:	e04b      	b.n	8007730 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <USBD_StdEPReq+0x146>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b80      	cmp	r3, #128	; 0x80
 80076a2:	d00a      	beq.n	80076ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f943 	bl	8008934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f93f 	bl	8008934 <USBD_LL_StallEP>
 80076b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076b8:	e040      	b.n	800773c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fc68 	bl	8007f92 <USBD_CtlError>
              break;
 80076c2:	e03b      	b.n	800773c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	885b      	ldrh	r3, [r3, #2]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d136      	bne.n	800773a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 f960 	bl	80089a0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fd21 	bl	8008128 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff fde2 	bl	80072b4 <USBD_CoreFindEP>
 80076f0:	4603      	mov	r3, r0
 80076f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076f4:	7b7b      	ldrb	r3, [r7, #13]
 80076f6:	2bff      	cmp	r3, #255	; 0xff
 80076f8:	d01f      	beq.n	800773a <USBD_StdEPReq+0x1c6>
 80076fa:	7b7b      	ldrb	r3, [r7, #13]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d11c      	bne.n	800773a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007700:	7b7a      	ldrb	r2, [r7, #13]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007708:	7b7a      	ldrb	r2, [r7, #13]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	32ae      	adds	r2, #174	; 0xae
 800770e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d010      	beq.n	800773a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007718:	7b7a      	ldrb	r2, [r7, #13]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	32ae      	adds	r2, #174	; 0xae
 800771e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800772e:	e004      	b.n	800773a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fc2d 	bl	8007f92 <USBD_CtlError>
              break;
 8007738:	e000      	b.n	800773c <USBD_StdEPReq+0x1c8>
              break;
 800773a:	bf00      	nop
          }
          break;
 800773c:	e0ab      	b.n	8007896 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d002      	beq.n	8007750 <USBD_StdEPReq+0x1dc>
 800774a:	2b03      	cmp	r3, #3
 800774c:	d032      	beq.n	80077b4 <USBD_StdEPReq+0x240>
 800774e:	e097      	b.n	8007880 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <USBD_StdEPReq+0x1f2>
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b80      	cmp	r3, #128	; 0x80
 800775a:	d004      	beq.n	8007766 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc17 	bl	8007f92 <USBD_CtlError>
                break;
 8007764:	e091      	b.n	800788a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800776a:	2b00      	cmp	r3, #0
 800776c:	da0b      	bge.n	8007786 <USBD_StdEPReq+0x212>
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	3310      	adds	r3, #16
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	3304      	adds	r3, #4
 8007784:	e00b      	b.n	800779e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	4413      	add	r3, r2
 800779c:	3304      	adds	r3, #4
 800779e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2202      	movs	r2, #2
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fc61 	bl	8008074 <USBD_CtlSendData>
              break;
 80077b2:	e06a      	b.n	800788a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da11      	bge.n	80077e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	f003 020f 	and.w	r2, r3, #15
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	3324      	adds	r3, #36	; 0x24
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d117      	bne.n	8007806 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fbda 	bl	8007f92 <USBD_CtlError>
                  break;
 80077de:	e054      	b.n	800788a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	f003 020f 	and.w	r2, r3, #15
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d104      	bne.n	8007806 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fbc7 	bl	8007f92 <USBD_CtlError>
                  break;
 8007804:	e041      	b.n	800788a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800780a:	2b00      	cmp	r3, #0
 800780c:	da0b      	bge.n	8007826 <USBD_StdEPReq+0x2b2>
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	3310      	adds	r3, #16
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	3304      	adds	r3, #4
 8007824:	e00b      	b.n	800783e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	3304      	adds	r3, #4
 800783e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <USBD_StdEPReq+0x2d8>
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d103      	bne.n	8007854 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e00e      	b.n	8007872 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f8d7 	bl	8008a0c <USBD_LL_IsStallEP>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2201      	movs	r2, #1
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e002      	b.n	8007872 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2202      	movs	r2, #2
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fbfb 	bl	8008074 <USBD_CtlSendData>
              break;
 800787e:	e004      	b.n	800788a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb85 	bl	8007f92 <USBD_CtlError>
              break;
 8007888:	bf00      	nop
          }
          break;
 800788a:	e004      	b.n	8007896 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fb7f 	bl	8007f92 <USBD_CtlError>
          break;
 8007894:	bf00      	nop
      }
      break;
 8007896:	e005      	b.n	80078a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fb79 	bl	8007f92 <USBD_CtlError>
      break;
 80078a0:	e000      	b.n	80078a4 <USBD_StdEPReq+0x330>
      break;
 80078a2:	bf00      	nop
  }

  return ret;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	2b0e      	cmp	r3, #14
 80078d2:	f200 8152 	bhi.w	8007b7a <USBD_GetDescriptor+0x2ca>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <USBD_GetDescriptor+0x2c>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	0800794d 	.word	0x0800794d
 80078e0:	08007965 	.word	0x08007965
 80078e4:	080079a5 	.word	0x080079a5
 80078e8:	08007b7b 	.word	0x08007b7b
 80078ec:	08007b7b 	.word	0x08007b7b
 80078f0:	08007b1b 	.word	0x08007b1b
 80078f4:	08007b47 	.word	0x08007b47
 80078f8:	08007b7b 	.word	0x08007b7b
 80078fc:	08007b7b 	.word	0x08007b7b
 8007900:	08007b7b 	.word	0x08007b7b
 8007904:	08007b7b 	.word	0x08007b7b
 8007908:	08007b7b 	.word	0x08007b7b
 800790c:	08007b7b 	.word	0x08007b7b
 8007910:	08007b7b 	.word	0x08007b7b
 8007914:	08007919 	.word	0x08007919
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00b      	beq.n	800793c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	7c12      	ldrb	r2, [r2, #16]
 8007930:	f107 0108 	add.w	r1, r7, #8
 8007934:	4610      	mov	r0, r2
 8007936:	4798      	blx	r3
 8007938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800793a:	e126      	b.n	8007b8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fb27 	bl	8007f92 <USBD_CtlError>
        err++;
 8007944:	7afb      	ldrb	r3, [r7, #11]
 8007946:	3301      	adds	r3, #1
 8007948:	72fb      	strb	r3, [r7, #11]
      break;
 800794a:	e11e      	b.n	8007b8a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
      break;
 8007962:	e112      	b.n	8007b8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7c1b      	ldrb	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10d      	bne.n	8007988 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f107 0208 	add.w	r2, r7, #8
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
 800797c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	2202      	movs	r2, #2
 8007984:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007986:	e100      	b.n	8007b8a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	f107 0208 	add.w	r2, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	2202      	movs	r2, #2
 80079a0:	701a      	strb	r2, [r3, #0]
      break;
 80079a2:	e0f2      	b.n	8007b8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	885b      	ldrh	r3, [r3, #2]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	f200 80ac 	bhi.w	8007b08 <USBD_GetDescriptor+0x258>
 80079b0:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <USBD_GetDescriptor+0x108>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	080079d1 	.word	0x080079d1
 80079bc:	08007a05 	.word	0x08007a05
 80079c0:	08007a39 	.word	0x08007a39
 80079c4:	08007a6d 	.word	0x08007a6d
 80079c8:	08007aa1 	.word	0x08007aa1
 80079cc:	08007ad5 	.word	0x08007ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	7c12      	ldrb	r2, [r2, #16]
 80079e8:	f107 0108 	add.w	r1, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f2:	e091      	b.n	8007b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 facb 	bl	8007f92 <USBD_CtlError>
            err++;
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	3301      	adds	r3, #1
 8007a00:	72fb      	strb	r3, [r7, #11]
          break;
 8007a02:	e089      	b.n	8007b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7c12      	ldrb	r2, [r2, #16]
 8007a1c:	f107 0108 	add.w	r1, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a26:	e077      	b.n	8007b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fab1 	bl	8007f92 <USBD_CtlError>
            err++;
 8007a30:	7afb      	ldrb	r3, [r7, #11]
 8007a32:	3301      	adds	r3, #1
 8007a34:	72fb      	strb	r3, [r7, #11]
          break;
 8007a36:	e06f      	b.n	8007b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	7c12      	ldrb	r2, [r2, #16]
 8007a50:	f107 0108 	add.w	r1, r7, #8
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
 8007a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a5a:	e05d      	b.n	8007b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa97 	bl	8007f92 <USBD_CtlError>
            err++;
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	3301      	adds	r3, #1
 8007a68:	72fb      	strb	r3, [r7, #11]
          break;
 8007a6a:	e055      	b.n	8007b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	7c12      	ldrb	r2, [r2, #16]
 8007a84:	f107 0108 	add.w	r1, r7, #8
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8e:	e043      	b.n	8007b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa7d 	bl	8007f92 <USBD_CtlError>
            err++;
 8007a98:	7afb      	ldrb	r3, [r7, #11]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a9e:	e03b      	b.n	8007b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	7c12      	ldrb	r2, [r2, #16]
 8007ab8:	f107 0108 	add.w	r1, r7, #8
 8007abc:	4610      	mov	r0, r2
 8007abe:	4798      	blx	r3
 8007ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ac2:	e029      	b.n	8007b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa63 	bl	8007f92 <USBD_CtlError>
            err++;
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ad2:	e021      	b.n	8007b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7c12      	ldrb	r2, [r2, #16]
 8007aec:	f107 0108 	add.w	r1, r7, #8
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af6:	e00f      	b.n	8007b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa49 	bl	8007f92 <USBD_CtlError>
            err++;
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	3301      	adds	r3, #1
 8007b04:	72fb      	strb	r3, [r7, #11]
          break;
 8007b06:	e007      	b.n	8007b18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa41 	bl	8007f92 <USBD_CtlError>
          err++;
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	3301      	adds	r3, #1
 8007b14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b16:	bf00      	nop
      }
      break;
 8007b18:	e037      	b.n	8007b8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	7c1b      	ldrb	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2a:	f107 0208 	add.w	r2, r7, #8
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4798      	blx	r3
 8007b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b34:	e029      	b.n	8007b8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fa2a 	bl	8007f92 <USBD_CtlError>
        err++;
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	3301      	adds	r3, #1
 8007b42:	72fb      	strb	r3, [r7, #11]
      break;
 8007b44:	e021      	b.n	8007b8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7c1b      	ldrb	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10d      	bne.n	8007b6a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	f107 0208 	add.w	r2, r7, #8
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4798      	blx	r3
 8007b5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3301      	adds	r3, #1
 8007b64:	2207      	movs	r2, #7
 8007b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b68:	e00f      	b.n	8007b8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa10 	bl	8007f92 <USBD_CtlError>
        err++;
 8007b72:	7afb      	ldrb	r3, [r7, #11]
 8007b74:	3301      	adds	r3, #1
 8007b76:	72fb      	strb	r3, [r7, #11]
      break;
 8007b78:	e007      	b.n	8007b8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fa08 	bl	8007f92 <USBD_CtlError>
      err++;
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	3301      	adds	r3, #1
 8007b86:	72fb      	strb	r3, [r7, #11]
      break;
 8007b88:	bf00      	nop
  }

  if (err != 0U)
 8007b8a:	7afb      	ldrb	r3, [r7, #11]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11e      	bne.n	8007bce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	88db      	ldrh	r3, [r3, #6]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d016      	beq.n	8007bc6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007b98:	893b      	ldrh	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00e      	beq.n	8007bbc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	88da      	ldrh	r2, [r3, #6]
 8007ba2:	893b      	ldrh	r3, [r7, #8]
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	bf28      	it	cs
 8007ba8:	4613      	movcs	r3, r2
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bae:	893b      	ldrh	r3, [r7, #8]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fa5d 	bl	8008074 <USBD_CtlSendData>
 8007bba:	e009      	b.n	8007bd0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f9e7 	bl	8007f92 <USBD_CtlError>
 8007bc4:	e004      	b.n	8007bd0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 faae 	bl	8008128 <USBD_CtlSendStatus>
 8007bcc:	e000      	b.n	8007bd0 <USBD_GetDescriptor+0x320>
    return;
 8007bce:	bf00      	nop
  }
}
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop

08007bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	889b      	ldrh	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d131      	bne.n	8007c4e <USBD_SetAddress+0x76>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	88db      	ldrh	r3, [r3, #6]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d12d      	bne.n	8007c4e <USBD_SetAddress+0x76>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	885b      	ldrh	r3, [r3, #2]
 8007bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8007bf8:	d829      	bhi.n	8007c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d104      	bne.n	8007c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f9bc 	bl	8007f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1a:	e01d      	b.n	8007c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7bfa      	ldrb	r2, [r7, #15]
 8007c20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 ff1d 	bl	8008a68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa7a 	bl	8008128 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c42:	e009      	b.n	8007c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4c:	e004      	b.n	8007c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f99e 	bl	8007f92 <USBD_CtlError>
  }
}
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	885b      	ldrh	r3, [r3, #2]
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	4b4e      	ldr	r3, [pc, #312]	; (8007db0 <USBD_SetConfig+0x150>)
 8007c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c78:	4b4d      	ldr	r3, [pc, #308]	; (8007db0 <USBD_SetConfig+0x150>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d905      	bls.n	8007c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f985 	bl	8007f92 <USBD_CtlError>
    return USBD_FAIL;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e08c      	b.n	8007da6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d002      	beq.n	8007c9e <USBD_SetConfig+0x3e>
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d029      	beq.n	8007cf0 <USBD_SetConfig+0x90>
 8007c9c:	e075      	b.n	8007d8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c9e:	4b44      	ldr	r3, [pc, #272]	; (8007db0 <USBD_SetConfig+0x150>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d020      	beq.n	8007ce8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ca6:	4b42      	ldr	r3, [pc, #264]	; (8007db0 <USBD_SetConfig+0x150>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cb0:	4b3f      	ldr	r3, [pc, #252]	; (8007db0 <USBD_SetConfig+0x150>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff f849 	bl	8006d4e <USBD_SetClassConfig>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d008      	beq.n	8007cd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f962 	bl	8007f92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cd6:	e065      	b.n	8007da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa25 	bl	8008128 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ce6:	e05d      	b.n	8007da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa1d 	bl	8008128 <USBD_CtlSendStatus>
      break;
 8007cee:	e059      	b.n	8007da4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cf0:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <USBD_SetConfig+0x150>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d112      	bne.n	8007d1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d00:	4b2b      	ldr	r3, [pc, #172]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d0a:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff f838 	bl	8006d86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa06 	bl	8008128 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d1c:	e042      	b.n	8007da4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d1e:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d02a      	beq.n	8007d82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff f826 	bl	8006d86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d3a:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d44:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fe ffff 	bl	8006d4e <USBD_SetClassConfig>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00f      	beq.n	8007d7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f918 	bl	8007f92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff f80b 	bl	8006d86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d78:	e014      	b.n	8007da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9d4 	bl	8008128 <USBD_CtlSendStatus>
      break;
 8007d80:	e010      	b.n	8007da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9d0 	bl	8008128 <USBD_CtlSendStatus>
      break;
 8007d88:	e00c      	b.n	8007da4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f900 	bl	8007f92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fe fff4 	bl	8006d86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	73fb      	strb	r3, [r7, #15]
      break;
 8007da2:	bf00      	nop
  }

  return ret;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	2000019c 	.word	0x2000019c

08007db4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d004      	beq.n	8007dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f8e2 	bl	8007f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dce:	e023      	b.n	8007e18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	dc02      	bgt.n	8007de2 <USBD_GetConfig+0x2e>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dc03      	bgt.n	8007de8 <USBD_GetConfig+0x34>
 8007de0:	e015      	b.n	8007e0e <USBD_GetConfig+0x5a>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d00b      	beq.n	8007dfe <USBD_GetConfig+0x4a>
 8007de6:	e012      	b.n	8007e0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3308      	adds	r3, #8
 8007df2:	2201      	movs	r2, #1
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f93c 	bl	8008074 <USBD_CtlSendData>
        break;
 8007dfc:	e00c      	b.n	8007e18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	2201      	movs	r2, #1
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f934 	bl	8008074 <USBD_CtlSendData>
        break;
 8007e0c:	e004      	b.n	8007e18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f8be 	bl	8007f92 <USBD_CtlError>
        break;
 8007e16:	bf00      	nop
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d81e      	bhi.n	8007e76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	88db      	ldrh	r3, [r3, #6]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d004      	beq.n	8007e4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f8a5 	bl	8007f92 <USBD_CtlError>
        break;
 8007e48:	e01a      	b.n	8007e80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f043 0202 	orr.w	r2, r3, #2
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f900 	bl	8008074 <USBD_CtlSendData>
      break;
 8007e74:	e004      	b.n	8007e80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f88a 	bl	8007f92 <USBD_CtlError>
      break;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	885b      	ldrh	r3, [r3, #2]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d107      	bne.n	8007eaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f940 	bl	8008128 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ea8:	e013      	b.n	8007ed2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	885b      	ldrh	r3, [r3, #2]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d10b      	bne.n	8007eca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	889b      	ldrh	r3, [r3, #4]
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f930 	bl	8008128 <USBD_CtlSendStatus>
}
 8007ec8:	e003      	b.n	8007ed2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f860 	bl	8007f92 <USBD_CtlError>
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d80b      	bhi.n	8007f0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	885b      	ldrh	r3, [r3, #2]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d10c      	bne.n	8007f14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f910 	bl	8008128 <USBD_CtlSendStatus>
      }
      break;
 8007f08:	e004      	b.n	8007f14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f840 	bl	8007f92 <USBD_CtlError>
      break;
 8007f12:	e000      	b.n	8007f16 <USBD_ClrFeature+0x3c>
      break;
 8007f14:	bf00      	nop
  }
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fa17 	bl	800737c <SWAPBYTE>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	461a      	mov	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff fa0a 	bl	800737c <SWAPBYTE>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7ff f9fd 	bl	800737c <SWAPBYTE>
 8007f82:	4603      	mov	r3, r0
 8007f84:	461a      	mov	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	80da      	strh	r2, [r3, #6]
}
 8007f8a:	bf00      	nop
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fcc8 	bl	8008934 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fcc4 	bl	8008934 <USBD_LL_StallEP>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d036      	beq.n	8008038 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fce:	6938      	ldr	r0, [r7, #16]
 8007fd0:	f000 f836 	bl	8008040 <USBD_GetLen>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	3301      	adds	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008004:	e013      	b.n	800802e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	4413      	add	r3, r2
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	3301      	adds	r3, #1
 8008016:	613b      	str	r3, [r7, #16]
    idx++;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	3301      	adds	r3, #1
 800801c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	4413      	add	r3, r2
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
    idx++;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	3301      	adds	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e7      	bne.n	8008006 <USBD_GetString+0x52>
 8008036:	e000      	b.n	800803a <USBD_GetString+0x86>
    return;
 8008038:	bf00      	nop
  }
}
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008050:	e005      	b.n	800805e <USBD_GetLen+0x1e>
  {
    len++;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	3301      	adds	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	3301      	adds	r3, #1
 800805c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f5      	bne.n	8008052 <USBD_GetLen+0x12>
  }

  return len;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2202      	movs	r2, #2
 8008084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	2100      	movs	r1, #0
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fd1a 	bl	8008ad4 <USBD_LL_Transmit>

  return USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	2100      	movs	r1, #0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fd09 	bl	8008ad4 <USBD_LL_Transmit>

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2203      	movs	r2, #3
 80080dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fd24 	bl	8008b44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	2100      	movs	r1, #0
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fd13 	bl	8008b44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2204      	movs	r2, #4
 8008134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fcc8 	bl	8008ad4 <USBD_LL_Transmit>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2205      	movs	r2, #5
 800815a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	2100      	movs	r1, #0
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fced 	bl	8008b44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008178:	2200      	movs	r2, #0
 800817a:	4912      	ldr	r1, [pc, #72]	; (80081c4 <MX_USB_DEVICE_Init+0x50>)
 800817c:	4812      	ldr	r0, [pc, #72]	; (80081c8 <MX_USB_DEVICE_Init+0x54>)
 800817e:	f7fe fd69 	bl	8006c54 <USBD_Init>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008188:	f7f8 f921 	bl	80003ce <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800818c:	490f      	ldr	r1, [pc, #60]	; (80081cc <MX_USB_DEVICE_Init+0x58>)
 800818e:	480e      	ldr	r0, [pc, #56]	; (80081c8 <MX_USB_DEVICE_Init+0x54>)
 8008190:	f7fe fd90 	bl	8006cb4 <USBD_RegisterClass>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800819a:	f7f8 f918 	bl	80003ce <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800819e:	490c      	ldr	r1, [pc, #48]	; (80081d0 <MX_USB_DEVICE_Init+0x5c>)
 80081a0:	4809      	ldr	r0, [pc, #36]	; (80081c8 <MX_USB_DEVICE_Init+0x54>)
 80081a2:	f7fe fcc7 	bl	8006b34 <USBD_CDC_RegisterInterface>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081ac:	f7f8 f90f 	bl	80003ce <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081b0:	4805      	ldr	r0, [pc, #20]	; (80081c8 <MX_USB_DEVICE_Init+0x54>)
 80081b2:	f7fe fdb5 	bl	8006d20 <USBD_Start>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081bc:	f7f8 f907 	bl	80003ce <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081c0:	bf00      	nop
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	200000bc 	.word	0x200000bc
 80081c8:	200001a0 	.word	0x200001a0
 80081cc:	20000028 	.word	0x20000028
 80081d0:	200000a8 	.word	0x200000a8

080081d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081d8:	2200      	movs	r2, #0
 80081da:	4905      	ldr	r1, [pc, #20]	; (80081f0 <CDC_Init_FS+0x1c>)
 80081dc:	4805      	ldr	r0, [pc, #20]	; (80081f4 <CDC_Init_FS+0x20>)
 80081de:	f7fe fcc3 	bl	8006b68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081e2:	4905      	ldr	r1, [pc, #20]	; (80081f8 <CDC_Init_FS+0x24>)
 80081e4:	4803      	ldr	r0, [pc, #12]	; (80081f4 <CDC_Init_FS+0x20>)
 80081e6:	f7fe fce1 	bl	8006bac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	2000087c 	.word	0x2000087c
 80081f4:	200001a0 	.word	0x200001a0
 80081f8:	2000047c 	.word	0x2000047c

080081fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008200:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008202:	4618      	mov	r0, r3
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
 8008218:	4613      	mov	r3, r2
 800821a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	2b23      	cmp	r3, #35	; 0x23
 8008220:	d84a      	bhi.n	80082b8 <CDC_Control_FS+0xac>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <CDC_Control_FS+0x1c>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	080082b9 	.word	0x080082b9
 800822c:	080082b9 	.word	0x080082b9
 8008230:	080082b9 	.word	0x080082b9
 8008234:	080082b9 	.word	0x080082b9
 8008238:	080082b9 	.word	0x080082b9
 800823c:	080082b9 	.word	0x080082b9
 8008240:	080082b9 	.word	0x080082b9
 8008244:	080082b9 	.word	0x080082b9
 8008248:	080082b9 	.word	0x080082b9
 800824c:	080082b9 	.word	0x080082b9
 8008250:	080082b9 	.word	0x080082b9
 8008254:	080082b9 	.word	0x080082b9
 8008258:	080082b9 	.word	0x080082b9
 800825c:	080082b9 	.word	0x080082b9
 8008260:	080082b9 	.word	0x080082b9
 8008264:	080082b9 	.word	0x080082b9
 8008268:	080082b9 	.word	0x080082b9
 800826c:	080082b9 	.word	0x080082b9
 8008270:	080082b9 	.word	0x080082b9
 8008274:	080082b9 	.word	0x080082b9
 8008278:	080082b9 	.word	0x080082b9
 800827c:	080082b9 	.word	0x080082b9
 8008280:	080082b9 	.word	0x080082b9
 8008284:	080082b9 	.word	0x080082b9
 8008288:	080082b9 	.word	0x080082b9
 800828c:	080082b9 	.word	0x080082b9
 8008290:	080082b9 	.word	0x080082b9
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082b9 	.word	0x080082b9
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	080082b9 	.word	0x080082b9
 80082a4:	080082b9 	.word	0x080082b9
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082b9 	.word	0x080082b9
 80082b0:	080082b9 	.word	0x080082b9
 80082b4:	080082b9 	.word	0x080082b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082b8:	bf00      	nop
  }

  return (USBD_OK);
 80082ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	4805      	ldr	r0, [pc, #20]	; (80082ec <CDC_Receive_FS+0x24>)
 80082d6:	f7fe fc69 	bl	8006bac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082da:	4804      	ldr	r0, [pc, #16]	; (80082ec <CDC_Receive_FS+0x24>)
 80082dc:	f7fe fc84 	bl	8006be8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	200001a0 	.word	0x200001a0

080082f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4613      	mov	r3, r2
 80082fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008302:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008306:	4618      	mov	r0, r3
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	6039      	str	r1, [r7, #0]
 800831e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2212      	movs	r2, #18
 8008324:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008326:	4b03      	ldr	r3, [pc, #12]	; (8008334 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	200000dc 	.word	0x200000dc

08008338 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2204      	movs	r2, #4
 8008348:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800834a:	4b03      	ldr	r3, [pc, #12]	; (8008358 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	200000fc 	.word	0x200000fc

0800835c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d105      	bne.n	800837a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	4907      	ldr	r1, [pc, #28]	; (8008390 <USBD_FS_ProductStrDescriptor+0x34>)
 8008372:	4808      	ldr	r0, [pc, #32]	; (8008394 <USBD_FS_ProductStrDescriptor+0x38>)
 8008374:	f7ff fe1e 	bl	8007fb4 <USBD_GetString>
 8008378:	e004      	b.n	8008384 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4904      	ldr	r1, [pc, #16]	; (8008390 <USBD_FS_ProductStrDescriptor+0x34>)
 800837e:	4805      	ldr	r0, [pc, #20]	; (8008394 <USBD_FS_ProductStrDescriptor+0x38>)
 8008380:	f7ff fe18 	bl	8007fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008384:	4b02      	ldr	r3, [pc, #8]	; (8008390 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000c7c 	.word	0x20000c7c
 8008394:	08009b2c 	.word	0x08009b2c

08008398 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	6039      	str	r1, [r7, #0]
 80083a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	4904      	ldr	r1, [pc, #16]	; (80083b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083a8:	4804      	ldr	r0, [pc, #16]	; (80083bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083aa:	f7ff fe03 	bl	8007fb4 <USBD_GetString>
  return USBD_StrDesc;
 80083ae:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000c7c 	.word	0x20000c7c
 80083bc:	08009b44 	.word	0x08009b44

080083c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	221a      	movs	r2, #26
 80083d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083d2:	f000 f855 	bl	8008480 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083d6:	4b02      	ldr	r3, [pc, #8]	; (80083e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000100 	.word	0x20000100

080083e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4907      	ldr	r1, [pc, #28]	; (8008418 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083fa:	4808      	ldr	r0, [pc, #32]	; (800841c <USBD_FS_ConfigStrDescriptor+0x38>)
 80083fc:	f7ff fdda 	bl	8007fb4 <USBD_GetString>
 8008400:	e004      	b.n	800840c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4904      	ldr	r1, [pc, #16]	; (8008418 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008406:	4805      	ldr	r0, [pc, #20]	; (800841c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008408:	f7ff fdd4 	bl	8007fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800840c:	4b02      	ldr	r3, [pc, #8]	; (8008418 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000c7c 	.word	0x20000c7c
 800841c:	08009b58 	.word	0x08009b58

08008420 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d105      	bne.n	800843e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4907      	ldr	r1, [pc, #28]	; (8008454 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008436:	4808      	ldr	r0, [pc, #32]	; (8008458 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008438:	f7ff fdbc 	bl	8007fb4 <USBD_GetString>
 800843c:	e004      	b.n	8008448 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	4904      	ldr	r1, [pc, #16]	; (8008454 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008442:	4805      	ldr	r0, [pc, #20]	; (8008458 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008444:	f7ff fdb6 	bl	8007fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000c7c 	.word	0x20000c7c
 8008458:	08009b64 	.word	0x08009b64

0800845c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	6039      	str	r1, [r7, #0]
 8008466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	220c      	movs	r2, #12
 800846c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800846e:	4b03      	ldr	r3, [pc, #12]	; (800847c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	200000f0 	.word	0x200000f0

08008480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4413      	add	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008494:	2208      	movs	r2, #8
 8008496:	4906      	ldr	r1, [pc, #24]	; (80084b0 <Get_SerialNum+0x30>)
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f80d 	bl	80084b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800849e:	2204      	movs	r2, #4
 80084a0:	4904      	ldr	r1, [pc, #16]	; (80084b4 <Get_SerialNum+0x34>)
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f808 	bl	80084b8 <IntToUnicode>
  }
}
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000102 	.word	0x20000102
 80084b4:	20000112 	.word	0x20000112

080084b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084ca:	2300      	movs	r3, #0
 80084cc:	75fb      	strb	r3, [r7, #23]
 80084ce:	e027      	b.n	8008520 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	0f1b      	lsrs	r3, r3, #28
 80084d4:	2b09      	cmp	r3, #9
 80084d6:	d80b      	bhi.n	80084f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	0f1b      	lsrs	r3, r3, #28
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	4619      	mov	r1, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	440b      	add	r3, r1
 80084e8:	3230      	adds	r2, #48	; 0x30
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	e00a      	b.n	8008506 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	0f1b      	lsrs	r3, r3, #28
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	4619      	mov	r1, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	440b      	add	r3, r1
 8008500:	3237      	adds	r2, #55	; 0x37
 8008502:	b2d2      	uxtb	r2, r2
 8008504:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	011b      	lsls	r3, r3, #4
 800850a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	3301      	adds	r3, #1
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	4413      	add	r3, r2
 8008516:	2200      	movs	r2, #0
 8008518:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	3301      	adds	r3, #1
 800851e:	75fb      	strb	r3, [r7, #23]
 8008520:	7dfa      	ldrb	r2, [r7, #23]
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	429a      	cmp	r2, r3
 8008526:	d3d3      	bcc.n	80084d0 <IntToUnicode+0x18>
  }
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b098      	sub	sp, #96	; 0x60
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008540:	f107 030c 	add.w	r3, r7, #12
 8008544:	2254      	movs	r2, #84	; 0x54
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fcbe 	bl	8008eca <memset>
  if(pcdHandle->Instance==USB)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a1d      	ldr	r2, [pc, #116]	; (80085c8 <HAL_PCD_MspInit+0x90>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d132      	bne.n	80085be <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800855c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800855e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008562:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008564:	2301      	movs	r3, #1
 8008566:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008568:	2301      	movs	r3, #1
 800856a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800856c:	2318      	movs	r3, #24
 800856e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008570:	2307      	movs	r3, #7
 8008572:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008574:	2302      	movs	r3, #2
 8008576:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008578:	2302      	movs	r3, #2
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800857c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008580:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008582:	f107 030c 	add.w	r3, r7, #12
 8008586:	4618      	mov	r0, r3
 8008588:	f7fb f82e 	bl	80035e8 <HAL_RCCEx_PeriphCLKConfig>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 8008592:	f7f7 ff1c 	bl	80003ce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <HAL_PCD_MspInit+0x94>)
 8008598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859a:	4a0c      	ldr	r2, [pc, #48]	; (80085cc <HAL_PCD_MspInit+0x94>)
 800859c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085a0:	6593      	str	r3, [r2, #88]	; 0x58
 80085a2:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <HAL_PCD_MspInit+0x94>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80085ae:	2200      	movs	r2, #0
 80085b0:	2100      	movs	r1, #0
 80085b2:	2043      	movs	r0, #67	; 0x43
 80085b4:	f7f8 fa53 	bl	8000a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80085b8:	2043      	movs	r0, #67	; 0x43
 80085ba:	f7f8 fa6c 	bl	8000a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80085be:	bf00      	nop
 80085c0:	3760      	adds	r7, #96	; 0x60
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40006800 	.word	0x40006800
 80085cc:	40021000 	.word	0x40021000

080085d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80085e4:	4619      	mov	r1, r3
 80085e6:	4610      	mov	r0, r2
 80085e8:	f7fe fbe7 	bl	8006dba <USBD_LL_SetupStage>
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8008606:	78fa      	ldrb	r2, [r7, #3]
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	440b      	add	r3, r1
 8008614:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	4619      	mov	r1, r3
 800861e:	f7fe fc21 	bl	8006e64 <USBD_LL_DataOutStage>
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800863c:	78fa      	ldrb	r2, [r7, #3]
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	440b      	add	r3, r1
 800864a:	333c      	adds	r3, #60	; 0x3c
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	4619      	mov	r1, r3
 8008652:	f7fe fcba 	bl	8006fca <USBD_LL_DataInStage>
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe fdf4 	bl	800725a <USBD_LL_SOF>
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008682:	2301      	movs	r3, #1
 8008684:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d001      	beq.n	8008692 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800868e:	f7f7 fe9e 	bl	80003ce <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008698:	7bfa      	ldrb	r2, [r7, #15]
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f7fe fd98 	bl	80071d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe fd40 	bl	800712e <USBD_LL_Reset>
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fe fd93 	bl	80071f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d005      	beq.n	80086e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086d4:	4b04      	ldr	r3, [pc, #16]	; (80086e8 <HAL_PCD_SuspendCallback+0x30>)
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	4a03      	ldr	r2, [pc, #12]	; (80086e8 <HAL_PCD_SuspendCallback+0x30>)
 80086da:	f043 0306 	orr.w	r3, r3, #6
 80086de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	e000ed00 	.word	0xe000ed00

080086ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d007      	beq.n	800870c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086fc:	4b08      	ldr	r3, [pc, #32]	; (8008720 <HAL_PCD_ResumeCallback+0x34>)
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	4a07      	ldr	r2, [pc, #28]	; (8008720 <HAL_PCD_ResumeCallback+0x34>)
 8008702:	f023 0306 	bic.w	r3, r3, #6
 8008706:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008708:	f000 fab6 	bl	8008c78 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fd89 	bl	800722a <USBD_LL_Resume>
}
 8008718:	bf00      	nop
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	e000ed00 	.word	0xe000ed00

08008724 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800872c:	f7fa f94c 	bl	80029c8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008730:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <USBD_LL_Init+0xbc>)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a29      	ldr	r2, [pc, #164]	; (80087e0 <USBD_LL_Init+0xbc>)
 800873c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8008740:	4b27      	ldr	r3, [pc, #156]	; (80087e0 <USBD_LL_Init+0xbc>)
 8008742:	4a28      	ldr	r2, [pc, #160]	; (80087e4 <USBD_LL_Init+0xc0>)
 8008744:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008746:	4b26      	ldr	r3, [pc, #152]	; (80087e0 <USBD_LL_Init+0xbc>)
 8008748:	2208      	movs	r2, #8
 800874a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800874c:	4b24      	ldr	r3, [pc, #144]	; (80087e0 <USBD_LL_Init+0xbc>)
 800874e:	2202      	movs	r2, #2
 8008750:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008752:	4b23      	ldr	r3, [pc, #140]	; (80087e0 <USBD_LL_Init+0xbc>)
 8008754:	2202      	movs	r2, #2
 8008756:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008758:	4b21      	ldr	r3, [pc, #132]	; (80087e0 <USBD_LL_Init+0xbc>)
 800875a:	2200      	movs	r2, #0
 800875c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800875e:	4b20      	ldr	r3, [pc, #128]	; (80087e0 <USBD_LL_Init+0xbc>)
 8008760:	2200      	movs	r2, #0
 8008762:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008764:	4b1e      	ldr	r3, [pc, #120]	; (80087e0 <USBD_LL_Init+0xbc>)
 8008766:	2200      	movs	r2, #0
 8008768:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800876a:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <USBD_LL_Init+0xbc>)
 800876c:	2200      	movs	r2, #0
 800876e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008770:	481b      	ldr	r0, [pc, #108]	; (80087e0 <USBD_LL_Init+0xbc>)
 8008772:	f7f8 fb47 	bl	8000e04 <HAL_PCD_Init>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800877c:	f7f7 fe27 	bl	80003ce <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008786:	2318      	movs	r3, #24
 8008788:	2200      	movs	r2, #0
 800878a:	2100      	movs	r1, #0
 800878c:	f7fa f84b 	bl	8002826 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008796:	2358      	movs	r3, #88	; 0x58
 8008798:	2200      	movs	r2, #0
 800879a:	2180      	movs	r1, #128	; 0x80
 800879c:	f7fa f843 	bl	8002826 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087a6:	23c0      	movs	r3, #192	; 0xc0
 80087a8:	2200      	movs	r2, #0
 80087aa:	2181      	movs	r1, #129	; 0x81
 80087ac:	f7fa f83b 	bl	8002826 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087ba:	2200      	movs	r2, #0
 80087bc:	2101      	movs	r1, #1
 80087be:	f7fa f832 	bl	8002826 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087cc:	2200      	movs	r2, #0
 80087ce:	2182      	movs	r1, #130	; 0x82
 80087d0:	f7fa f829 	bl	8002826 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000e7c 	.word	0x20000e7c
 80087e4:	40006800 	.word	0x40006800

080087e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087fe:	4618      	mov	r0, r3
 8008800:	f7f8 fc06 	bl	8001010 <HAL_PCD_Start>
 8008804:	4603      	mov	r3, r0
 8008806:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	2b03      	cmp	r3, #3
 800880c:	d816      	bhi.n	800883c <USBD_LL_Start+0x54>
 800880e:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <USBD_LL_Start+0x2c>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	08008825 	.word	0x08008825
 8008818:	0800882b 	.word	0x0800882b
 800881c:	08008831 	.word	0x08008831
 8008820:	08008837 	.word	0x08008837
    case HAL_OK :
      usb_status = USBD_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
    break;
 8008828:	e00b      	b.n	8008842 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800882a:	2303      	movs	r3, #3
 800882c:	73fb      	strb	r3, [r7, #15]
    break;
 800882e:	e008      	b.n	8008842 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
    break;
 8008834:	e005      	b.n	8008842 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008836:	2303      	movs	r3, #3
 8008838:	73fb      	strb	r3, [r7, #15]
    break;
 800883a:	e002      	b.n	8008842 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800883c:	2303      	movs	r3, #3
 800883e:	73fb      	strb	r3, [r7, #15]
    break;
 8008840:	bf00      	nop
  }
  return usb_status;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	4608      	mov	r0, r1
 8008856:	4611      	mov	r1, r2
 8008858:	461a      	mov	r2, r3
 800885a:	4603      	mov	r3, r0
 800885c:	70fb      	strb	r3, [r7, #3]
 800885e:	460b      	mov	r3, r1
 8008860:	70bb      	strb	r3, [r7, #2]
 8008862:	4613      	mov	r3, r2
 8008864:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008874:	78bb      	ldrb	r3, [r7, #2]
 8008876:	883a      	ldrh	r2, [r7, #0]
 8008878:	78f9      	ldrb	r1, [r7, #3]
 800887a:	f7f8 fd37 	bl	80012ec <HAL_PCD_EP_Open>
 800887e:	4603      	mov	r3, r0
 8008880:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d817      	bhi.n	80088b8 <USBD_LL_OpenEP+0x6c>
 8008888:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <USBD_LL_OpenEP+0x44>)
 800888a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888e:	bf00      	nop
 8008890:	080088a1 	.word	0x080088a1
 8008894:	080088a7 	.word	0x080088a7
 8008898:	080088ad 	.word	0x080088ad
 800889c:	080088b3 	.word	0x080088b3
    case HAL_OK :
      usb_status = USBD_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
    break;
 80088a4:	e00b      	b.n	80088be <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088a6:	2303      	movs	r3, #3
 80088a8:	73fb      	strb	r3, [r7, #15]
    break;
 80088aa:	e008      	b.n	80088be <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088ac:	2301      	movs	r3, #1
 80088ae:	73fb      	strb	r3, [r7, #15]
    break;
 80088b0:	e005      	b.n	80088be <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088b2:	2303      	movs	r3, #3
 80088b4:	73fb      	strb	r3, [r7, #15]
    break;
 80088b6:	e002      	b.n	80088be <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80088b8:	2303      	movs	r3, #3
 80088ba:	73fb      	strb	r3, [r7, #15]
    break;
 80088bc:	bf00      	nop
  }
  return usb_status;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7f8 fd5d 	bl	80013a6 <HAL_PCD_EP_Close>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d816      	bhi.n	8008924 <USBD_LL_CloseEP+0x5c>
 80088f6:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <USBD_LL_CloseEP+0x34>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	0800890d 	.word	0x0800890d
 8008900:	08008913 	.word	0x08008913
 8008904:	08008919 	.word	0x08008919
 8008908:	0800891f 	.word	0x0800891f
    case HAL_OK :
      usb_status = USBD_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	73fb      	strb	r3, [r7, #15]
    break;
 8008910:	e00b      	b.n	800892a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008912:	2303      	movs	r3, #3
 8008914:	73fb      	strb	r3, [r7, #15]
    break;
 8008916:	e008      	b.n	800892a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
    break;
 800891c:	e005      	b.n	800892a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800891e:	2303      	movs	r3, #3
 8008920:	73fb      	strb	r3, [r7, #15]
    break;
 8008922:	e002      	b.n	800892a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	73fb      	strb	r3, [r7, #15]
    break;
 8008928:	bf00      	nop
  }
  return usb_status;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800894e:	78fa      	ldrb	r2, [r7, #3]
 8008950:	4611      	mov	r1, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f7f8 fdef 	bl	8001536 <HAL_PCD_EP_SetStall>
 8008958:	4603      	mov	r3, r0
 800895a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b03      	cmp	r3, #3
 8008960:	d816      	bhi.n	8008990 <USBD_LL_StallEP+0x5c>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <USBD_LL_StallEP+0x34>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008979 	.word	0x08008979
 800896c:	0800897f 	.word	0x0800897f
 8008970:	08008985 	.word	0x08008985
 8008974:	0800898b 	.word	0x0800898b
    case HAL_OK :
      usb_status = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
    break;
 800897c:	e00b      	b.n	8008996 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800897e:	2303      	movs	r3, #3
 8008980:	73fb      	strb	r3, [r7, #15]
    break;
 8008982:	e008      	b.n	8008996 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008984:	2301      	movs	r3, #1
 8008986:	73fb      	strb	r3, [r7, #15]
    break;
 8008988:	e005      	b.n	8008996 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800898a:	2303      	movs	r3, #3
 800898c:	73fb      	strb	r3, [r7, #15]
    break;
 800898e:	e002      	b.n	8008996 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008990:	2303      	movs	r3, #3
 8008992:	73fb      	strb	r3, [r7, #15]
    break;
 8008994:	bf00      	nop
  }
  return usb_status;
 8008996:	7bfb      	ldrb	r3, [r7, #15]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f7f8 fe19 	bl	80015f6 <HAL_PCD_EP_ClrStall>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d816      	bhi.n	80089fc <USBD_LL_ClearStallEP+0x5c>
 80089ce:	a201      	add	r2, pc, #4	; (adr r2, 80089d4 <USBD_LL_ClearStallEP+0x34>)
 80089d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d4:	080089e5 	.word	0x080089e5
 80089d8:	080089eb 	.word	0x080089eb
 80089dc:	080089f1 	.word	0x080089f1
 80089e0:	080089f7 	.word	0x080089f7
    case HAL_OK :
      usb_status = USBD_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
    break;
 80089e8:	e00b      	b.n	8008a02 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089ea:	2303      	movs	r3, #3
 80089ec:	73fb      	strb	r3, [r7, #15]
    break;
 80089ee:	e008      	b.n	8008a02 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089f0:	2301      	movs	r3, #1
 80089f2:	73fb      	strb	r3, [r7, #15]
    break;
 80089f4:	e005      	b.n	8008a02 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	73fb      	strb	r3, [r7, #15]
    break;
 80089fa:	e002      	b.n	8008a02 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80089fc:	2303      	movs	r3, #3
 80089fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008a00:	bf00      	nop
  }
  return usb_status;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	da0c      	bge.n	8008a42 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2e:	68f9      	ldr	r1, [r7, #12]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	440b      	add	r3, r1
 8008a3c:	3302      	adds	r3, #2
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	e00b      	b.n	8008a5a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a48:	68f9      	ldr	r1, [r7, #12]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	440b      	add	r3, r1
 8008a54:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008a58:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
	...

08008a68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	4611      	mov	r1, r2
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7f8 fc0b 	bl	80012a2 <HAL_PCD_SetAddress>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d816      	bhi.n	8008ac4 <USBD_LL_SetUSBAddress+0x5c>
 8008a96:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <USBD_LL_SetUSBAddress+0x34>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008aad 	.word	0x08008aad
 8008aa0:	08008ab3 	.word	0x08008ab3
 8008aa4:	08008ab9 	.word	0x08008ab9
 8008aa8:	08008abf 	.word	0x08008abf
    case HAL_OK :
      usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab0:	e00b      	b.n	8008aca <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab6:	e008      	b.n	8008aca <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
    break;
 8008abc:	e005      	b.n	8008aca <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac2:	e002      	b.n	8008aca <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac8:	bf00      	nop
  }
  return usb_status;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008af2:	7af9      	ldrb	r1, [r7, #11]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	f7f8 fce6 	bl	80014c8 <HAL_PCD_EP_Transmit>
 8008afc:	4603      	mov	r3, r0
 8008afe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008b00:	7dbb      	ldrb	r3, [r7, #22]
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d816      	bhi.n	8008b34 <USBD_LL_Transmit+0x60>
 8008b06:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <USBD_LL_Transmit+0x38>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b1d 	.word	0x08008b1d
 8008b10:	08008b23 	.word	0x08008b23
 8008b14:	08008b29 	.word	0x08008b29
 8008b18:	08008b2f 	.word	0x08008b2f
    case HAL_OK :
      usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	75fb      	strb	r3, [r7, #23]
    break;
 8008b20:	e00b      	b.n	8008b3a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b22:	2303      	movs	r3, #3
 8008b24:	75fb      	strb	r3, [r7, #23]
    break;
 8008b26:	e008      	b.n	8008b3a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	75fb      	strb	r3, [r7, #23]
    break;
 8008b2c:	e005      	b.n	8008b3a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	75fb      	strb	r3, [r7, #23]
    break;
 8008b32:	e002      	b.n	8008b3a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008b34:	2303      	movs	r3, #3
 8008b36:	75fb      	strb	r3, [r7, #23]
    break;
 8008b38:	bf00      	nop
  }
  return usb_status;
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3718      	adds	r7, #24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	460b      	mov	r3, r1
 8008b52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b62:	7af9      	ldrb	r1, [r7, #11]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	f7f8 fc65 	bl	8001436 <HAL_PCD_EP_Receive>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008b70:	7dbb      	ldrb	r3, [r7, #22]
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d816      	bhi.n	8008ba4 <USBD_LL_PrepareReceive+0x60>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <USBD_LL_PrepareReceive+0x38>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008b8d 	.word	0x08008b8d
 8008b80:	08008b93 	.word	0x08008b93
 8008b84:	08008b99 	.word	0x08008b99
 8008b88:	08008b9f 	.word	0x08008b9f
    case HAL_OK :
      usb_status = USBD_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	75fb      	strb	r3, [r7, #23]
    break;
 8008b90:	e00b      	b.n	8008baa <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b92:	2303      	movs	r3, #3
 8008b94:	75fb      	strb	r3, [r7, #23]
    break;
 8008b96:	e008      	b.n	8008baa <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	75fb      	strb	r3, [r7, #23]
    break;
 8008b9c:	e005      	b.n	8008baa <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	75fb      	strb	r3, [r7, #23]
    break;
 8008ba2:	e002      	b.n	8008baa <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	75fb      	strb	r3, [r7, #23]
    break;
 8008ba8:	bf00      	nop
  }
  return usb_status;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7f8 fc64 	bl	8001498 <HAL_PCD_EP_GetRxCount>
 8008bd0:	4603      	mov	r3, r0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_PCDEx_LPM_Callback+0x18>
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d013      	beq.n	8008c1a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008bf2:	e023      	b.n	8008c3c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d007      	beq.n	8008c0c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008bfc:	f000 f83c 	bl	8008c78 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c00:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <HAL_PCDEx_LPM_Callback+0x68>)
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	4a0f      	ldr	r2, [pc, #60]	; (8008c44 <HAL_PCDEx_LPM_Callback+0x68>)
 8008c06:	f023 0306 	bic.w	r3, r3, #6
 8008c0a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fb09 	bl	800722a <USBD_LL_Resume>
    break;
 8008c18:	e010      	b.n	8008c3c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe fae6 	bl	80071f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <HAL_PCDEx_LPM_Callback+0x68>)
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	4a04      	ldr	r2, [pc, #16]	; (8008c44 <HAL_PCDEx_LPM_Callback+0x68>)
 8008c34:	f043 0306 	orr.w	r3, r3, #6
 8008c38:	6113      	str	r3, [r2, #16]
    break;
 8008c3a:	bf00      	nop
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	e000ed00 	.word	0xe000ed00

08008c48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c50:	4b03      	ldr	r3, [pc, #12]	; (8008c60 <USBD_static_malloc+0x18>)
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	20001174 	.word	0x20001174

08008c64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008c7c:	f7f7 fb55 	bl	800032a <SystemClock_Config>
}
 8008c80:	bf00      	nop
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <main>:

#include "main.h"



int main(void){
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  hwInit();
 8008c88:	f7f7 fd6e 	bl	8000768 <hwInit>
  apInit();
 8008c8c:	f7f7 faf0 	bl	8000270 <apInit>

  apMain();
 8008c90:	f7f7 faf6 	bl	8000280 <apMain>

  return 0;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <std>:
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	b510      	push	{r4, lr}
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008caa:	6083      	str	r3, [r0, #8]
 8008cac:	8181      	strh	r1, [r0, #12]
 8008cae:	6643      	str	r3, [r0, #100]	; 0x64
 8008cb0:	81c2      	strh	r2, [r0, #14]
 8008cb2:	6183      	str	r3, [r0, #24]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	2208      	movs	r2, #8
 8008cb8:	305c      	adds	r0, #92	; 0x5c
 8008cba:	f000 f906 	bl	8008eca <memset>
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <std+0x58>)
 8008cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <std+0x5c>)
 8008cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <std+0x60>)
 8008cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cca:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <std+0x64>)
 8008ccc:	6323      	str	r3, [r4, #48]	; 0x30
 8008cce:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <std+0x68>)
 8008cd0:	6224      	str	r4, [r4, #32]
 8008cd2:	429c      	cmp	r4, r3
 8008cd4:	d006      	beq.n	8008ce4 <std+0x48>
 8008cd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008cda:	4294      	cmp	r4, r2
 8008cdc:	d002      	beq.n	8008ce4 <std+0x48>
 8008cde:	33d0      	adds	r3, #208	; 0xd0
 8008ce0:	429c      	cmp	r4, r3
 8008ce2:	d105      	bne.n	8008cf0 <std+0x54>
 8008ce4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cec:	f000 b966 	b.w	8008fbc <__retarget_lock_init_recursive>
 8008cf0:	bd10      	pop	{r4, pc}
 8008cf2:	bf00      	nop
 8008cf4:	08008e45 	.word	0x08008e45
 8008cf8:	08008e67 	.word	0x08008e67
 8008cfc:	08008e9f 	.word	0x08008e9f
 8008d00:	08008ec3 	.word	0x08008ec3
 8008d04:	20001394 	.word	0x20001394

08008d08 <stdio_exit_handler>:
 8008d08:	4a02      	ldr	r2, [pc, #8]	; (8008d14 <stdio_exit_handler+0xc>)
 8008d0a:	4903      	ldr	r1, [pc, #12]	; (8008d18 <stdio_exit_handler+0x10>)
 8008d0c:	4803      	ldr	r0, [pc, #12]	; (8008d1c <stdio_exit_handler+0x14>)
 8008d0e:	f000 b869 	b.w	8008de4 <_fwalk_sglue>
 8008d12:	bf00      	nop
 8008d14:	2000011c 	.word	0x2000011c
 8008d18:	08009869 	.word	0x08009869
 8008d1c:	20000128 	.word	0x20000128

08008d20 <cleanup_stdio>:
 8008d20:	6841      	ldr	r1, [r0, #4]
 8008d22:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <cleanup_stdio+0x34>)
 8008d24:	4299      	cmp	r1, r3
 8008d26:	b510      	push	{r4, lr}
 8008d28:	4604      	mov	r4, r0
 8008d2a:	d001      	beq.n	8008d30 <cleanup_stdio+0x10>
 8008d2c:	f000 fd9c 	bl	8009868 <_fflush_r>
 8008d30:	68a1      	ldr	r1, [r4, #8]
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <cleanup_stdio+0x38>)
 8008d34:	4299      	cmp	r1, r3
 8008d36:	d002      	beq.n	8008d3e <cleanup_stdio+0x1e>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fd95 	bl	8009868 <_fflush_r>
 8008d3e:	68e1      	ldr	r1, [r4, #12]
 8008d40:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <cleanup_stdio+0x3c>)
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d004      	beq.n	8008d50 <cleanup_stdio+0x30>
 8008d46:	4620      	mov	r0, r4
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4c:	f000 bd8c 	b.w	8009868 <_fflush_r>
 8008d50:	bd10      	pop	{r4, pc}
 8008d52:	bf00      	nop
 8008d54:	20001394 	.word	0x20001394
 8008d58:	200013fc 	.word	0x200013fc
 8008d5c:	20001464 	.word	0x20001464

08008d60 <global_stdio_init.part.0>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <global_stdio_init.part.0+0x30>)
 8008d64:	4c0b      	ldr	r4, [pc, #44]	; (8008d94 <global_stdio_init.part.0+0x34>)
 8008d66:	4a0c      	ldr	r2, [pc, #48]	; (8008d98 <global_stdio_init.part.0+0x38>)
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2104      	movs	r1, #4
 8008d70:	f7ff ff94 	bl	8008c9c <std>
 8008d74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d78:	2201      	movs	r2, #1
 8008d7a:	2109      	movs	r1, #9
 8008d7c:	f7ff ff8e 	bl	8008c9c <std>
 8008d80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d84:	2202      	movs	r2, #2
 8008d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d8a:	2112      	movs	r1, #18
 8008d8c:	f7ff bf86 	b.w	8008c9c <std>
 8008d90:	200014cc 	.word	0x200014cc
 8008d94:	20001394 	.word	0x20001394
 8008d98:	08008d09 	.word	0x08008d09

08008d9c <__sfp_lock_acquire>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	; (8008da4 <__sfp_lock_acquire+0x8>)
 8008d9e:	f000 b90e 	b.w	8008fbe <__retarget_lock_acquire_recursive>
 8008da2:	bf00      	nop
 8008da4:	200014d5 	.word	0x200014d5

08008da8 <__sfp_lock_release>:
 8008da8:	4801      	ldr	r0, [pc, #4]	; (8008db0 <__sfp_lock_release+0x8>)
 8008daa:	f000 b909 	b.w	8008fc0 <__retarget_lock_release_recursive>
 8008dae:	bf00      	nop
 8008db0:	200014d5 	.word	0x200014d5

08008db4 <__sinit>:
 8008db4:	b510      	push	{r4, lr}
 8008db6:	4604      	mov	r4, r0
 8008db8:	f7ff fff0 	bl	8008d9c <__sfp_lock_acquire>
 8008dbc:	6a23      	ldr	r3, [r4, #32]
 8008dbe:	b11b      	cbz	r3, 8008dc8 <__sinit+0x14>
 8008dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc4:	f7ff bff0 	b.w	8008da8 <__sfp_lock_release>
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <__sinit+0x28>)
 8008dca:	6223      	str	r3, [r4, #32]
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <__sinit+0x2c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f5      	bne.n	8008dc0 <__sinit+0xc>
 8008dd4:	f7ff ffc4 	bl	8008d60 <global_stdio_init.part.0>
 8008dd8:	e7f2      	b.n	8008dc0 <__sinit+0xc>
 8008dda:	bf00      	nop
 8008ddc:	08008d21 	.word	0x08008d21
 8008de0:	200014cc 	.word	0x200014cc

08008de4 <_fwalk_sglue>:
 8008de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de8:	4607      	mov	r7, r0
 8008dea:	4688      	mov	r8, r1
 8008dec:	4614      	mov	r4, r2
 8008dee:	2600      	movs	r6, #0
 8008df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008df4:	f1b9 0901 	subs.w	r9, r9, #1
 8008df8:	d505      	bpl.n	8008e06 <_fwalk_sglue+0x22>
 8008dfa:	6824      	ldr	r4, [r4, #0]
 8008dfc:	2c00      	cmp	r4, #0
 8008dfe:	d1f7      	bne.n	8008df0 <_fwalk_sglue+0xc>
 8008e00:	4630      	mov	r0, r6
 8008e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d907      	bls.n	8008e1c <_fwalk_sglue+0x38>
 8008e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e10:	3301      	adds	r3, #1
 8008e12:	d003      	beq.n	8008e1c <_fwalk_sglue+0x38>
 8008e14:	4629      	mov	r1, r5
 8008e16:	4638      	mov	r0, r7
 8008e18:	47c0      	blx	r8
 8008e1a:	4306      	orrs	r6, r0
 8008e1c:	3568      	adds	r5, #104	; 0x68
 8008e1e:	e7e9      	b.n	8008df4 <_fwalk_sglue+0x10>

08008e20 <iprintf>:
 8008e20:	b40f      	push	{r0, r1, r2, r3}
 8008e22:	b507      	push	{r0, r1, r2, lr}
 8008e24:	4906      	ldr	r1, [pc, #24]	; (8008e40 <iprintf+0x20>)
 8008e26:	ab04      	add	r3, sp, #16
 8008e28:	6808      	ldr	r0, [r1, #0]
 8008e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2e:	6881      	ldr	r1, [r0, #8]
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	f000 f9e9 	bl	8009208 <_vfiprintf_r>
 8008e36:	b003      	add	sp, #12
 8008e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e3c:	b004      	add	sp, #16
 8008e3e:	4770      	bx	lr
 8008e40:	20000174 	.word	0x20000174

08008e44 <__sread>:
 8008e44:	b510      	push	{r4, lr}
 8008e46:	460c      	mov	r4, r1
 8008e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e4c:	f000 f868 	bl	8008f20 <_read_r>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	bfab      	itete	ge
 8008e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e56:	89a3      	ldrhlt	r3, [r4, #12]
 8008e58:	181b      	addge	r3, r3, r0
 8008e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e5e:	bfac      	ite	ge
 8008e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e62:	81a3      	strhlt	r3, [r4, #12]
 8008e64:	bd10      	pop	{r4, pc}

08008e66 <__swrite>:
 8008e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6a:	461f      	mov	r7, r3
 8008e6c:	898b      	ldrh	r3, [r1, #12]
 8008e6e:	05db      	lsls	r3, r3, #23
 8008e70:	4605      	mov	r5, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	4616      	mov	r6, r2
 8008e76:	d505      	bpl.n	8008e84 <__swrite+0x1e>
 8008e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f000 f83c 	bl	8008efc <_lseek_r>
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	4632      	mov	r2, r6
 8008e92:	463b      	mov	r3, r7
 8008e94:	4628      	mov	r0, r5
 8008e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9a:	f000 b853 	b.w	8008f44 <_write_r>

08008e9e <__sseek>:
 8008e9e:	b510      	push	{r4, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea6:	f000 f829 	bl	8008efc <_lseek_r>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	bf15      	itete	ne
 8008eb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008eba:	81a3      	strheq	r3, [r4, #12]
 8008ebc:	bf18      	it	ne
 8008ebe:	81a3      	strhne	r3, [r4, #12]
 8008ec0:	bd10      	pop	{r4, pc}

08008ec2 <__sclose>:
 8008ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec6:	f000 b809 	b.w	8008edc <_close_r>

08008eca <memset>:
 8008eca:	4402      	add	r2, r0
 8008ecc:	4603      	mov	r3, r0
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d100      	bne.n	8008ed4 <memset+0xa>
 8008ed2:	4770      	bx	lr
 8008ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed8:	e7f9      	b.n	8008ece <memset+0x4>
	...

08008edc <_close_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d06      	ldr	r5, [pc, #24]	; (8008ef8 <_close_r+0x1c>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	602b      	str	r3, [r5, #0]
 8008ee8:	f7f7 fb07 	bl	80004fa <_close>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_close_r+0x1a>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_close_r+0x1a>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	200014d0 	.word	0x200014d0

08008efc <_lseek_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4d07      	ldr	r5, [pc, #28]	; (8008f1c <_lseek_r+0x20>)
 8008f00:	4604      	mov	r4, r0
 8008f02:	4608      	mov	r0, r1
 8008f04:	4611      	mov	r1, r2
 8008f06:	2200      	movs	r2, #0
 8008f08:	602a      	str	r2, [r5, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f7f7 fb1c 	bl	8000548 <_lseek>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_lseek_r+0x1e>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_lseek_r+0x1e>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	200014d0 	.word	0x200014d0

08008f20 <_read_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	; (8008f40 <_read_r+0x20>)
 8008f24:	4604      	mov	r4, r0
 8008f26:	4608      	mov	r0, r1
 8008f28:	4611      	mov	r1, r2
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	602a      	str	r2, [r5, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f7f7 faaa 	bl	8000488 <_read>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_read_r+0x1e>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_read_r+0x1e>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	200014d0 	.word	0x200014d0

08008f44 <_write_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d07      	ldr	r5, [pc, #28]	; (8008f64 <_write_r+0x20>)
 8008f48:	4604      	mov	r4, r0
 8008f4a:	4608      	mov	r0, r1
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	2200      	movs	r2, #0
 8008f50:	602a      	str	r2, [r5, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f7f7 fab5 	bl	80004c2 <_write>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_write_r+0x1e>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_write_r+0x1e>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	200014d0 	.word	0x200014d0

08008f68 <__errno>:
 8008f68:	4b01      	ldr	r3, [pc, #4]	; (8008f70 <__errno+0x8>)
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	20000174 	.word	0x20000174

08008f74 <__libc_init_array>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	4d0d      	ldr	r5, [pc, #52]	; (8008fac <__libc_init_array+0x38>)
 8008f78:	4c0d      	ldr	r4, [pc, #52]	; (8008fb0 <__libc_init_array+0x3c>)
 8008f7a:	1b64      	subs	r4, r4, r5
 8008f7c:	10a4      	asrs	r4, r4, #2
 8008f7e:	2600      	movs	r6, #0
 8008f80:	42a6      	cmp	r6, r4
 8008f82:	d109      	bne.n	8008f98 <__libc_init_array+0x24>
 8008f84:	4d0b      	ldr	r5, [pc, #44]	; (8008fb4 <__libc_init_array+0x40>)
 8008f86:	4c0c      	ldr	r4, [pc, #48]	; (8008fb8 <__libc_init_array+0x44>)
 8008f88:	f000 fdc0 	bl	8009b0c <_init>
 8008f8c:	1b64      	subs	r4, r4, r5
 8008f8e:	10a4      	asrs	r4, r4, #2
 8008f90:	2600      	movs	r6, #0
 8008f92:	42a6      	cmp	r6, r4
 8008f94:	d105      	bne.n	8008fa2 <__libc_init_array+0x2e>
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9c:	4798      	blx	r3
 8008f9e:	3601      	adds	r6, #1
 8008fa0:	e7ee      	b.n	8008f80 <__libc_init_array+0xc>
 8008fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa6:	4798      	blx	r3
 8008fa8:	3601      	adds	r6, #1
 8008faa:	e7f2      	b.n	8008f92 <__libc_init_array+0x1e>
 8008fac:	08009be8 	.word	0x08009be8
 8008fb0:	08009be8 	.word	0x08009be8
 8008fb4:	08009be8 	.word	0x08009be8
 8008fb8:	08009bec 	.word	0x08009bec

08008fbc <__retarget_lock_init_recursive>:
 8008fbc:	4770      	bx	lr

08008fbe <__retarget_lock_acquire_recursive>:
 8008fbe:	4770      	bx	lr

08008fc0 <__retarget_lock_release_recursive>:
 8008fc0:	4770      	bx	lr
	...

08008fc4 <_free_r>:
 8008fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fc6:	2900      	cmp	r1, #0
 8008fc8:	d044      	beq.n	8009054 <_free_r+0x90>
 8008fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fce:	9001      	str	r0, [sp, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8008fd6:	bfb8      	it	lt
 8008fd8:	18e4      	addlt	r4, r4, r3
 8008fda:	f000 f8df 	bl	800919c <__malloc_lock>
 8008fde:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <_free_r+0x94>)
 8008fe0:	9801      	ldr	r0, [sp, #4]
 8008fe2:	6813      	ldr	r3, [r2, #0]
 8008fe4:	b933      	cbnz	r3, 8008ff4 <_free_r+0x30>
 8008fe6:	6063      	str	r3, [r4, #4]
 8008fe8:	6014      	str	r4, [r2, #0]
 8008fea:	b003      	add	sp, #12
 8008fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ff0:	f000 b8da 	b.w	80091a8 <__malloc_unlock>
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	d908      	bls.n	800900a <_free_r+0x46>
 8008ff8:	6825      	ldr	r5, [r4, #0]
 8008ffa:	1961      	adds	r1, r4, r5
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	bf01      	itttt	eq
 8009000:	6819      	ldreq	r1, [r3, #0]
 8009002:	685b      	ldreq	r3, [r3, #4]
 8009004:	1949      	addeq	r1, r1, r5
 8009006:	6021      	streq	r1, [r4, #0]
 8009008:	e7ed      	b.n	8008fe6 <_free_r+0x22>
 800900a:	461a      	mov	r2, r3
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	b10b      	cbz	r3, 8009014 <_free_r+0x50>
 8009010:	42a3      	cmp	r3, r4
 8009012:	d9fa      	bls.n	800900a <_free_r+0x46>
 8009014:	6811      	ldr	r1, [r2, #0]
 8009016:	1855      	adds	r5, r2, r1
 8009018:	42a5      	cmp	r5, r4
 800901a:	d10b      	bne.n	8009034 <_free_r+0x70>
 800901c:	6824      	ldr	r4, [r4, #0]
 800901e:	4421      	add	r1, r4
 8009020:	1854      	adds	r4, r2, r1
 8009022:	42a3      	cmp	r3, r4
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	d1e0      	bne.n	8008fea <_free_r+0x26>
 8009028:	681c      	ldr	r4, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	6053      	str	r3, [r2, #4]
 800902e:	440c      	add	r4, r1
 8009030:	6014      	str	r4, [r2, #0]
 8009032:	e7da      	b.n	8008fea <_free_r+0x26>
 8009034:	d902      	bls.n	800903c <_free_r+0x78>
 8009036:	230c      	movs	r3, #12
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	e7d6      	b.n	8008fea <_free_r+0x26>
 800903c:	6825      	ldr	r5, [r4, #0]
 800903e:	1961      	adds	r1, r4, r5
 8009040:	428b      	cmp	r3, r1
 8009042:	bf04      	itt	eq
 8009044:	6819      	ldreq	r1, [r3, #0]
 8009046:	685b      	ldreq	r3, [r3, #4]
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	bf04      	itt	eq
 800904c:	1949      	addeq	r1, r1, r5
 800904e:	6021      	streq	r1, [r4, #0]
 8009050:	6054      	str	r4, [r2, #4]
 8009052:	e7ca      	b.n	8008fea <_free_r+0x26>
 8009054:	b003      	add	sp, #12
 8009056:	bd30      	pop	{r4, r5, pc}
 8009058:	200014d8 	.word	0x200014d8

0800905c <sbrk_aligned>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	4e0e      	ldr	r6, [pc, #56]	; (8009098 <sbrk_aligned+0x3c>)
 8009060:	460c      	mov	r4, r1
 8009062:	6831      	ldr	r1, [r6, #0]
 8009064:	4605      	mov	r5, r0
 8009066:	b911      	cbnz	r1, 800906e <sbrk_aligned+0x12>
 8009068:	f000 fcbc 	bl	80099e4 <_sbrk_r>
 800906c:	6030      	str	r0, [r6, #0]
 800906e:	4621      	mov	r1, r4
 8009070:	4628      	mov	r0, r5
 8009072:	f000 fcb7 	bl	80099e4 <_sbrk_r>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	d00a      	beq.n	8009090 <sbrk_aligned+0x34>
 800907a:	1cc4      	adds	r4, r0, #3
 800907c:	f024 0403 	bic.w	r4, r4, #3
 8009080:	42a0      	cmp	r0, r4
 8009082:	d007      	beq.n	8009094 <sbrk_aligned+0x38>
 8009084:	1a21      	subs	r1, r4, r0
 8009086:	4628      	mov	r0, r5
 8009088:	f000 fcac 	bl	80099e4 <_sbrk_r>
 800908c:	3001      	adds	r0, #1
 800908e:	d101      	bne.n	8009094 <sbrk_aligned+0x38>
 8009090:	f04f 34ff 	mov.w	r4, #4294967295
 8009094:	4620      	mov	r0, r4
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	200014dc 	.word	0x200014dc

0800909c <_malloc_r>:
 800909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	1ccd      	adds	r5, r1, #3
 80090a2:	f025 0503 	bic.w	r5, r5, #3
 80090a6:	3508      	adds	r5, #8
 80090a8:	2d0c      	cmp	r5, #12
 80090aa:	bf38      	it	cc
 80090ac:	250c      	movcc	r5, #12
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	4607      	mov	r7, r0
 80090b2:	db01      	blt.n	80090b8 <_malloc_r+0x1c>
 80090b4:	42a9      	cmp	r1, r5
 80090b6:	d905      	bls.n	80090c4 <_malloc_r+0x28>
 80090b8:	230c      	movs	r3, #12
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	2600      	movs	r6, #0
 80090be:	4630      	mov	r0, r6
 80090c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009198 <_malloc_r+0xfc>
 80090c8:	f000 f868 	bl	800919c <__malloc_lock>
 80090cc:	f8d8 3000 	ldr.w	r3, [r8]
 80090d0:	461c      	mov	r4, r3
 80090d2:	bb5c      	cbnz	r4, 800912c <_malloc_r+0x90>
 80090d4:	4629      	mov	r1, r5
 80090d6:	4638      	mov	r0, r7
 80090d8:	f7ff ffc0 	bl	800905c <sbrk_aligned>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	4604      	mov	r4, r0
 80090e0:	d155      	bne.n	800918e <_malloc_r+0xf2>
 80090e2:	f8d8 4000 	ldr.w	r4, [r8]
 80090e6:	4626      	mov	r6, r4
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	d145      	bne.n	8009178 <_malloc_r+0xdc>
 80090ec:	2c00      	cmp	r4, #0
 80090ee:	d048      	beq.n	8009182 <_malloc_r+0xe6>
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	4631      	mov	r1, r6
 80090f4:	4638      	mov	r0, r7
 80090f6:	eb04 0903 	add.w	r9, r4, r3
 80090fa:	f000 fc73 	bl	80099e4 <_sbrk_r>
 80090fe:	4581      	cmp	r9, r0
 8009100:	d13f      	bne.n	8009182 <_malloc_r+0xe6>
 8009102:	6821      	ldr	r1, [r4, #0]
 8009104:	1a6d      	subs	r5, r5, r1
 8009106:	4629      	mov	r1, r5
 8009108:	4638      	mov	r0, r7
 800910a:	f7ff ffa7 	bl	800905c <sbrk_aligned>
 800910e:	3001      	adds	r0, #1
 8009110:	d037      	beq.n	8009182 <_malloc_r+0xe6>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	442b      	add	r3, r5
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	f8d8 3000 	ldr.w	r3, [r8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d038      	beq.n	8009192 <_malloc_r+0xf6>
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	42a2      	cmp	r2, r4
 8009124:	d12b      	bne.n	800917e <_malloc_r+0xe2>
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
 800912a:	e00f      	b.n	800914c <_malloc_r+0xb0>
 800912c:	6822      	ldr	r2, [r4, #0]
 800912e:	1b52      	subs	r2, r2, r5
 8009130:	d41f      	bmi.n	8009172 <_malloc_r+0xd6>
 8009132:	2a0b      	cmp	r2, #11
 8009134:	d917      	bls.n	8009166 <_malloc_r+0xca>
 8009136:	1961      	adds	r1, r4, r5
 8009138:	42a3      	cmp	r3, r4
 800913a:	6025      	str	r5, [r4, #0]
 800913c:	bf18      	it	ne
 800913e:	6059      	strne	r1, [r3, #4]
 8009140:	6863      	ldr	r3, [r4, #4]
 8009142:	bf08      	it	eq
 8009144:	f8c8 1000 	streq.w	r1, [r8]
 8009148:	5162      	str	r2, [r4, r5]
 800914a:	604b      	str	r3, [r1, #4]
 800914c:	4638      	mov	r0, r7
 800914e:	f104 060b 	add.w	r6, r4, #11
 8009152:	f000 f829 	bl	80091a8 <__malloc_unlock>
 8009156:	f026 0607 	bic.w	r6, r6, #7
 800915a:	1d23      	adds	r3, r4, #4
 800915c:	1af2      	subs	r2, r6, r3
 800915e:	d0ae      	beq.n	80090be <_malloc_r+0x22>
 8009160:	1b9b      	subs	r3, r3, r6
 8009162:	50a3      	str	r3, [r4, r2]
 8009164:	e7ab      	b.n	80090be <_malloc_r+0x22>
 8009166:	42a3      	cmp	r3, r4
 8009168:	6862      	ldr	r2, [r4, #4]
 800916a:	d1dd      	bne.n	8009128 <_malloc_r+0x8c>
 800916c:	f8c8 2000 	str.w	r2, [r8]
 8009170:	e7ec      	b.n	800914c <_malloc_r+0xb0>
 8009172:	4623      	mov	r3, r4
 8009174:	6864      	ldr	r4, [r4, #4]
 8009176:	e7ac      	b.n	80090d2 <_malloc_r+0x36>
 8009178:	4634      	mov	r4, r6
 800917a:	6876      	ldr	r6, [r6, #4]
 800917c:	e7b4      	b.n	80090e8 <_malloc_r+0x4c>
 800917e:	4613      	mov	r3, r2
 8009180:	e7cc      	b.n	800911c <_malloc_r+0x80>
 8009182:	230c      	movs	r3, #12
 8009184:	603b      	str	r3, [r7, #0]
 8009186:	4638      	mov	r0, r7
 8009188:	f000 f80e 	bl	80091a8 <__malloc_unlock>
 800918c:	e797      	b.n	80090be <_malloc_r+0x22>
 800918e:	6025      	str	r5, [r4, #0]
 8009190:	e7dc      	b.n	800914c <_malloc_r+0xb0>
 8009192:	605b      	str	r3, [r3, #4]
 8009194:	deff      	udf	#255	; 0xff
 8009196:	bf00      	nop
 8009198:	200014d8 	.word	0x200014d8

0800919c <__malloc_lock>:
 800919c:	4801      	ldr	r0, [pc, #4]	; (80091a4 <__malloc_lock+0x8>)
 800919e:	f7ff bf0e 	b.w	8008fbe <__retarget_lock_acquire_recursive>
 80091a2:	bf00      	nop
 80091a4:	200014d4 	.word	0x200014d4

080091a8 <__malloc_unlock>:
 80091a8:	4801      	ldr	r0, [pc, #4]	; (80091b0 <__malloc_unlock+0x8>)
 80091aa:	f7ff bf09 	b.w	8008fc0 <__retarget_lock_release_recursive>
 80091ae:	bf00      	nop
 80091b0:	200014d4 	.word	0x200014d4

080091b4 <__sfputc_r>:
 80091b4:	6893      	ldr	r3, [r2, #8]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	b410      	push	{r4}
 80091bc:	6093      	str	r3, [r2, #8]
 80091be:	da08      	bge.n	80091d2 <__sfputc_r+0x1e>
 80091c0:	6994      	ldr	r4, [r2, #24]
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	db01      	blt.n	80091ca <__sfputc_r+0x16>
 80091c6:	290a      	cmp	r1, #10
 80091c8:	d103      	bne.n	80091d2 <__sfputc_r+0x1e>
 80091ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ce:	f000 bb73 	b.w	80098b8 <__swbuf_r>
 80091d2:	6813      	ldr	r3, [r2, #0]
 80091d4:	1c58      	adds	r0, r3, #1
 80091d6:	6010      	str	r0, [r2, #0]
 80091d8:	7019      	strb	r1, [r3, #0]
 80091da:	4608      	mov	r0, r1
 80091dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <__sfputs_r>:
 80091e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e4:	4606      	mov	r6, r0
 80091e6:	460f      	mov	r7, r1
 80091e8:	4614      	mov	r4, r2
 80091ea:	18d5      	adds	r5, r2, r3
 80091ec:	42ac      	cmp	r4, r5
 80091ee:	d101      	bne.n	80091f4 <__sfputs_r+0x12>
 80091f0:	2000      	movs	r0, #0
 80091f2:	e007      	b.n	8009204 <__sfputs_r+0x22>
 80091f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f8:	463a      	mov	r2, r7
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ffda 	bl	80091b4 <__sfputc_r>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d1f3      	bne.n	80091ec <__sfputs_r+0xa>
 8009204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009208 <_vfiprintf_r>:
 8009208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	460d      	mov	r5, r1
 800920e:	b09d      	sub	sp, #116	; 0x74
 8009210:	4614      	mov	r4, r2
 8009212:	4698      	mov	r8, r3
 8009214:	4606      	mov	r6, r0
 8009216:	b118      	cbz	r0, 8009220 <_vfiprintf_r+0x18>
 8009218:	6a03      	ldr	r3, [r0, #32]
 800921a:	b90b      	cbnz	r3, 8009220 <_vfiprintf_r+0x18>
 800921c:	f7ff fdca 	bl	8008db4 <__sinit>
 8009220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009222:	07d9      	lsls	r1, r3, #31
 8009224:	d405      	bmi.n	8009232 <_vfiprintf_r+0x2a>
 8009226:	89ab      	ldrh	r3, [r5, #12]
 8009228:	059a      	lsls	r2, r3, #22
 800922a:	d402      	bmi.n	8009232 <_vfiprintf_r+0x2a>
 800922c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800922e:	f7ff fec6 	bl	8008fbe <__retarget_lock_acquire_recursive>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	071b      	lsls	r3, r3, #28
 8009236:	d501      	bpl.n	800923c <_vfiprintf_r+0x34>
 8009238:	692b      	ldr	r3, [r5, #16]
 800923a:	b99b      	cbnz	r3, 8009264 <_vfiprintf_r+0x5c>
 800923c:	4629      	mov	r1, r5
 800923e:	4630      	mov	r0, r6
 8009240:	f000 fb78 	bl	8009934 <__swsetup_r>
 8009244:	b170      	cbz	r0, 8009264 <_vfiprintf_r+0x5c>
 8009246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009248:	07dc      	lsls	r4, r3, #31
 800924a:	d504      	bpl.n	8009256 <_vfiprintf_r+0x4e>
 800924c:	f04f 30ff 	mov.w	r0, #4294967295
 8009250:	b01d      	add	sp, #116	; 0x74
 8009252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009256:	89ab      	ldrh	r3, [r5, #12]
 8009258:	0598      	lsls	r0, r3, #22
 800925a:	d4f7      	bmi.n	800924c <_vfiprintf_r+0x44>
 800925c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800925e:	f7ff feaf 	bl	8008fc0 <__retarget_lock_release_recursive>
 8009262:	e7f3      	b.n	800924c <_vfiprintf_r+0x44>
 8009264:	2300      	movs	r3, #0
 8009266:	9309      	str	r3, [sp, #36]	; 0x24
 8009268:	2320      	movs	r3, #32
 800926a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800926e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009272:	2330      	movs	r3, #48	; 0x30
 8009274:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009428 <_vfiprintf_r+0x220>
 8009278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800927c:	f04f 0901 	mov.w	r9, #1
 8009280:	4623      	mov	r3, r4
 8009282:	469a      	mov	sl, r3
 8009284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009288:	b10a      	cbz	r2, 800928e <_vfiprintf_r+0x86>
 800928a:	2a25      	cmp	r2, #37	; 0x25
 800928c:	d1f9      	bne.n	8009282 <_vfiprintf_r+0x7a>
 800928e:	ebba 0b04 	subs.w	fp, sl, r4
 8009292:	d00b      	beq.n	80092ac <_vfiprintf_r+0xa4>
 8009294:	465b      	mov	r3, fp
 8009296:	4622      	mov	r2, r4
 8009298:	4629      	mov	r1, r5
 800929a:	4630      	mov	r0, r6
 800929c:	f7ff ffa1 	bl	80091e2 <__sfputs_r>
 80092a0:	3001      	adds	r0, #1
 80092a2:	f000 80a9 	beq.w	80093f8 <_vfiprintf_r+0x1f0>
 80092a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a8:	445a      	add	r2, fp
 80092aa:	9209      	str	r2, [sp, #36]	; 0x24
 80092ac:	f89a 3000 	ldrb.w	r3, [sl]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 80a1 	beq.w	80093f8 <_vfiprintf_r+0x1f0>
 80092b6:	2300      	movs	r3, #0
 80092b8:	f04f 32ff 	mov.w	r2, #4294967295
 80092bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c0:	f10a 0a01 	add.w	sl, sl, #1
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	9307      	str	r3, [sp, #28]
 80092c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092cc:	931a      	str	r3, [sp, #104]	; 0x68
 80092ce:	4654      	mov	r4, sl
 80092d0:	2205      	movs	r2, #5
 80092d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d6:	4854      	ldr	r0, [pc, #336]	; (8009428 <_vfiprintf_r+0x220>)
 80092d8:	f7f6 ff7a 	bl	80001d0 <memchr>
 80092dc:	9a04      	ldr	r2, [sp, #16]
 80092de:	b9d8      	cbnz	r0, 8009318 <_vfiprintf_r+0x110>
 80092e0:	06d1      	lsls	r1, r2, #27
 80092e2:	bf44      	itt	mi
 80092e4:	2320      	movmi	r3, #32
 80092e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ea:	0713      	lsls	r3, r2, #28
 80092ec:	bf44      	itt	mi
 80092ee:	232b      	movmi	r3, #43	; 0x2b
 80092f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f4:	f89a 3000 	ldrb.w	r3, [sl]
 80092f8:	2b2a      	cmp	r3, #42	; 0x2a
 80092fa:	d015      	beq.n	8009328 <_vfiprintf_r+0x120>
 80092fc:	9a07      	ldr	r2, [sp, #28]
 80092fe:	4654      	mov	r4, sl
 8009300:	2000      	movs	r0, #0
 8009302:	f04f 0c0a 	mov.w	ip, #10
 8009306:	4621      	mov	r1, r4
 8009308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800930c:	3b30      	subs	r3, #48	; 0x30
 800930e:	2b09      	cmp	r3, #9
 8009310:	d94d      	bls.n	80093ae <_vfiprintf_r+0x1a6>
 8009312:	b1b0      	cbz	r0, 8009342 <_vfiprintf_r+0x13a>
 8009314:	9207      	str	r2, [sp, #28]
 8009316:	e014      	b.n	8009342 <_vfiprintf_r+0x13a>
 8009318:	eba0 0308 	sub.w	r3, r0, r8
 800931c:	fa09 f303 	lsl.w	r3, r9, r3
 8009320:	4313      	orrs	r3, r2
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	46a2      	mov	sl, r4
 8009326:	e7d2      	b.n	80092ce <_vfiprintf_r+0xc6>
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	1d19      	adds	r1, r3, #4
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	9103      	str	r1, [sp, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	bfbb      	ittet	lt
 8009334:	425b      	neglt	r3, r3
 8009336:	f042 0202 	orrlt.w	r2, r2, #2
 800933a:	9307      	strge	r3, [sp, #28]
 800933c:	9307      	strlt	r3, [sp, #28]
 800933e:	bfb8      	it	lt
 8009340:	9204      	strlt	r2, [sp, #16]
 8009342:	7823      	ldrb	r3, [r4, #0]
 8009344:	2b2e      	cmp	r3, #46	; 0x2e
 8009346:	d10c      	bne.n	8009362 <_vfiprintf_r+0x15a>
 8009348:	7863      	ldrb	r3, [r4, #1]
 800934a:	2b2a      	cmp	r3, #42	; 0x2a
 800934c:	d134      	bne.n	80093b8 <_vfiprintf_r+0x1b0>
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	1d1a      	adds	r2, r3, #4
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	9203      	str	r2, [sp, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	bfb8      	it	lt
 800935a:	f04f 33ff 	movlt.w	r3, #4294967295
 800935e:	3402      	adds	r4, #2
 8009360:	9305      	str	r3, [sp, #20]
 8009362:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009438 <_vfiprintf_r+0x230>
 8009366:	7821      	ldrb	r1, [r4, #0]
 8009368:	2203      	movs	r2, #3
 800936a:	4650      	mov	r0, sl
 800936c:	f7f6 ff30 	bl	80001d0 <memchr>
 8009370:	b138      	cbz	r0, 8009382 <_vfiprintf_r+0x17a>
 8009372:	9b04      	ldr	r3, [sp, #16]
 8009374:	eba0 000a 	sub.w	r0, r0, sl
 8009378:	2240      	movs	r2, #64	; 0x40
 800937a:	4082      	lsls	r2, r0
 800937c:	4313      	orrs	r3, r2
 800937e:	3401      	adds	r4, #1
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009386:	4829      	ldr	r0, [pc, #164]	; (800942c <_vfiprintf_r+0x224>)
 8009388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800938c:	2206      	movs	r2, #6
 800938e:	f7f6 ff1f 	bl	80001d0 <memchr>
 8009392:	2800      	cmp	r0, #0
 8009394:	d03f      	beq.n	8009416 <_vfiprintf_r+0x20e>
 8009396:	4b26      	ldr	r3, [pc, #152]	; (8009430 <_vfiprintf_r+0x228>)
 8009398:	bb1b      	cbnz	r3, 80093e2 <_vfiprintf_r+0x1da>
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	3307      	adds	r3, #7
 800939e:	f023 0307 	bic.w	r3, r3, #7
 80093a2:	3308      	adds	r3, #8
 80093a4:	9303      	str	r3, [sp, #12]
 80093a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a8:	443b      	add	r3, r7
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	e768      	b.n	8009280 <_vfiprintf_r+0x78>
 80093ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b2:	460c      	mov	r4, r1
 80093b4:	2001      	movs	r0, #1
 80093b6:	e7a6      	b.n	8009306 <_vfiprintf_r+0xfe>
 80093b8:	2300      	movs	r3, #0
 80093ba:	3401      	adds	r4, #1
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	4619      	mov	r1, r3
 80093c0:	f04f 0c0a 	mov.w	ip, #10
 80093c4:	4620      	mov	r0, r4
 80093c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ca:	3a30      	subs	r2, #48	; 0x30
 80093cc:	2a09      	cmp	r2, #9
 80093ce:	d903      	bls.n	80093d8 <_vfiprintf_r+0x1d0>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0c6      	beq.n	8009362 <_vfiprintf_r+0x15a>
 80093d4:	9105      	str	r1, [sp, #20]
 80093d6:	e7c4      	b.n	8009362 <_vfiprintf_r+0x15a>
 80093d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093dc:	4604      	mov	r4, r0
 80093de:	2301      	movs	r3, #1
 80093e0:	e7f0      	b.n	80093c4 <_vfiprintf_r+0x1bc>
 80093e2:	ab03      	add	r3, sp, #12
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	462a      	mov	r2, r5
 80093e8:	4b12      	ldr	r3, [pc, #72]	; (8009434 <_vfiprintf_r+0x22c>)
 80093ea:	a904      	add	r1, sp, #16
 80093ec:	4630      	mov	r0, r6
 80093ee:	f3af 8000 	nop.w
 80093f2:	4607      	mov	r7, r0
 80093f4:	1c78      	adds	r0, r7, #1
 80093f6:	d1d6      	bne.n	80093a6 <_vfiprintf_r+0x19e>
 80093f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093fa:	07d9      	lsls	r1, r3, #31
 80093fc:	d405      	bmi.n	800940a <_vfiprintf_r+0x202>
 80093fe:	89ab      	ldrh	r3, [r5, #12]
 8009400:	059a      	lsls	r2, r3, #22
 8009402:	d402      	bmi.n	800940a <_vfiprintf_r+0x202>
 8009404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009406:	f7ff fddb 	bl	8008fc0 <__retarget_lock_release_recursive>
 800940a:	89ab      	ldrh	r3, [r5, #12]
 800940c:	065b      	lsls	r3, r3, #25
 800940e:	f53f af1d 	bmi.w	800924c <_vfiprintf_r+0x44>
 8009412:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009414:	e71c      	b.n	8009250 <_vfiprintf_r+0x48>
 8009416:	ab03      	add	r3, sp, #12
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	462a      	mov	r2, r5
 800941c:	4b05      	ldr	r3, [pc, #20]	; (8009434 <_vfiprintf_r+0x22c>)
 800941e:	a904      	add	r1, sp, #16
 8009420:	4630      	mov	r0, r6
 8009422:	f000 f879 	bl	8009518 <_printf_i>
 8009426:	e7e4      	b.n	80093f2 <_vfiprintf_r+0x1ea>
 8009428:	08009bb4 	.word	0x08009bb4
 800942c:	08009bbe 	.word	0x08009bbe
 8009430:	00000000 	.word	0x00000000
 8009434:	080091e3 	.word	0x080091e3
 8009438:	08009bba 	.word	0x08009bba

0800943c <_printf_common>:
 800943c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009440:	4616      	mov	r6, r2
 8009442:	4699      	mov	r9, r3
 8009444:	688a      	ldr	r2, [r1, #8]
 8009446:	690b      	ldr	r3, [r1, #16]
 8009448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800944c:	4293      	cmp	r3, r2
 800944e:	bfb8      	it	lt
 8009450:	4613      	movlt	r3, r2
 8009452:	6033      	str	r3, [r6, #0]
 8009454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009458:	4607      	mov	r7, r0
 800945a:	460c      	mov	r4, r1
 800945c:	b10a      	cbz	r2, 8009462 <_printf_common+0x26>
 800945e:	3301      	adds	r3, #1
 8009460:	6033      	str	r3, [r6, #0]
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	0699      	lsls	r1, r3, #26
 8009466:	bf42      	ittt	mi
 8009468:	6833      	ldrmi	r3, [r6, #0]
 800946a:	3302      	addmi	r3, #2
 800946c:	6033      	strmi	r3, [r6, #0]
 800946e:	6825      	ldr	r5, [r4, #0]
 8009470:	f015 0506 	ands.w	r5, r5, #6
 8009474:	d106      	bne.n	8009484 <_printf_common+0x48>
 8009476:	f104 0a19 	add.w	sl, r4, #25
 800947a:	68e3      	ldr	r3, [r4, #12]
 800947c:	6832      	ldr	r2, [r6, #0]
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	42ab      	cmp	r3, r5
 8009482:	dc26      	bgt.n	80094d2 <_printf_common+0x96>
 8009484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009488:	1e13      	subs	r3, r2, #0
 800948a:	6822      	ldr	r2, [r4, #0]
 800948c:	bf18      	it	ne
 800948e:	2301      	movne	r3, #1
 8009490:	0692      	lsls	r2, r2, #26
 8009492:	d42b      	bmi.n	80094ec <_printf_common+0xb0>
 8009494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009498:	4649      	mov	r1, r9
 800949a:	4638      	mov	r0, r7
 800949c:	47c0      	blx	r8
 800949e:	3001      	adds	r0, #1
 80094a0:	d01e      	beq.n	80094e0 <_printf_common+0xa4>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	6922      	ldr	r2, [r4, #16]
 80094a6:	f003 0306 	and.w	r3, r3, #6
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	bf02      	ittt	eq
 80094ae:	68e5      	ldreq	r5, [r4, #12]
 80094b0:	6833      	ldreq	r3, [r6, #0]
 80094b2:	1aed      	subeq	r5, r5, r3
 80094b4:	68a3      	ldr	r3, [r4, #8]
 80094b6:	bf0c      	ite	eq
 80094b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094bc:	2500      	movne	r5, #0
 80094be:	4293      	cmp	r3, r2
 80094c0:	bfc4      	itt	gt
 80094c2:	1a9b      	subgt	r3, r3, r2
 80094c4:	18ed      	addgt	r5, r5, r3
 80094c6:	2600      	movs	r6, #0
 80094c8:	341a      	adds	r4, #26
 80094ca:	42b5      	cmp	r5, r6
 80094cc:	d11a      	bne.n	8009504 <_printf_common+0xc8>
 80094ce:	2000      	movs	r0, #0
 80094d0:	e008      	b.n	80094e4 <_printf_common+0xa8>
 80094d2:	2301      	movs	r3, #1
 80094d4:	4652      	mov	r2, sl
 80094d6:	4649      	mov	r1, r9
 80094d8:	4638      	mov	r0, r7
 80094da:	47c0      	blx	r8
 80094dc:	3001      	adds	r0, #1
 80094de:	d103      	bne.n	80094e8 <_printf_common+0xac>
 80094e0:	f04f 30ff 	mov.w	r0, #4294967295
 80094e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e8:	3501      	adds	r5, #1
 80094ea:	e7c6      	b.n	800947a <_printf_common+0x3e>
 80094ec:	18e1      	adds	r1, r4, r3
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	2030      	movs	r0, #48	; 0x30
 80094f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094f6:	4422      	add	r2, r4
 80094f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009500:	3302      	adds	r3, #2
 8009502:	e7c7      	b.n	8009494 <_printf_common+0x58>
 8009504:	2301      	movs	r3, #1
 8009506:	4622      	mov	r2, r4
 8009508:	4649      	mov	r1, r9
 800950a:	4638      	mov	r0, r7
 800950c:	47c0      	blx	r8
 800950e:	3001      	adds	r0, #1
 8009510:	d0e6      	beq.n	80094e0 <_printf_common+0xa4>
 8009512:	3601      	adds	r6, #1
 8009514:	e7d9      	b.n	80094ca <_printf_common+0x8e>
	...

08009518 <_printf_i>:
 8009518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	7e0f      	ldrb	r7, [r1, #24]
 800951e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009520:	2f78      	cmp	r7, #120	; 0x78
 8009522:	4691      	mov	r9, r2
 8009524:	4680      	mov	r8, r0
 8009526:	460c      	mov	r4, r1
 8009528:	469a      	mov	sl, r3
 800952a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800952e:	d807      	bhi.n	8009540 <_printf_i+0x28>
 8009530:	2f62      	cmp	r7, #98	; 0x62
 8009532:	d80a      	bhi.n	800954a <_printf_i+0x32>
 8009534:	2f00      	cmp	r7, #0
 8009536:	f000 80d4 	beq.w	80096e2 <_printf_i+0x1ca>
 800953a:	2f58      	cmp	r7, #88	; 0x58
 800953c:	f000 80c0 	beq.w	80096c0 <_printf_i+0x1a8>
 8009540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009548:	e03a      	b.n	80095c0 <_printf_i+0xa8>
 800954a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800954e:	2b15      	cmp	r3, #21
 8009550:	d8f6      	bhi.n	8009540 <_printf_i+0x28>
 8009552:	a101      	add	r1, pc, #4	; (adr r1, 8009558 <_printf_i+0x40>)
 8009554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009558:	080095b1 	.word	0x080095b1
 800955c:	080095c5 	.word	0x080095c5
 8009560:	08009541 	.word	0x08009541
 8009564:	08009541 	.word	0x08009541
 8009568:	08009541 	.word	0x08009541
 800956c:	08009541 	.word	0x08009541
 8009570:	080095c5 	.word	0x080095c5
 8009574:	08009541 	.word	0x08009541
 8009578:	08009541 	.word	0x08009541
 800957c:	08009541 	.word	0x08009541
 8009580:	08009541 	.word	0x08009541
 8009584:	080096c9 	.word	0x080096c9
 8009588:	080095f1 	.word	0x080095f1
 800958c:	08009683 	.word	0x08009683
 8009590:	08009541 	.word	0x08009541
 8009594:	08009541 	.word	0x08009541
 8009598:	080096eb 	.word	0x080096eb
 800959c:	08009541 	.word	0x08009541
 80095a0:	080095f1 	.word	0x080095f1
 80095a4:	08009541 	.word	0x08009541
 80095a8:	08009541 	.word	0x08009541
 80095ac:	0800968b 	.word	0x0800968b
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	602a      	str	r2, [r5, #0]
 80095b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c0:	2301      	movs	r3, #1
 80095c2:	e09f      	b.n	8009704 <_printf_i+0x1ec>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	682b      	ldr	r3, [r5, #0]
 80095c8:	0607      	lsls	r7, r0, #24
 80095ca:	f103 0104 	add.w	r1, r3, #4
 80095ce:	6029      	str	r1, [r5, #0]
 80095d0:	d501      	bpl.n	80095d6 <_printf_i+0xbe>
 80095d2:	681e      	ldr	r6, [r3, #0]
 80095d4:	e003      	b.n	80095de <_printf_i+0xc6>
 80095d6:	0646      	lsls	r6, r0, #25
 80095d8:	d5fb      	bpl.n	80095d2 <_printf_i+0xba>
 80095da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095de:	2e00      	cmp	r6, #0
 80095e0:	da03      	bge.n	80095ea <_printf_i+0xd2>
 80095e2:	232d      	movs	r3, #45	; 0x2d
 80095e4:	4276      	negs	r6, r6
 80095e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ea:	485a      	ldr	r0, [pc, #360]	; (8009754 <_printf_i+0x23c>)
 80095ec:	230a      	movs	r3, #10
 80095ee:	e012      	b.n	8009616 <_printf_i+0xfe>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	6820      	ldr	r0, [r4, #0]
 80095f4:	1d19      	adds	r1, r3, #4
 80095f6:	6029      	str	r1, [r5, #0]
 80095f8:	0605      	lsls	r5, r0, #24
 80095fa:	d501      	bpl.n	8009600 <_printf_i+0xe8>
 80095fc:	681e      	ldr	r6, [r3, #0]
 80095fe:	e002      	b.n	8009606 <_printf_i+0xee>
 8009600:	0641      	lsls	r1, r0, #25
 8009602:	d5fb      	bpl.n	80095fc <_printf_i+0xe4>
 8009604:	881e      	ldrh	r6, [r3, #0]
 8009606:	4853      	ldr	r0, [pc, #332]	; (8009754 <_printf_i+0x23c>)
 8009608:	2f6f      	cmp	r7, #111	; 0x6f
 800960a:	bf0c      	ite	eq
 800960c:	2308      	moveq	r3, #8
 800960e:	230a      	movne	r3, #10
 8009610:	2100      	movs	r1, #0
 8009612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009616:	6865      	ldr	r5, [r4, #4]
 8009618:	60a5      	str	r5, [r4, #8]
 800961a:	2d00      	cmp	r5, #0
 800961c:	bfa2      	ittt	ge
 800961e:	6821      	ldrge	r1, [r4, #0]
 8009620:	f021 0104 	bicge.w	r1, r1, #4
 8009624:	6021      	strge	r1, [r4, #0]
 8009626:	b90e      	cbnz	r6, 800962c <_printf_i+0x114>
 8009628:	2d00      	cmp	r5, #0
 800962a:	d04b      	beq.n	80096c4 <_printf_i+0x1ac>
 800962c:	4615      	mov	r5, r2
 800962e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009632:	fb03 6711 	mls	r7, r3, r1, r6
 8009636:	5dc7      	ldrb	r7, [r0, r7]
 8009638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800963c:	4637      	mov	r7, r6
 800963e:	42bb      	cmp	r3, r7
 8009640:	460e      	mov	r6, r1
 8009642:	d9f4      	bls.n	800962e <_printf_i+0x116>
 8009644:	2b08      	cmp	r3, #8
 8009646:	d10b      	bne.n	8009660 <_printf_i+0x148>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	07de      	lsls	r6, r3, #31
 800964c:	d508      	bpl.n	8009660 <_printf_i+0x148>
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	6861      	ldr	r1, [r4, #4]
 8009652:	4299      	cmp	r1, r3
 8009654:	bfde      	ittt	le
 8009656:	2330      	movle	r3, #48	; 0x30
 8009658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800965c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009660:	1b52      	subs	r2, r2, r5
 8009662:	6122      	str	r2, [r4, #16]
 8009664:	f8cd a000 	str.w	sl, [sp]
 8009668:	464b      	mov	r3, r9
 800966a:	aa03      	add	r2, sp, #12
 800966c:	4621      	mov	r1, r4
 800966e:	4640      	mov	r0, r8
 8009670:	f7ff fee4 	bl	800943c <_printf_common>
 8009674:	3001      	adds	r0, #1
 8009676:	d14a      	bne.n	800970e <_printf_i+0x1f6>
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	b004      	add	sp, #16
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	f043 0320 	orr.w	r3, r3, #32
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	4833      	ldr	r0, [pc, #204]	; (8009758 <_printf_i+0x240>)
 800968c:	2778      	movs	r7, #120	; 0x78
 800968e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	6829      	ldr	r1, [r5, #0]
 8009696:	061f      	lsls	r7, r3, #24
 8009698:	f851 6b04 	ldr.w	r6, [r1], #4
 800969c:	d402      	bmi.n	80096a4 <_printf_i+0x18c>
 800969e:	065f      	lsls	r7, r3, #25
 80096a0:	bf48      	it	mi
 80096a2:	b2b6      	uxthmi	r6, r6
 80096a4:	07df      	lsls	r7, r3, #31
 80096a6:	bf48      	it	mi
 80096a8:	f043 0320 	orrmi.w	r3, r3, #32
 80096ac:	6029      	str	r1, [r5, #0]
 80096ae:	bf48      	it	mi
 80096b0:	6023      	strmi	r3, [r4, #0]
 80096b2:	b91e      	cbnz	r6, 80096bc <_printf_i+0x1a4>
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	f023 0320 	bic.w	r3, r3, #32
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2310      	movs	r3, #16
 80096be:	e7a7      	b.n	8009610 <_printf_i+0xf8>
 80096c0:	4824      	ldr	r0, [pc, #144]	; (8009754 <_printf_i+0x23c>)
 80096c2:	e7e4      	b.n	800968e <_printf_i+0x176>
 80096c4:	4615      	mov	r5, r2
 80096c6:	e7bd      	b.n	8009644 <_printf_i+0x12c>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	6826      	ldr	r6, [r4, #0]
 80096cc:	6961      	ldr	r1, [r4, #20]
 80096ce:	1d18      	adds	r0, r3, #4
 80096d0:	6028      	str	r0, [r5, #0]
 80096d2:	0635      	lsls	r5, r6, #24
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	d501      	bpl.n	80096dc <_printf_i+0x1c4>
 80096d8:	6019      	str	r1, [r3, #0]
 80096da:	e002      	b.n	80096e2 <_printf_i+0x1ca>
 80096dc:	0670      	lsls	r0, r6, #25
 80096de:	d5fb      	bpl.n	80096d8 <_printf_i+0x1c0>
 80096e0:	8019      	strh	r1, [r3, #0]
 80096e2:	2300      	movs	r3, #0
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	4615      	mov	r5, r2
 80096e8:	e7bc      	b.n	8009664 <_printf_i+0x14c>
 80096ea:	682b      	ldr	r3, [r5, #0]
 80096ec:	1d1a      	adds	r2, r3, #4
 80096ee:	602a      	str	r2, [r5, #0]
 80096f0:	681d      	ldr	r5, [r3, #0]
 80096f2:	6862      	ldr	r2, [r4, #4]
 80096f4:	2100      	movs	r1, #0
 80096f6:	4628      	mov	r0, r5
 80096f8:	f7f6 fd6a 	bl	80001d0 <memchr>
 80096fc:	b108      	cbz	r0, 8009702 <_printf_i+0x1ea>
 80096fe:	1b40      	subs	r0, r0, r5
 8009700:	6060      	str	r0, [r4, #4]
 8009702:	6863      	ldr	r3, [r4, #4]
 8009704:	6123      	str	r3, [r4, #16]
 8009706:	2300      	movs	r3, #0
 8009708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800970c:	e7aa      	b.n	8009664 <_printf_i+0x14c>
 800970e:	6923      	ldr	r3, [r4, #16]
 8009710:	462a      	mov	r2, r5
 8009712:	4649      	mov	r1, r9
 8009714:	4640      	mov	r0, r8
 8009716:	47d0      	blx	sl
 8009718:	3001      	adds	r0, #1
 800971a:	d0ad      	beq.n	8009678 <_printf_i+0x160>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	079b      	lsls	r3, r3, #30
 8009720:	d413      	bmi.n	800974a <_printf_i+0x232>
 8009722:	68e0      	ldr	r0, [r4, #12]
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	4298      	cmp	r0, r3
 8009728:	bfb8      	it	lt
 800972a:	4618      	movlt	r0, r3
 800972c:	e7a6      	b.n	800967c <_printf_i+0x164>
 800972e:	2301      	movs	r3, #1
 8009730:	4632      	mov	r2, r6
 8009732:	4649      	mov	r1, r9
 8009734:	4640      	mov	r0, r8
 8009736:	47d0      	blx	sl
 8009738:	3001      	adds	r0, #1
 800973a:	d09d      	beq.n	8009678 <_printf_i+0x160>
 800973c:	3501      	adds	r5, #1
 800973e:	68e3      	ldr	r3, [r4, #12]
 8009740:	9903      	ldr	r1, [sp, #12]
 8009742:	1a5b      	subs	r3, r3, r1
 8009744:	42ab      	cmp	r3, r5
 8009746:	dcf2      	bgt.n	800972e <_printf_i+0x216>
 8009748:	e7eb      	b.n	8009722 <_printf_i+0x20a>
 800974a:	2500      	movs	r5, #0
 800974c:	f104 0619 	add.w	r6, r4, #25
 8009750:	e7f5      	b.n	800973e <_printf_i+0x226>
 8009752:	bf00      	nop
 8009754:	08009bc5 	.word	0x08009bc5
 8009758:	08009bd6 	.word	0x08009bd6

0800975c <__sflush_r>:
 800975c:	898a      	ldrh	r2, [r1, #12]
 800975e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009762:	4605      	mov	r5, r0
 8009764:	0710      	lsls	r0, r2, #28
 8009766:	460c      	mov	r4, r1
 8009768:	d458      	bmi.n	800981c <__sflush_r+0xc0>
 800976a:	684b      	ldr	r3, [r1, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	dc05      	bgt.n	800977c <__sflush_r+0x20>
 8009770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	dc02      	bgt.n	800977c <__sflush_r+0x20>
 8009776:	2000      	movs	r0, #0
 8009778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800977e:	2e00      	cmp	r6, #0
 8009780:	d0f9      	beq.n	8009776 <__sflush_r+0x1a>
 8009782:	2300      	movs	r3, #0
 8009784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009788:	682f      	ldr	r7, [r5, #0]
 800978a:	6a21      	ldr	r1, [r4, #32]
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	d032      	beq.n	80097f6 <__sflush_r+0x9a>
 8009790:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	075a      	lsls	r2, r3, #29
 8009796:	d505      	bpl.n	80097a4 <__sflush_r+0x48>
 8009798:	6863      	ldr	r3, [r4, #4]
 800979a:	1ac0      	subs	r0, r0, r3
 800979c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800979e:	b10b      	cbz	r3, 80097a4 <__sflush_r+0x48>
 80097a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097a2:	1ac0      	subs	r0, r0, r3
 80097a4:	2300      	movs	r3, #0
 80097a6:	4602      	mov	r2, r0
 80097a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097aa:	6a21      	ldr	r1, [r4, #32]
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b0      	blx	r6
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	d106      	bne.n	80097c4 <__sflush_r+0x68>
 80097b6:	6829      	ldr	r1, [r5, #0]
 80097b8:	291d      	cmp	r1, #29
 80097ba:	d82b      	bhi.n	8009814 <__sflush_r+0xb8>
 80097bc:	4a29      	ldr	r2, [pc, #164]	; (8009864 <__sflush_r+0x108>)
 80097be:	410a      	asrs	r2, r1
 80097c0:	07d6      	lsls	r6, r2, #31
 80097c2:	d427      	bmi.n	8009814 <__sflush_r+0xb8>
 80097c4:	2200      	movs	r2, #0
 80097c6:	6062      	str	r2, [r4, #4]
 80097c8:	04d9      	lsls	r1, r3, #19
 80097ca:	6922      	ldr	r2, [r4, #16]
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	d504      	bpl.n	80097da <__sflush_r+0x7e>
 80097d0:	1c42      	adds	r2, r0, #1
 80097d2:	d101      	bne.n	80097d8 <__sflush_r+0x7c>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b903      	cbnz	r3, 80097da <__sflush_r+0x7e>
 80097d8:	6560      	str	r0, [r4, #84]	; 0x54
 80097da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097dc:	602f      	str	r7, [r5, #0]
 80097de:	2900      	cmp	r1, #0
 80097e0:	d0c9      	beq.n	8009776 <__sflush_r+0x1a>
 80097e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097e6:	4299      	cmp	r1, r3
 80097e8:	d002      	beq.n	80097f0 <__sflush_r+0x94>
 80097ea:	4628      	mov	r0, r5
 80097ec:	f7ff fbea 	bl	8008fc4 <_free_r>
 80097f0:	2000      	movs	r0, #0
 80097f2:	6360      	str	r0, [r4, #52]	; 0x34
 80097f4:	e7c0      	b.n	8009778 <__sflush_r+0x1c>
 80097f6:	2301      	movs	r3, #1
 80097f8:	4628      	mov	r0, r5
 80097fa:	47b0      	blx	r6
 80097fc:	1c41      	adds	r1, r0, #1
 80097fe:	d1c8      	bne.n	8009792 <__sflush_r+0x36>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0c5      	beq.n	8009792 <__sflush_r+0x36>
 8009806:	2b1d      	cmp	r3, #29
 8009808:	d001      	beq.n	800980e <__sflush_r+0xb2>
 800980a:	2b16      	cmp	r3, #22
 800980c:	d101      	bne.n	8009812 <__sflush_r+0xb6>
 800980e:	602f      	str	r7, [r5, #0]
 8009810:	e7b1      	b.n	8009776 <__sflush_r+0x1a>
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009818:	81a3      	strh	r3, [r4, #12]
 800981a:	e7ad      	b.n	8009778 <__sflush_r+0x1c>
 800981c:	690f      	ldr	r7, [r1, #16]
 800981e:	2f00      	cmp	r7, #0
 8009820:	d0a9      	beq.n	8009776 <__sflush_r+0x1a>
 8009822:	0793      	lsls	r3, r2, #30
 8009824:	680e      	ldr	r6, [r1, #0]
 8009826:	bf08      	it	eq
 8009828:	694b      	ldreq	r3, [r1, #20]
 800982a:	600f      	str	r7, [r1, #0]
 800982c:	bf18      	it	ne
 800982e:	2300      	movne	r3, #0
 8009830:	eba6 0807 	sub.w	r8, r6, r7
 8009834:	608b      	str	r3, [r1, #8]
 8009836:	f1b8 0f00 	cmp.w	r8, #0
 800983a:	dd9c      	ble.n	8009776 <__sflush_r+0x1a>
 800983c:	6a21      	ldr	r1, [r4, #32]
 800983e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009840:	4643      	mov	r3, r8
 8009842:	463a      	mov	r2, r7
 8009844:	4628      	mov	r0, r5
 8009846:	47b0      	blx	r6
 8009848:	2800      	cmp	r0, #0
 800984a:	dc06      	bgt.n	800985a <__sflush_r+0xfe>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009852:	81a3      	strh	r3, [r4, #12]
 8009854:	f04f 30ff 	mov.w	r0, #4294967295
 8009858:	e78e      	b.n	8009778 <__sflush_r+0x1c>
 800985a:	4407      	add	r7, r0
 800985c:	eba8 0800 	sub.w	r8, r8, r0
 8009860:	e7e9      	b.n	8009836 <__sflush_r+0xda>
 8009862:	bf00      	nop
 8009864:	dfbffffe 	.word	0xdfbffffe

08009868 <_fflush_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	690b      	ldr	r3, [r1, #16]
 800986c:	4605      	mov	r5, r0
 800986e:	460c      	mov	r4, r1
 8009870:	b913      	cbnz	r3, 8009878 <_fflush_r+0x10>
 8009872:	2500      	movs	r5, #0
 8009874:	4628      	mov	r0, r5
 8009876:	bd38      	pop	{r3, r4, r5, pc}
 8009878:	b118      	cbz	r0, 8009882 <_fflush_r+0x1a>
 800987a:	6a03      	ldr	r3, [r0, #32]
 800987c:	b90b      	cbnz	r3, 8009882 <_fflush_r+0x1a>
 800987e:	f7ff fa99 	bl	8008db4 <__sinit>
 8009882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0f3      	beq.n	8009872 <_fflush_r+0xa>
 800988a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800988c:	07d0      	lsls	r0, r2, #31
 800988e:	d404      	bmi.n	800989a <_fflush_r+0x32>
 8009890:	0599      	lsls	r1, r3, #22
 8009892:	d402      	bmi.n	800989a <_fflush_r+0x32>
 8009894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009896:	f7ff fb92 	bl	8008fbe <__retarget_lock_acquire_recursive>
 800989a:	4628      	mov	r0, r5
 800989c:	4621      	mov	r1, r4
 800989e:	f7ff ff5d 	bl	800975c <__sflush_r>
 80098a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098a4:	07da      	lsls	r2, r3, #31
 80098a6:	4605      	mov	r5, r0
 80098a8:	d4e4      	bmi.n	8009874 <_fflush_r+0xc>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	059b      	lsls	r3, r3, #22
 80098ae:	d4e1      	bmi.n	8009874 <_fflush_r+0xc>
 80098b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098b2:	f7ff fb85 	bl	8008fc0 <__retarget_lock_release_recursive>
 80098b6:	e7dd      	b.n	8009874 <_fflush_r+0xc>

080098b8 <__swbuf_r>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	460e      	mov	r6, r1
 80098bc:	4614      	mov	r4, r2
 80098be:	4605      	mov	r5, r0
 80098c0:	b118      	cbz	r0, 80098ca <__swbuf_r+0x12>
 80098c2:	6a03      	ldr	r3, [r0, #32]
 80098c4:	b90b      	cbnz	r3, 80098ca <__swbuf_r+0x12>
 80098c6:	f7ff fa75 	bl	8008db4 <__sinit>
 80098ca:	69a3      	ldr	r3, [r4, #24]
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	071a      	lsls	r2, r3, #28
 80098d2:	d525      	bpl.n	8009920 <__swbuf_r+0x68>
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	b31b      	cbz	r3, 8009920 <__swbuf_r+0x68>
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	6922      	ldr	r2, [r4, #16]
 80098dc:	1a98      	subs	r0, r3, r2
 80098de:	6963      	ldr	r3, [r4, #20]
 80098e0:	b2f6      	uxtb	r6, r6
 80098e2:	4283      	cmp	r3, r0
 80098e4:	4637      	mov	r7, r6
 80098e6:	dc04      	bgt.n	80098f2 <__swbuf_r+0x3a>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	f7ff ffbc 	bl	8009868 <_fflush_r>
 80098f0:	b9e0      	cbnz	r0, 800992c <__swbuf_r+0x74>
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	60a3      	str	r3, [r4, #8]
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	6022      	str	r2, [r4, #0]
 80098fe:	701e      	strb	r6, [r3, #0]
 8009900:	6962      	ldr	r2, [r4, #20]
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	429a      	cmp	r2, r3
 8009906:	d004      	beq.n	8009912 <__swbuf_r+0x5a>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	07db      	lsls	r3, r3, #31
 800990c:	d506      	bpl.n	800991c <__swbuf_r+0x64>
 800990e:	2e0a      	cmp	r6, #10
 8009910:	d104      	bne.n	800991c <__swbuf_r+0x64>
 8009912:	4621      	mov	r1, r4
 8009914:	4628      	mov	r0, r5
 8009916:	f7ff ffa7 	bl	8009868 <_fflush_r>
 800991a:	b938      	cbnz	r0, 800992c <__swbuf_r+0x74>
 800991c:	4638      	mov	r0, r7
 800991e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009920:	4621      	mov	r1, r4
 8009922:	4628      	mov	r0, r5
 8009924:	f000 f806 	bl	8009934 <__swsetup_r>
 8009928:	2800      	cmp	r0, #0
 800992a:	d0d5      	beq.n	80098d8 <__swbuf_r+0x20>
 800992c:	f04f 37ff 	mov.w	r7, #4294967295
 8009930:	e7f4      	b.n	800991c <__swbuf_r+0x64>
	...

08009934 <__swsetup_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4b2a      	ldr	r3, [pc, #168]	; (80099e0 <__swsetup_r+0xac>)
 8009938:	4605      	mov	r5, r0
 800993a:	6818      	ldr	r0, [r3, #0]
 800993c:	460c      	mov	r4, r1
 800993e:	b118      	cbz	r0, 8009948 <__swsetup_r+0x14>
 8009940:	6a03      	ldr	r3, [r0, #32]
 8009942:	b90b      	cbnz	r3, 8009948 <__swsetup_r+0x14>
 8009944:	f7ff fa36 	bl	8008db4 <__sinit>
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800994e:	0718      	lsls	r0, r3, #28
 8009950:	d422      	bmi.n	8009998 <__swsetup_r+0x64>
 8009952:	06d9      	lsls	r1, r3, #27
 8009954:	d407      	bmi.n	8009966 <__swsetup_r+0x32>
 8009956:	2309      	movs	r3, #9
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	f04f 30ff 	mov.w	r0, #4294967295
 8009964:	e034      	b.n	80099d0 <__swsetup_r+0x9c>
 8009966:	0758      	lsls	r0, r3, #29
 8009968:	d512      	bpl.n	8009990 <__swsetup_r+0x5c>
 800996a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800996c:	b141      	cbz	r1, 8009980 <__swsetup_r+0x4c>
 800996e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009972:	4299      	cmp	r1, r3
 8009974:	d002      	beq.n	800997c <__swsetup_r+0x48>
 8009976:	4628      	mov	r0, r5
 8009978:	f7ff fb24 	bl	8008fc4 <_free_r>
 800997c:	2300      	movs	r3, #0
 800997e:	6363      	str	r3, [r4, #52]	; 0x34
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	2300      	movs	r3, #0
 800998a:	6063      	str	r3, [r4, #4]
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f043 0308 	orr.w	r3, r3, #8
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	b94b      	cbnz	r3, 80099b0 <__swsetup_r+0x7c>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a6:	d003      	beq.n	80099b0 <__swsetup_r+0x7c>
 80099a8:	4621      	mov	r1, r4
 80099aa:	4628      	mov	r0, r5
 80099ac:	f000 f850 	bl	8009a50 <__smakebuf_r>
 80099b0:	89a0      	ldrh	r0, [r4, #12]
 80099b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099b6:	f010 0301 	ands.w	r3, r0, #1
 80099ba:	d00a      	beq.n	80099d2 <__swsetup_r+0x9e>
 80099bc:	2300      	movs	r3, #0
 80099be:	60a3      	str	r3, [r4, #8]
 80099c0:	6963      	ldr	r3, [r4, #20]
 80099c2:	425b      	negs	r3, r3
 80099c4:	61a3      	str	r3, [r4, #24]
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	b943      	cbnz	r3, 80099dc <__swsetup_r+0xa8>
 80099ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099ce:	d1c4      	bne.n	800995a <__swsetup_r+0x26>
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	0781      	lsls	r1, r0, #30
 80099d4:	bf58      	it	pl
 80099d6:	6963      	ldrpl	r3, [r4, #20]
 80099d8:	60a3      	str	r3, [r4, #8]
 80099da:	e7f4      	b.n	80099c6 <__swsetup_r+0x92>
 80099dc:	2000      	movs	r0, #0
 80099de:	e7f7      	b.n	80099d0 <__swsetup_r+0x9c>
 80099e0:	20000174 	.word	0x20000174

080099e4 <_sbrk_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d06      	ldr	r5, [pc, #24]	; (8009a00 <_sbrk_r+0x1c>)
 80099e8:	2300      	movs	r3, #0
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7f6 fdb8 	bl	8000564 <_sbrk>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_sbrk_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_sbrk_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	200014d0 	.word	0x200014d0

08009a04 <__swhatbuf_r>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	460c      	mov	r4, r1
 8009a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	b096      	sub	sp, #88	; 0x58
 8009a10:	4615      	mov	r5, r2
 8009a12:	461e      	mov	r6, r3
 8009a14:	da0d      	bge.n	8009a32 <__swhatbuf_r+0x2e>
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009a1c:	f04f 0100 	mov.w	r1, #0
 8009a20:	bf0c      	ite	eq
 8009a22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009a26:	2340      	movne	r3, #64	; 0x40
 8009a28:	2000      	movs	r0, #0
 8009a2a:	6031      	str	r1, [r6, #0]
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	b016      	add	sp, #88	; 0x58
 8009a30:	bd70      	pop	{r4, r5, r6, pc}
 8009a32:	466a      	mov	r2, sp
 8009a34:	f000 f848 	bl	8009ac8 <_fstat_r>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	dbec      	blt.n	8009a16 <__swhatbuf_r+0x12>
 8009a3c:	9901      	ldr	r1, [sp, #4]
 8009a3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009a42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009a46:	4259      	negs	r1, r3
 8009a48:	4159      	adcs	r1, r3
 8009a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a4e:	e7eb      	b.n	8009a28 <__swhatbuf_r+0x24>

08009a50 <__smakebuf_r>:
 8009a50:	898b      	ldrh	r3, [r1, #12]
 8009a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a54:	079d      	lsls	r5, r3, #30
 8009a56:	4606      	mov	r6, r0
 8009a58:	460c      	mov	r4, r1
 8009a5a:	d507      	bpl.n	8009a6c <__smakebuf_r+0x1c>
 8009a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	6123      	str	r3, [r4, #16]
 8009a64:	2301      	movs	r3, #1
 8009a66:	6163      	str	r3, [r4, #20]
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	ab01      	add	r3, sp, #4
 8009a6e:	466a      	mov	r2, sp
 8009a70:	f7ff ffc8 	bl	8009a04 <__swhatbuf_r>
 8009a74:	9900      	ldr	r1, [sp, #0]
 8009a76:	4605      	mov	r5, r0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7ff fb0f 	bl	800909c <_malloc_r>
 8009a7e:	b948      	cbnz	r0, 8009a94 <__smakebuf_r+0x44>
 8009a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d4ef      	bmi.n	8009a68 <__smakebuf_r+0x18>
 8009a88:	f023 0303 	bic.w	r3, r3, #3
 8009a8c:	f043 0302 	orr.w	r3, r3, #2
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	e7e3      	b.n	8009a5c <__smakebuf_r+0xc>
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	6020      	str	r0, [r4, #0]
 8009a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9c:	81a3      	strh	r3, [r4, #12]
 8009a9e:	9b00      	ldr	r3, [sp, #0]
 8009aa0:	6163      	str	r3, [r4, #20]
 8009aa2:	9b01      	ldr	r3, [sp, #4]
 8009aa4:	6120      	str	r0, [r4, #16]
 8009aa6:	b15b      	cbz	r3, 8009ac0 <__smakebuf_r+0x70>
 8009aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aac:	4630      	mov	r0, r6
 8009aae:	f000 f81d 	bl	8009aec <_isatty_r>
 8009ab2:	b128      	cbz	r0, 8009ac0 <__smakebuf_r+0x70>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	f043 0301 	orr.w	r3, r3, #1
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	431d      	orrs	r5, r3
 8009ac4:	81a5      	strh	r5, [r4, #12]
 8009ac6:	e7cf      	b.n	8009a68 <__smakebuf_r+0x18>

08009ac8 <_fstat_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d07      	ldr	r5, [pc, #28]	; (8009ae8 <_fstat_r+0x20>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	f7f6 fd1c 	bl	8000512 <_fstat>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d102      	bne.n	8009ae4 <_fstat_r+0x1c>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	b103      	cbz	r3, 8009ae4 <_fstat_r+0x1c>
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200014d0 	.word	0x200014d0

08009aec <_isatty_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	; (8009b08 <_isatty_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f6 fd1b 	bl	8000532 <_isatty>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_isatty_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_isatty_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	200014d0 	.word	0x200014d0

08009b0c <_init>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	bf00      	nop
 8009b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b12:	bc08      	pop	{r3}
 8009b14:	469e      	mov	lr, r3
 8009b16:	4770      	bx	lr

08009b18 <_fini>:
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1a:	bf00      	nop
 8009b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1e:	bc08      	pop	{r3}
 8009b20:	469e      	mov	lr, r3
 8009b22:	4770      	bx	lr
