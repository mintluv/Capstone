
L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d4  080093d4  0002011c  2**0
                  CONTENTS
  4 .ARM          00000000  080093d4  080093d4  0002011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093d4  080093d4  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080093dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          000012a0  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200013bc  200013bc  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015fc1  00000000  00000000  0002018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a1e  00000000  00000000  00036150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001118  00000000  00000000  00039b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cd1  00000000  00000000  0003ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000234ce  00000000  00000000  0003b959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ab66  00000000  00000000  0005ee27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5e03  00000000  00000000  0007998d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004328  00000000  00000000  0013f790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00143ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000011c 	.word	0x2000011c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009334 	.word	0x08009334

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000120 	.word	0x20000120
 80001c8:	08009334 	.word	0x08009334

080001cc <apInit>:
 */


#include "ap.h"

void apInit(void){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d8:	4770      	bx	lr

080001da <apMain>:

void apMain(void){
 80001da:	b580      	push	{r7, lr}
 80001dc:	b082      	sub	sp, #8
 80001de:	af00      	add	r7, sp, #0
  uint32_t pre_time;


  pre_time = millis();
 80001e0:	f000 f844 	bl	800026c <millis>
 80001e4:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 100)
 80001e6:	f000 f841 	bl	800026c <millis>
 80001ea:	4602      	mov	r2, r0
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	1ad3      	subs	r3, r2, r3
 80001f0:	2b63      	cmp	r3, #99	; 0x63
 80001f2:	d9f8      	bls.n	80001e6 <apMain+0xc>
    {
      pre_time = millis();
 80001f4:	f000 f83a 	bl	800026c <millis>
 80001f8:	6078      	str	r0, [r7, #4]
      ledToggle(0);
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 f9a6 	bl	800054c <ledToggle>
    if (millis()-pre_time >= 100)
 8000200:	e7f1      	b.n	80001e6 <apMain+0xc>
	...

08000204 <bspInit>:


#include "bsp.h"
#include "usb_device.h"

void bspInit(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
  HAL_Init();
 800020a:	f000 f9c3 	bl	8000594 <HAL_Init>
  SystemClock_Config();
 800020e:	f000 f834 	bl	800027a <SystemClock_Config>


    /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <bspInit+0x64>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000216:	4a14      	ldr	r2, [pc, #80]	; (8000268 <bspInit+0x64>)
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021e:	4b12      	ldr	r3, [pc, #72]	; (8000268 <bspInit+0x64>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000222:	f003 0304 	and.w	r3, r3, #4
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <bspInit+0x64>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <bspInit+0x64>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <bspInit+0x64>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <bspInit+0x64>)
 8000244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000246:	4a08      	ldr	r2, [pc, #32]	; (8000268 <bspInit+0x64>)
 8000248:	f043 0302 	orr.w	r3, r3, #2
 800024c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <bspInit+0x64>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000252:	f003 0302 	and.w	r3, r3, #2
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]
  MX_USB_DEVICE_Init();
 800025a:	f008 faab 	bl	80087b4 <MX_USB_DEVICE_Init>
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <millis>:

void delay(uint32_t ms){
  HAL_Delay(ms);
}

uint32_t millis(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000270:	f000 f9f8 	bl	8000664 <HAL_GetTick>
 8000274:	4603      	mov	r3, r0
}
 8000276:	4618      	mov	r0, r3
 8000278:	bd80      	pop	{r7, pc}

0800027a <SystemClock_Config>:




void SystemClock_Config(void)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	b096      	sub	sp, #88	; 0x58
 800027e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2244      	movs	r2, #68	; 0x44
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f009 f826 	bl	80092da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	463b      	mov	r3, r7
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800029c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002a0:	f002 faa4 	bl	80027ec <HAL_PWREx_ControlVoltageScaling>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002aa:	f000 f838 	bl	800031e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ae:	2310      	movs	r3, #16
 80002b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ba:	2360      	movs	r3, #96	; 0x60
 80002bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002c2:	2301      	movs	r3, #1
 80002c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002ca:	2328      	movs	r3, #40	; 0x28
 80002cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ce:	2307      	movs	r3, #7
 80002d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 faea 	bl	80028b8 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002ea:	f000 f818 	bl	800031e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2303      	movs	r3, #3
 80002f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000302:	463b      	mov	r3, r7
 8000304:	2104      	movs	r1, #4
 8000306:	4618      	mov	r0, r3
 8000308:	f002 feea 	bl	80030e0 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000312:	f000 f804 	bl	800031e <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3758      	adds	r7, #88	; 0x58
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000322:	b672      	cpsid	i
}
 8000324:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000326:	e7fe      	b.n	8000326 <Error_Handler+0x8>

08000328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <HAL_MspInit+0x44>)
 8000330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <HAL_MspInit+0x44>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6613      	str	r3, [r2, #96]	; 0x60
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <HAL_MspInit+0x44>)
 800033c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <HAL_MspInit+0x44>)
 8000348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800034a:	4a08      	ldr	r2, [pc, #32]	; (800036c <HAL_MspInit+0x44>)
 800034c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000350:	6593      	str	r3, [r2, #88]	; 0x58
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <HAL_MspInit+0x44>)
 8000354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000374:	e7fe      	b.n	8000374 <NMI_Handler+0x4>

08000376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <HardFault_Handler+0x4>

0800037c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <MemManage_Handler+0x4>

08000382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <BusFault_Handler+0x4>

08000388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <UsageFault_Handler+0x4>

0800038e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003bc:	f000 f93e 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80003c8:	4802      	ldr	r0, [pc, #8]	; (80003d4 <USART2_IRQHandler+0x10>)
 80003ca:	f003 fb5d 	bl	8003a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000138 	.word	0x20000138

080003d8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <USB_IRQHandler+0x10>)
 80003de:	f000 fda1 	bl	8000f24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000ea4 	.word	0x20000ea4

080003ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <SystemInit+0x20>)
 80003f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003f6:	4a05      	ldr	r2, [pc, #20]	; (800040c <SystemInit+0x20>)
 80003f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000448 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000414:	f7ff ffea 	bl	80003ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480c      	ldr	r0, [pc, #48]	; (800044c <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490d      	ldr	r1, [pc, #52]	; (8000450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0a      	ldr	r4, [pc, #40]	; (800045c <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800043e:	f008 ff55 	bl	80092ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000442:	f008 ff3f 	bl	80092c4 <main>

08000446 <LoopForever>:

LoopForever:
    b LoopForever
 8000446:	e7fe      	b.n	8000446 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000448:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800044c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000450:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000454:	080093dc 	.word	0x080093dc
  ldr r2, =_sbss
 8000458:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 800045c:	200013bc 	.word	0x200013bc

08000460 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000460:	e7fe      	b.n	8000460 <ADC1_IRQHandler>
	...

08000464 <ledInit>:
  {GPIOB,GPIO_PIN_1, GPIO_PIN_RESET,GPIO_PIN_SET},
};



bool ledInit(void){
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af00      	add	r7, sp, #0
  bool ret = true;
 800046a:	2301      	movs	r3, #1
 800046c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <ledInit+0xdc>)
 8000482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000484:	4a2e      	ldr	r2, [pc, #184]	; (8000540 <ledInit+0xdc>)
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <ledInit+0xdc>)
 800048e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <ledInit+0xdc>)
 800049a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049c:	4a28      	ldr	r2, [pc, #160]	; (8000540 <ledInit+0xdc>)
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <ledInit+0xdc>)
 80004a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b23      	ldr	r3, [pc, #140]	; (8000540 <ledInit+0xdc>)
 80004b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b4:	4a22      	ldr	r2, [pc, #136]	; (8000540 <ledInit+0xdc>)
 80004b6:	f043 0302 	orr.w	r3, r3, #2
 80004ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004bc:	4b20      	ldr	r3, [pc, #128]	; (8000540 <ledInit+0xdc>)
 80004be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c0:	f003 0302 	and.w	r3, r3, #2
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80004ce:	481d      	ldr	r0, [pc, #116]	; (8000544 <ledInit+0xe0>)
 80004d0:	f000 fbce 	bl	8000c70 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2103      	movs	r1, #3
 80004d8:	481b      	ldr	r0, [pc, #108]	; (8000548 <ledInit+0xe4>)
 80004da:	f000 fbc9 	bl	8000c70 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80004de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4813      	ldr	r0, [pc, #76]	; (8000544 <ledInit+0xe0>)
 80004f8:	f000 fa50 	bl	800099c <HAL_GPIO_Init>

    /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004fc:	2310      	movs	r3, #16
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f000 fa43 	bl	800099c <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000516:	2303      	movs	r3, #3
 8000518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	4619      	mov	r1, r3
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <ledInit+0xe4>)
 800052e:	f000 fa35 	bl	800099c <HAL_GPIO_Init>
  return ret;
 8000532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000536:	4618      	mov	r0, r3
 8000538:	3728      	adds	r7, #40	; 0x28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000
 8000544:	48000800 	.word	0x48000800
 8000548:	48000400 	.word	0x48000400

0800054c <ledToggle>:
void ledOff(uint8_t ch){
  if(ch >= LED_MAX_CH) return;
  HAL_GPIO_WritePin(led_tb1[ch].port, led_tb1[ch].Pin, led_tb1[ch].Off_State);
}

void ledToggle(uint8_t ch){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d80d      	bhi.n	8000578 <ledToggle+0x2c>
  HAL_GPIO_TogglePin(led_tb1[ch].port, led_tb1[ch].Pin);
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <ledToggle+0x34>)
 8000560:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4906      	ldr	r1, [pc, #24]	; (8000580 <ledToggle+0x34>)
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	440b      	add	r3, r1
 800056c:	889b      	ldrh	r3, [r3, #4]
 800056e:	4619      	mov	r1, r3
 8000570:	4610      	mov	r0, r2
 8000572:	f000 fb95 	bl	8000ca0 <HAL_GPIO_TogglePin>
 8000576:	e000      	b.n	800057a <ledToggle+0x2e>
  if(ch >= LED_MAX_CH) return;
 8000578:	bf00      	nop
}
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000004 	.word	0x20000004

08000584 <hwInit>:
 *  Created on: Mar 23, 2024
 *      Author: Min
 */
#include "hw.h"

void hwInit(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  bspInit();
 8000588:	f7ff fe3c 	bl	8000204 <bspInit>
  ledInit();
 800058c:	f7ff ff6a 	bl	8000464 <ledInit>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 f93c 	bl	800081c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f80d 	bl	80005c4 <HAL_InitTick>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005b0:	2301      	movs	r3, #1
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	e001      	b.n	80005ba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b6:	f7ff feb7 	bl	8000328 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ba:	79fb      	ldrb	r3, [r7, #7]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <HAL_InitTick+0x6c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d023      	beq.n	8000620 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_InitTick+0x70>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_InitTick+0x6c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f949 	bl	8000886 <HAL_SYSTICK_Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d10f      	bne.n	800061a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d809      	bhi.n	8000614 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f913 	bl	8000832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <HAL_InitTick+0x74>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	e007      	b.n	8000624 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	e004      	b.n	8000624 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e001      	b.n	8000624 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000018 	.word	0x20000018
 8000634:	20000000 	.word	0x20000000
 8000638:	20000014 	.word	0x20000014

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x20>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_IncTick+0x24>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <HAL_IncTick+0x24>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000018 	.word	0x20000018
 8000660:	200001c0 	.word	0x200001c0

08000664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <HAL_GetTick+0x14>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	200001c0 	.word	0x200001c0

0800067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__NVIC_GetPriorityGrouping+0x18>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	f003 0307 	and.w	r3, r3, #7
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db0b      	blt.n	800070a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f003 021f 	and.w	r2, r3, #31
 80006f8:	4907      	ldr	r1, [pc, #28]	; (8000718 <__NVIC_EnableIRQ+0x38>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	095b      	lsrs	r3, r3, #5
 8000700:	2001      	movs	r0, #1
 8000702:	fa00 f202 	lsl.w	r2, r0, r2
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	; (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e8:	d301      	bcc.n	80007ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00f      	b.n	800080e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <SysTick_Config+0x40>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f6:	210f      	movs	r1, #15
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f7ff ff8e 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <SysTick_Config+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <SysTick_Config+0x40>)
 8000808:	2207      	movs	r2, #7
 800080a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	e000e010 	.word	0xe000e010

0800081c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff29 	bl	800067c <__NVIC_SetPriorityGrouping>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b086      	sub	sp, #24
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000844:	f7ff ff3e 	bl	80006c4 <__NVIC_GetPriorityGrouping>
 8000848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	6978      	ldr	r0, [r7, #20]
 8000850:	f7ff ff8e 	bl	8000770 <NVIC_EncodePriority>
 8000854:	4602      	mov	r2, r0
 8000856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff5d 	bl	800071c <__NVIC_SetPriority>
}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff31 	bl	80006e0 <__NVIC_EnableIRQ>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ffa2 	bl	80007d8 <SysTick_Config>
 8000894:	4603      	mov	r3, r0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800089e:	b480      	push	{r7}
 80008a0:	b085      	sub	sp, #20
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d008      	beq.n	80008c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2204      	movs	r2, #4
 80008ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e022      	b.n	800090e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f022 020e 	bic.w	r2, r2, #14
 80008d6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f022 0201 	bic.w	r2, r2, #1
 80008e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ec:	f003 021c 	and.w	r2, r3, #28
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	2101      	movs	r1, #1
 80008f6:	fa01 f202 	lsl.w	r2, r1, r2
 80008fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2201      	movs	r2, #1
 8000900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800090c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b02      	cmp	r3, #2
 8000930:	d005      	beq.n	800093e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2204      	movs	r2, #4
 8000936:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e029      	b.n	8000992 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f022 020e 	bic.w	r2, r2, #14
 800094c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0201 	bic.w	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f003 021c 	and.w	r2, r3, #28
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	2101      	movs	r1, #1
 800096c:	fa01 f202 	lsl.w	r2, r1, r2
 8000970:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000986:	2b00      	cmp	r3, #0
 8000988:	d003      	beq.n	8000992 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	4798      	blx	r3
    }
  }
  return status;
 8000992:	7bfb      	ldrb	r3, [r7, #15]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009aa:	e148      	b.n	8000c3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 813a 	beq.w	8000c38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d005      	beq.n	80009dc <HAL_GPIO_Init+0x40>
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	f003 0201 	and.w	r2, r3, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d017      	beq.n	8000a7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d123      	bne.n	8000ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	08da      	lsrs	r2, r3, #3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0203 	and.w	r2, r3, #3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 8094 	beq.w	8000c38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b52      	ldr	r3, [pc, #328]	; (8000c5c <HAL_GPIO_Init+0x2c0>)
 8000b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b14:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <HAL_GPIO_Init+0x2c0>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1c:	4b4f      	ldr	r3, [pc, #316]	; (8000c5c <HAL_GPIO_Init+0x2c0>)
 8000b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b28:	4a4d      	ldr	r2, [pc, #308]	; (8000c60 <HAL_GPIO_Init+0x2c4>)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_Init+0x1d4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a43      	ldr	r2, [pc, #268]	; (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x1d0>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a42      	ldr	r2, [pc, #264]	; (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_Init+0x1cc>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e004      	b.n	8000b72 <HAL_GPIO_Init+0x1d6>
 8000b68:	2307      	movs	r3, #7
 8000b6a:	e002      	b.n	8000b72 <HAL_GPIO_Init+0x1d6>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <HAL_GPIO_Init+0x1d6>
 8000b70:	2300      	movs	r3, #0
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	f002 0203 	and.w	r2, r2, #3
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	4093      	lsls	r3, r2
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b82:	4937      	ldr	r1, [pc, #220]	; (8000c60 <HAL_GPIO_Init+0x2c4>)
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b90:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa22 f303 	lsr.w	r3, r2, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f47f aeaf 	bne.w	80009ac <HAL_GPIO_Init+0x10>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	371c      	adds	r7, #28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000
 8000c64:	48000400 	.word	0x48000400
 8000c68:	48000800 	.word	0x48000800
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	041a      	lsls	r2, r3, #16
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43d9      	mvns	r1, r3
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	619a      	str	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af06      	add	r7, sp, #24
 8000cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e0f8      	b.n	8000ed8 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d106      	bne.n	8000d00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f007 ff3c 	bl	8008b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2203      	movs	r2, #3
 8000d04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fa9b 	bl	8004248 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	687e      	ldr	r6, [r7, #4]
 8000d1a:	466d      	mov	r5, sp
 8000d1c:	f106 0410 	add.w	r4, r6, #16
 8000d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	602b      	str	r3, [r5, #0]
 8000d28:	1d33      	adds	r3, r6, #4
 8000d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f003 fa63 	bl	80041f8 <USB_CoreInit>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e0c9      	b.n	8000ed8 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fa97 	bl	800427e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e040      	b.n	8000dd8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	440b      	add	r3, r1
 8000d66:	3301      	adds	r3, #1
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	440b      	add	r3, r1
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	440b      	add	r3, r1
 8000d90:	3303      	adds	r3, #3
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d96:	7bfa      	ldrb	r2, [r7, #15]
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	440b      	add	r3, r1
 8000da4:	3338      	adds	r3, #56	; 0x38
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	333c      	adds	r3, #60	; 0x3c
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	440b      	add	r3, r1
 8000dcc:	3340      	adds	r3, #64	; 0x40
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	7bfa      	ldrb	r2, [r7, #15]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d3b9      	bcc.n	8000d56 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e044      	b.n	8000e72 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	440b      	add	r3, r1
 8000df6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e10:	7bfa      	ldrb	r2, [r7, #15]
 8000e12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	440b      	add	r3, r1
 8000e22:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e2a:	7bfa      	ldrb	r2, [r7, #15]
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	440b      	add	r3, r1
 8000e38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e40:	7bfa      	ldrb	r2, [r7, #15]
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	440b      	add	r3, r1
 8000e64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d3b5      	bcc.n	8000de8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	687e      	ldr	r6, [r7, #4]
 8000e84:	466d      	mov	r5, sp
 8000e86:	f106 0410 	add.w	r4, r6, #16
 8000e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	602b      	str	r3, [r5, #0]
 8000e92:	1d33      	adds	r3, r6, #4
 8000e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e96:	6838      	ldr	r0, [r7, #0]
 8000e98:	f003 f9fe 	bl	8004298 <USB_DevInit>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e014      	b.n	8000ed8 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d102      	bne.n	8000ecc <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f001 fc58 	bl	800277c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 fc8f 	bl	80067f4 <USB_DevDisconnect>

  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ee0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <HAL_PCD_Start+0x16>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e012      	b.n	8000f1c <HAL_PCD_Start+0x3c>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 f989 	bl	800421a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f005 fc5a 	bl	80067c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 fc74 	bl	800681e <USB_ReadInterrupts>
 8000f36:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fb13 	bl	800156e <PCD_EP_ISR_Handler>

    return;
 8000f48:	e110      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f66:	b292      	uxth	r2, r2
 8000f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f007 fea4 	bl	8008cba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f72:	2100      	movs	r1, #0
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f8fc 	bl	8001172 <HAL_PCD_SetAddress>

    return;
 8000f7a:	e0f7      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00c      	beq.n	8000fa0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f98:	b292      	uxth	r2, r2
 8000f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f9e:	e0e5      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00c      	beq.n	8000fc4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fbc:	b292      	uxth	r2, r2
 8000fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000fc2:	e0d3      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d034      	beq.n	8001038 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0204 	bic.w	r2, r2, #4
 8000fe0:	b292      	uxth	r2, r2
 8000fe2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0208 	bic.w	r2, r2, #8
 8000ff8:	b292      	uxth	r2, r2
 8000ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001004:	2b01      	cmp	r3, #1
 8001006:	d107      	bne.n	8001018 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f008 f902 	bl	800921c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f007 fe87 	bl	8008d2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001030:	b292      	uxth	r2, r2
 8001032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001036:	e099      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800103e:	2b00      	cmp	r3, #0
 8001040:	d027      	beq.n	8001092 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0208 	orr.w	r2, r2, #8
 8001054:	b292      	uxth	r2, r2
 8001056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800106c:	b292      	uxth	r2, r2
 800106e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0204 	orr.w	r2, r2, #4
 8001084:	b292      	uxth	r2, r2
 8001086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f007 fe34 	bl	8008cf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001090:	e06c      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001098:	2b00      	cmp	r3, #0
 800109a:	d040      	beq.n	800111e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ae:	b292      	uxth	r2, r2
 80010b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d12b      	bne.n	8001116 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	b292      	uxth	r2, r2
 80010d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0208 	orr.w	r2, r2, #8
 80010e8:	b292      	uxth	r2, r2
 80010ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80010fe:	b29b      	uxth	r3, r3
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800110c:	2101      	movs	r1, #1
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f008 f884 	bl	800921c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001114:	e02a      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f007 fdee 	bl	8008cf8 <HAL_PCD_SuspendCallback>
    return;
 800111c:	e026      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00f      	beq.n	8001148 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800113a:	b292      	uxth	r2, r2
 800113c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f007 fdac 	bl	8008c9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001146:	e011      	b.n	800116c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00c      	beq.n	800116c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800115a:	b29a      	uxth	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001164:	b292      	uxth	r2, r2
 8001166:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800116a:	bf00      	nop
  }
}
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_PCD_SetAddress+0x1a>
 8001188:	2302      	movs	r3, #2
 800118a:	e013      	b.n	80011b4 <HAL_PCD_SetAddress+0x42>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	78fa      	ldrb	r2, [r7, #3]
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	78fa      	ldrb	r2, [r7, #3]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 fafa 	bl	800679e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4608      	mov	r0, r1
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	70fb      	strb	r3, [r7, #3]
 80011ce:	460b      	mov	r3, r1
 80011d0:	803b      	strh	r3, [r7, #0]
 80011d2:	4613      	mov	r3, r2
 80011d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da0e      	bge.n	8001200 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	705a      	strb	r2, [r3, #1]
 80011fe:	e00e      	b.n	800121e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	f003 0207 	and.w	r2, r3, #7
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	b2da      	uxtb	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800122a:	883a      	ldrh	r2, [r7, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	78ba      	ldrb	r2, [r7, #2]
 8001234:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001236:	78bb      	ldrb	r3, [r7, #2]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d102      	bne.n	8001242 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_PCD_EP_Open+0x94>
 800124c:	2302      	movs	r3, #2
 800124e:	e00e      	b.n	800126e <HAL_PCD_EP_Open+0xb2>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	4618      	mov	r0, r3
 8001260:	f003 f83c 	bl	80042dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800126c:	7afb      	ldrb	r3, [r7, #11]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001286:	2b00      	cmp	r3, #0
 8001288:	da0e      	bge.n	80012a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	705a      	strb	r2, [r3, #1]
 80012a6:	e00e      	b.n	80012c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	f003 0207 	and.w	r2, r3, #7
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_PCD_EP_Close+0x6a>
 80012dc:	2302      	movs	r3, #2
 80012de:	e00e      	b.n	80012fe <HAL_PCD_EP_Close+0x88>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68f9      	ldr	r1, [r7, #12]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fbb8 	bl	8004a64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	460b      	mov	r3, r1
 8001314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	f003 0207 	and.w	r2, r3, #7
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2200      	movs	r2, #0
 8001344:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	b2da      	uxtb	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6979      	ldr	r1, [r7, #20]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fd70 	bl	8004e3e <USB_EPStartXfer>

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	f003 0207 	and.w	r2, r3, #7
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	460b      	mov	r3, r1
 80013a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2201      	movs	r2, #1
 80013e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6979      	ldr	r1, [r7, #20]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fd21 	bl	8004e3e <USB_EPStartXfer>

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f003 0207 	and.w	r2, r3, #7
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	d901      	bls.n	8001424 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e04c      	b.n	80014be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001428:	2b00      	cmp	r3, #0
 800142a:	da0e      	bge.n	800144a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2201      	movs	r2, #1
 8001446:	705a      	strb	r2, [r3, #1]
 8001448:	e00c      	b.n	8001464 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800144a:	78fa      	ldrb	r2, [r7, #3]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2201      	movs	r2, #1
 8001468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	b2da      	uxtb	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_PCD_EP_SetStall+0x7e>
 8001480:	2302      	movs	r3, #2
 8001482:	e01c      	b.n	80014be <HAL_PCD_EP_SetStall+0xb8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68f9      	ldr	r1, [r7, #12]
 8001492:	4618      	mov	r0, r3
 8001494:	f005 f884 	bl	80065a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d108      	bne.n	80014b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f005 f9c5 	bl	800683e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	460b      	mov	r3, r1
 80014d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 020f 	and.w	r2, r3, #15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d901      	bls.n	80014e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e040      	b.n	8001566 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da0e      	bge.n	800150a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2201      	movs	r2, #1
 8001506:	705a      	strb	r2, [r3, #1]
 8001508:	e00e      	b.n	8001528 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	f003 0207 	and.w	r2, r3, #7
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	b2da      	uxtb	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_PCD_EP_ClrStall+0x82>
 8001544:	2302      	movs	r3, #2
 8001546:	e00e      	b.n	8001566 <HAL_PCD_EP_ClrStall+0xa0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	4618      	mov	r0, r3
 8001558:	f005 f873 	bl	8006642 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b096      	sub	sp, #88	; 0x58
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001576:	e3b1      	b.n	8001cdc <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001580:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001592:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 8173 	bne.w	8001882 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800159c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d150      	bne.n	800164a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b8:	81fb      	strh	r3, [r7, #14]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3328      	adds	r3, #40	; 0x28
 80015d0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	441a      	add	r2, r3
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001608:	2100      	movs	r1, #0
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f007 fb2d 	bl	8008c6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 835f 	beq.w	8001cdc <PCD_EP_ISR_Handler+0x76e>
 800161e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 835a 	bne.w	8001cdc <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b292      	uxth	r2, r2
 800163c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001648:	e348      	b.n	8001cdc <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001650:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800165c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001664:	2b00      	cmp	r3, #0
 8001666:	d032      	beq.n	80016ce <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001670:	b29b      	uxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	4413      	add	r3, r2
 8001682:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800168c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800168e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800169e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f005 f919 	bl	80068da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016b4:	4013      	ands	r3, r2
 80016b6:	823b      	strh	r3, [r7, #16]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	8a3a      	ldrh	r2, [r7, #16]
 80016be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016c2:	b292      	uxth	r2, r2
 80016c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f007 faa2 	bl	8008c10 <HAL_PCD_SetupStageCallback>
 80016cc:	e306      	b.n	8001cdc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f280 8302 	bge.w	8001cdc <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016e4:	4013      	ands	r3, r2
 80016e6:	83fb      	strh	r3, [r7, #30]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	8bfa      	ldrh	r2, [r7, #30]
 80016ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016f2:	b292      	uxth	r2, r2
 80016f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800171a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800171e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d019      	beq.n	800175a <PCD_EP_ISR_Handler+0x1ec>
 8001726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d015      	beq.n	800175a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001734:	6959      	ldr	r1, [r3, #20]
 8001736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001738:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800173e:	b29b      	uxth	r3, r3
 8001740:	f005 f8cb 	bl	80068da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	441a      	add	r2, r3
 800174e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001750:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001752:	2100      	movs	r1, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f007 fa6d 	bl	8008c34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001764:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 82b5 	bne.w	8001cdc <PCD_EP_ISR_Handler+0x76e>
 8001772:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001776:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800177a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800177e:	f000 82ad 	beq.w	8001cdc <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001790:	b29b      	uxth	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	4413      	add	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	801a      	strh	r2, [r3, #0]
 80017b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b3e      	cmp	r3, #62	; 0x3e
 80017b8:	d91d      	bls.n	80017f6 <PCD_EP_ISR_Handler+0x288>
 80017ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	647b      	str	r3, [r7, #68]	; 0x44
 80017c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <PCD_EP_ISR_Handler+0x266>
 80017ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d0:	3b01      	subs	r3, #1
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017dc:	b29b      	uxth	r3, r3
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	801a      	strh	r2, [r3, #0]
 80017f4:	e026      	b.n	8001844 <PCD_EP_ISR_Handler+0x2d6>
 80017f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <PCD_EP_ISR_Handler+0x2a6>
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800180c:	b29a      	uxth	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	801a      	strh	r2, [r3, #0]
 8001812:	e017      	b.n	8001844 <PCD_EP_ISR_Handler+0x2d6>
 8001814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
 800181c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <PCD_EP_ISR_Handler+0x2c0>
 8001828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800182a:	3301      	adds	r3, #1
 800182c:	647b      	str	r3, [r7, #68]	; 0x44
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	b29a      	uxth	r2, r3
 8001834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001836:	b29b      	uxth	r3, r3
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	b29b      	uxth	r3, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	b29a      	uxth	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001854:	827b      	strh	r3, [r7, #18]
 8001856:	8a7b      	ldrh	r3, [r7, #18]
 8001858:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800185c:	827b      	strh	r3, [r7, #18]
 800185e:	8a7b      	ldrh	r3, [r7, #18]
 8001860:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001864:	827b      	strh	r3, [r7, #18]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	8a7b      	ldrh	r3, [r7, #18]
 800186c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187c:	b29b      	uxth	r3, r3
 800187e:	8013      	strh	r3, [r2, #0]
 8001880:	e22c      	b.n	8001cdc <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001896:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800189a:	2b00      	cmp	r3, #0
 800189c:	f280 80f6 	bge.w	8001a8c <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018b6:	4013      	ands	r3, r2
 80018b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80018ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018d2:	b292      	uxth	r2, r2
 80018d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018d6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ee:	7b1b      	ldrb	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d123      	bne.n	800193c <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	4413      	add	r3, r2
 800190e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001918:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800191c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 808e 	beq.w	8001a42 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	6959      	ldr	r1, [r3, #20]
 800192e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001930:	88da      	ldrh	r2, [r3, #6]
 8001932:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001936:	f004 ffd0 	bl	80068da <USB_ReadPMA>
 800193a:	e082      	b.n	8001a42 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	78db      	ldrb	r3, [r3, #3]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d10a      	bne.n	800195a <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001944:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001948:	461a      	mov	r2, r3
 800194a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f9d3 	bl	8001cf8 <HAL_PCD_EP_DB_Receive>
 8001952:	4603      	mov	r3, r0
 8001954:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001958:	e073      	b.n	8001a42 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001974:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	441a      	add	r2, r3
 8001986:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800198a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800198e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001996:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800199a:	b29b      	uxth	r3, r3
 800199c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d022      	beq.n	80019fe <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80019e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d02c      	beq.n	8001a42 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ee:	6959      	ldr	r1, [r3, #20]
 80019f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f2:	891a      	ldrh	r2, [r3, #8]
 80019f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019f8:	f004 ff6f 	bl	80068da <USB_ReadPMA>
 80019fc:	e021      	b.n	8001a42 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001a26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a34:	6959      	ldr	r1, [r3, #20]
 8001a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a38:	895a      	ldrh	r2, [r3, #10]
 8001a3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a3e:	f004 ff4c 	bl	80068da <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a4a:	441a      	add	r2, r3
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a58:	441a      	add	r2, r3
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <PCD_EP_ISR_Handler+0x504>
 8001a66:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d206      	bcs.n	8001a80 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f007 f8db 	bl	8008c34 <HAL_PCD_DataOutStageCallback>
 8001a7e:	e005      	b.n	8001a8c <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f9d9 	bl	8004e3e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8121 	beq.w	8001cdc <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	441a      	add	r2, r3
 8001ada:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aec:	78db      	ldrb	r3, [r3, #3]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f040 80a2 	bne.w	8001c38 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afc:	7b1b      	ldrb	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8093 	beq.w	8001c2a <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d046      	beq.n	8001b9e <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d126      	bne.n	8001b66 <PCD_EP_ISR_Handler+0x5f8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	4413      	add	r3, r2
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	00da      	lsls	r2, r3, #3
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	4413      	add	r3, r2
 8001b3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b3e:	623b      	str	r3, [r7, #32]
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	801a      	strh	r2, [r3, #0]
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	801a      	strh	r2, [r3, #0]
 8001b64:	e061      	b.n	8001c2a <PCD_EP_ISR_Handler+0x6bc>
 8001b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d15d      	bne.n	8001c2a <PCD_EP_ISR_Handler+0x6bc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	4413      	add	r3, r2
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	00da      	lsls	r2, r3, #3
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	4413      	add	r3, r2
 8001b90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	2200      	movs	r2, #0
 8001b9a:	801a      	strh	r2, [r3, #0]
 8001b9c:	e045      	b.n	8001c2a <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba6:	785b      	ldrb	r3, [r3, #1]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d126      	bne.n	8001bfa <PCD_EP_ISR_Handler+0x68c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc0:	4413      	add	r3, r2
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	00da      	lsls	r2, r3, #3
 8001bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bcc:	4413      	add	r3, r2
 8001bce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	801a      	strh	r2, [r3, #0]
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	801a      	strh	r2, [r3, #0]
 8001bf8:	e017      	b.n	8001c2a <PCD_EP_ISR_Handler+0x6bc>
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d113      	bne.n	8001c2a <PCD_EP_ISR_Handler+0x6bc>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c10:	4413      	add	r3, r2
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	00da      	lsls	r2, r3, #3
 8001c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c26:	2200      	movs	r2, #0
 8001c28:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f007 f81a 	bl	8008c6a <HAL_PCD_DataInStageCallback>
 8001c36:	e051      	b.n	8001cdc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001c38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d144      	bne.n	8001cce <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d907      	bls.n	8001c88 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c80:	1ad2      	subs	r2, r2, r3
 8001c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c84:	619a      	str	r2, [r3, #24]
 8001c86:	e002      	b.n	8001c8e <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f006 ffe4 	bl	8008c6a <HAL_PCD_DataInStageCallback>
 8001ca2:	e01b      	b.n	8001cdc <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cac:	441a      	add	r2, r3
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cba:	441a      	add	r2, r3
 8001cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cbe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f8b9 	bl	8004e3e <USB_EPStartXfer>
 8001ccc:	e006      	b.n	8001cdc <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001cce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f917 	bl	8001f0a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f6ff ac45 	blt.w	8001578 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3758      	adds	r7, #88	; 0x58
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d07c      	beq.n	8001e0a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	8b7b      	ldrh	r3, [r7, #26]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d306      	bcc.n	8001d4e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	8b7b      	ldrh	r3, [r7, #26]
 8001d46:	1ad2      	subs	r2, r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	619a      	str	r2, [r3, #24]
 8001d4c:	e002      	b.n	8001d54 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d123      	bne.n	8001da4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d76:	833b      	strh	r3, [r7, #24]
 8001d78:	8b3b      	ldrh	r3, [r7, #24]
 8001d7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d7e:	833b      	strh	r3, [r7, #24]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	441a      	add	r2, r3
 8001d8e:	8b3b      	ldrh	r3, [r7, #24]
 8001d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01f      	beq.n	8001dee <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc8:	82fb      	strh	r3, [r7, #22]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	441a      	add	r2, r3
 8001dd8:	8afb      	ldrh	r3, [r7, #22]
 8001dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001dee:	8b7b      	ldrh	r3, [r7, #26]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8085 	beq.w	8001f00 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	6959      	ldr	r1, [r3, #20]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	891a      	ldrh	r2, [r3, #8]
 8001e02:	8b7b      	ldrh	r3, [r7, #26]
 8001e04:	f004 fd69 	bl	80068da <USB_ReadPMA>
 8001e08:	e07a      	b.n	8001f00 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	8b7b      	ldrh	r3, [r7, #26]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d306      	bcc.n	8001e48 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	8b7b      	ldrh	r3, [r7, #26]
 8001e40:	1ad2      	subs	r2, r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	619a      	str	r2, [r3, #24]
 8001e46:	e002      	b.n	8001e4e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d123      	bne.n	8001e9e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e70:	83fb      	strh	r3, [r7, #30]
 8001e72:	8bfb      	ldrh	r3, [r7, #30]
 8001e74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e78:	83fb      	strh	r3, [r7, #30]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	441a      	add	r2, r3
 8001e88:	8bfb      	ldrh	r3, [r7, #30]
 8001e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d11f      	bne.n	8001ee8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec2:	83bb      	strh	r3, [r7, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	441a      	add	r2, r3
 8001ed2:	8bbb      	ldrh	r3, [r7, #28]
 8001ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ee8:	8b7b      	ldrh	r3, [r7, #26]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	6959      	ldr	r1, [r3, #20]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	895a      	ldrh	r2, [r3, #10]
 8001efa:	8b7b      	ldrh	r3, [r7, #26]
 8001efc:	f004 fced 	bl	80068da <USB_ReadPMA>
    }
  }

  return count;
 8001f00:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b0a4      	sub	sp, #144	; 0x90
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	4613      	mov	r3, r2
 8001f16:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 81db 	beq.w	80022da <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f48:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	699a      	ldr	r2, [r3, #24]
 8001f50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d907      	bls.n	8001f68 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	699a      	ldr	r2, [r3, #24]
 8001f5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f60:	1ad2      	subs	r2, r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	619a      	str	r2, [r3, #24]
 8001f66:	e002      	b.n	8001f6e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 80b9 	bne.w	80020ea <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d126      	bne.n	8001fce <HAL_PCD_EP_DB_Transmit+0xc4>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	4413      	add	r3, r2
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	00da      	lsls	r2, r3, #3
 8001f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	801a      	strh	r2, [r3, #0]
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	801a      	strh	r2, [r3, #0]
 8001fcc:	e01a      	b.n	8002004 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d116      	bne.n	8002004 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fea:	4413      	add	r3, r2
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	00da      	lsls	r2, r3, #3
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	2200      	movs	r2, #0
 8002002:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d126      	bne.n	8002060 <HAL_PCD_EP_DB_Transmit+0x156>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	4413      	add	r3, r2
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	00da      	lsls	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002044:	b29a      	uxth	r2, r3
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002058:	b29a      	uxth	r2, r3
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	e017      	b.n	8002090 <HAL_PCD_EP_DB_Transmit+0x186>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d113      	bne.n	8002090 <HAL_PCD_EP_DB_Transmit+0x186>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002070:	b29b      	uxth	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	4413      	add	r3, r2
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	00da      	lsls	r2, r3, #3
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	4413      	add	r3, r2
 8002084:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2200      	movs	r2, #0
 800208e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f006 fde7 	bl	8008c6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 82fa 	beq.w	800269c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	82fb      	strh	r3, [r7, #22]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	8afb      	ldrh	r3, [r7, #22]
 80020d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	8013      	strh	r3, [r2, #0]
 80020e8:	e2d8      	b.n	800269c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d021      	beq.n	8002138 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800210a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	441a      	add	r2, r3
 8002120:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800212c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	b29b      	uxth	r3, r3
 8002136:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800213e:	2b01      	cmp	r3, #1
 8002140:	f040 82ac 	bne.w	800269c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800214c:	441a      	add	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800215a:	441a      	add	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d30b      	bcc.n	8002184 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800217c:	1ad2      	subs	r2, r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	621a      	str	r2, [r3, #32]
 8002182:	e017      	b.n	80021b4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d108      	bne.n	800219e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800218c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800219c:	e00a      	b.n	80021b4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d165      	bne.n	8002288 <HAL_PCD_EP_DB_Transmit+0x37e>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d0:	4413      	add	r3, r2
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	00da      	lsls	r2, r3, #3
 80021da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021dc:	4413      	add	r3, r2
 80021de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	801a      	strh	r2, [r3, #0]
 80021f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021f8:	2b3e      	cmp	r3, #62	; 0x3e
 80021fa:	d91d      	bls.n	8002238 <HAL_PCD_EP_DB_Transmit+0x32e>
 80021fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	64bb      	str	r3, [r7, #72]	; 0x48
 8002204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002212:	3b01      	subs	r3, #1
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
 8002216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29a      	uxth	r2, r3
 800221c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800221e:	b29b      	uxth	r3, r3
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	b29b      	uxth	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002230:	b29a      	uxth	r2, r3
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e044      	b.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800224a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800224e:	b29a      	uxth	r2, r3
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	801a      	strh	r2, [r3, #0]
 8002254:	e035      	b.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
 800225e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_PCD_EP_DB_Transmit+0x366>
 800226a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800226c:	3301      	adds	r3, #1
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29a      	uxth	r2, r3
 8002276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002278:	b29b      	uxth	r3, r3
 800227a:	029b      	lsls	r3, r3, #10
 800227c:	b29b      	uxth	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b29a      	uxth	r2, r3
 8002282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002284:	801a      	strh	r2, [r3, #0]
 8002286:	e01c      	b.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	785b      	ldrb	r3, [r3, #1]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d118      	bne.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a4:	4413      	add	r3, r2
 80022a6:	647b      	str	r3, [r7, #68]	; 0x44
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	00da      	lsls	r2, r3, #3
 80022ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b0:	4413      	add	r3, r2
 80022b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6959      	ldr	r1, [r3, #20]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	891a      	ldrh	r2, [r3, #8]
 80022ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f004 fabf 	bl	8006856 <USB_WritePMA>
 80022d8:	e1e0      	b.n	800269c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022fe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800230a:	429a      	cmp	r2, r3
 800230c:	d307      	bcc.n	800231e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002316:	1ad2      	subs	r2, r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	619a      	str	r2, [r3, #24]
 800231c:	e002      	b.n	8002324 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 80c0 	bne.w	80024ae <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d126      	bne.n	8002384 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800234a:	4413      	add	r3, r2
 800234c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	00da      	lsls	r2, r3, #3
 8002354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002356:	4413      	add	r3, r2
 8002358:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800235c:	67bb      	str	r3, [r7, #120]	; 0x78
 800235e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002368:	b29a      	uxth	r2, r3
 800236a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237c:	b29a      	uxth	r2, r3
 800237e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	e01a      	b.n	80023ba <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d116      	bne.n	80023ba <HAL_PCD_EP_DB_Transmit+0x4b0>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	667b      	str	r3, [r7, #100]	; 0x64
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023a0:	4413      	add	r3, r2
 80023a2:	667b      	str	r3, [r7, #100]	; 0x64
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	00da      	lsls	r2, r3, #3
 80023aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ac:	4413      	add	r3, r2
 80023ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023b2:	663b      	str	r3, [r7, #96]	; 0x60
 80023b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b6:	2200      	movs	r2, #0
 80023b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	677b      	str	r3, [r7, #116]	; 0x74
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	785b      	ldrb	r3, [r3, #1]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d12b      	bne.n	8002420 <HAL_PCD_EP_DB_Transmit+0x516>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023dc:	4413      	add	r3, r2
 80023de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	00da      	lsls	r2, r3, #3
 80023e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e8:	4413      	add	r3, r2
 80023ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fe:	b29a      	uxth	r2, r3
 8002400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002416:	b29a      	uxth	r2, r3
 8002418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	e017      	b.n	8002450 <HAL_PCD_EP_DB_Transmit+0x546>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d113      	bne.n	8002450 <HAL_PCD_EP_DB_Transmit+0x546>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002436:	4413      	add	r3, r2
 8002438:	677b      	str	r3, [r7, #116]	; 0x74
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	00da      	lsls	r2, r3, #3
 8002440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002442:	4413      	add	r3, r2
 8002444:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002448:	673b      	str	r3, [r7, #112]	; 0x70
 800244a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244c:	2200      	movs	r2, #0
 800244e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f006 fc07 	bl	8008c6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 811a 	bne.w	800269c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800249c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	8013      	strh	r3, [r2, #0]
 80024ac:	e0f6      	b.n	800269c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d121      	bne.n	80024fc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	441a      	add	r2, r3
 80024e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002502:	2b01      	cmp	r3, #1
 8002504:	f040 80ca 	bne.w	800269c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002510:	441a      	add	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800251e:	441a      	add	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	6a1a      	ldr	r2, [r3, #32]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d30b      	bcc.n	8002548 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	621a      	str	r2, [r3, #32]
 8002546:	e017      	b.n	8002578 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d108      	bne.n	8002562 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002550:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002560:	e00a      	b.n	8002578 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2200      	movs	r2, #0
 800256e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	657b      	str	r3, [r7, #84]	; 0x54
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d165      	bne.n	8002652 <HAL_PCD_EP_DB_Transmit+0x748>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002594:	b29b      	uxth	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259a:	4413      	add	r3, r2
 800259c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	00da      	lsls	r2, r3, #3
 80025a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a6:	4413      	add	r3, r2
 80025a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80025ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c2:	2b3e      	cmp	r3, #62	; 0x3e
 80025c4:	d91d      	bls.n	8002602 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80025c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80025da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025dc:	3b01      	subs	r3, #1
 80025de:	66bb      	str	r3, [r7, #104]	; 0x68
 80025e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	029b      	lsls	r3, r3, #10
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e041      	b.n	8002686 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <HAL_PCD_EP_DB_Transmit+0x716>
 800260a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002618:	b29a      	uxth	r2, r3
 800261a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	e032      	b.n	8002686 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	66bb      	str	r3, [r7, #104]	; 0x68
 8002628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_PCD_EP_DB_Transmit+0x730>
 8002634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002636:	3301      	adds	r3, #1
 8002638:	66bb      	str	r3, [r7, #104]	; 0x68
 800263a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002642:	b29b      	uxth	r3, r3
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	b29b      	uxth	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b29a      	uxth	r2, r3
 800264c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e019      	b.n	8002686 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	785b      	ldrb	r3, [r3, #1]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d115      	bne.n	8002686 <HAL_PCD_EP_DB_Transmit+0x77c>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002668:	4413      	add	r3, r2
 800266a:	657b      	str	r3, [r7, #84]	; 0x54
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	00da      	lsls	r2, r3, #3
 8002672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002674:	4413      	add	r3, r2
 8002676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002680:	b29a      	uxth	r2, r3
 8002682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002684:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6959      	ldr	r1, [r3, #20]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	895a      	ldrh	r2, [r3, #10]
 8002692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002696:	b29b      	uxth	r3, r3
 8002698:	f004 f8dd 	bl	8006856 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b6:	82bb      	strh	r3, [r7, #20]
 80026b8:	8abb      	ldrh	r3, [r7, #20]
 80026ba:	f083 0310 	eor.w	r3, r3, #16
 80026be:	82bb      	strh	r3, [r7, #20]
 80026c0:	8abb      	ldrh	r3, [r7, #20]
 80026c2:	f083 0320 	eor.w	r3, r3, #32
 80026c6:	82bb      	strh	r3, [r7, #20]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	441a      	add	r2, r3
 80026d6:	8abb      	ldrh	r3, [r7, #20]
 80026d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3790      	adds	r7, #144	; 0x90
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b087      	sub	sp, #28
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	817b      	strh	r3, [r7, #10]
 8002704:	4613      	mov	r3, r2
 8002706:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002708:	897b      	ldrh	r3, [r7, #10]
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e009      	b.n	8002740 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800272c:	897a      	ldrh	r2, [r7, #10]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	b29a      	uxth	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	80da      	strh	r2, [r3, #6]
 8002754:	e00b      	b.n	800276e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2201      	movs	r2, #1
 800275a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	b29a      	uxth	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b29a      	uxth	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40007000 	.word	0x40007000

080027ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fa:	d130      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002808:	d038      	beq.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002818:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2232      	movs	r2, #50	; 0x32
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	3301      	adds	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002830:	e002      	b.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3b01      	subs	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002844:	d102      	bne.n	800284c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f2      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002858:	d110      	bne.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e00f      	b.n	800287e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d007      	beq.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002874:	4a05      	ldr	r2, [pc, #20]	; (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40007000 	.word	0x40007000
 8002890:	20000000 	.word	0x20000000
 8002894:	431bde83 	.word	0x431bde83

08002898 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a6:	6053      	str	r3, [r2, #4]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40007000 	.word	0x40007000

080028b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f000 bc02 	b.w	80030d0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028cc:	4b96      	ldr	r3, [pc, #600]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d6:	4b94      	ldr	r3, [pc, #592]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80e4 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_RCC_OscConfig+0x4c>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	f040 808b 	bne.w	8002a12 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	f040 8087 	bne.w	8002a12 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002904:	4b88      	ldr	r3, [pc, #544]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_OscConfig+0x64>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e3d9      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1a      	ldr	r2, [r3, #32]
 8002920:	4b81      	ldr	r3, [pc, #516]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d004      	beq.n	8002936 <HAL_RCC_OscConfig+0x7e>
 800292c:	4b7e      	ldr	r3, [pc, #504]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002934:	e005      	b.n	8002942 <HAL_RCC_OscConfig+0x8a>
 8002936:	4b7c      	ldr	r3, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002942:	4293      	cmp	r3, r2
 8002944:	d223      	bcs.n	800298e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fd54 	bl	80033f8 <RCC_SetFlashLatencyFromMSIRange>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e3ba      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295a:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a72      	ldr	r2, [pc, #456]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b70      	ldr	r3, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	496d      	ldr	r1, [pc, #436]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002978:	4b6b      	ldr	r3, [pc, #428]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	4968      	ldr	r1, [pc, #416]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	e025      	b.n	80029da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800298e:	4b66      	ldr	r3, [pc, #408]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4960      	ldr	r1, [pc, #384]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ac:	4b5e      	ldr	r3, [pc, #376]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	495b      	ldr	r1, [pc, #364]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fd14 	bl	80033f8 <RCC_SetFlashLatencyFromMSIRange>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e37a      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029da:	f000 fc81 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b51      	ldr	r3, [pc, #324]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4950      	ldr	r1, [pc, #320]	; (8002b2c <HAL_RCC_OscConfig+0x274>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a4e      	ldr	r2, [pc, #312]	; (8002b30 <HAL_RCC_OscConfig+0x278>)
 80029f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029fa:	4b4e      	ldr	r3, [pc, #312]	; (8002b34 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fde0 	bl	80005c4 <HAL_InitTick>
 8002a04:	4603      	mov	r3, r0
 8002a06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d052      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	e35e      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d032      	beq.n	8002a80 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a1a:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a26:	f7fd fe1d 	bl	8000664 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a2e:	f7fd fe19 	bl	8000664 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e347      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a4c:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a35      	ldr	r2, [pc, #212]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a52:	f043 0308 	orr.w	r3, r3, #8
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4930      	ldr	r1, [pc, #192]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	492b      	ldr	r1, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
 8002a7e:	e01a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a80:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a8c:	f7fd fdea 	bl	8000664 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a94:	f7fd fde6 	bl	8000664 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e314      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1dc>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d073      	beq.n	8002baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x21c>
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d10e      	bne.n	8002aec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d10b      	bne.n	8002aec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d063      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2f0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d15f      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e2f1      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_OscConfig+0x24c>
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e025      	b.n	8002b50 <HAL_RCC_OscConfig+0x298>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d114      	bne.n	8002b38 <HAL_RCC_OscConfig+0x280>
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a02      	ldr	r2, [pc, #8]	; (8002b28 <HAL_RCC_OscConfig+0x270>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e013      	b.n	8002b50 <HAL_RCC_OscConfig+0x298>
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08009394 	.word	0x08009394
 8002b30:	20000000 	.word	0x20000000
 8002b34:	20000014 	.word	0x20000014
 8002b38:	4ba0      	ldr	r3, [pc, #640]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a9f      	ldr	r2, [pc, #636]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b9d      	ldr	r3, [pc, #628]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a9c      	ldr	r2, [pc, #624]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fd fd84 	bl	8000664 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fd fd80 	bl	8000664 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e2ae      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b72:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x2a8>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fd fd70 	bl	8000664 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fd fd6c 	bl	8000664 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e29a      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9a:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2d0>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d060      	beq.n	8002c78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x310>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d119      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d116      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc8:	4b7c      	ldr	r3, [pc, #496]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_OscConfig+0x328>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e277      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	4973      	ldr	r1, [pc, #460]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf4:	e040      	b.n	8002c78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d023      	beq.n	8002c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfe:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fd fd2b 	bl	8000664 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fd fd27 	bl	8000664 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e255      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b62      	ldr	r3, [pc, #392]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	495f      	ldr	r1, [pc, #380]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	e018      	b.n	8002c78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5c      	ldr	r2, [pc, #368]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fd fd07 	bl	8000664 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fd fd03 	bl	8000664 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e231      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d03c      	beq.n	8002cfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fd fce2 	bl	8000664 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7fd fcde 	bl	8000664 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e20c      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb6:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ef      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x3ec>
 8002cc4:	e01b      	b.n	8002cfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ccc:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fd fcc5 	bl	8000664 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fd fcc1 	bl	8000664 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1ef      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ef      	bne.n	8002cde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80a6 	beq.w	8002e58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6593      	str	r3, [r2, #88]	; 0x58
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_RCC_OscConfig+0x508>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d118      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_RCC_OscConfig+0x508>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_RCC_OscConfig+0x508>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d50:	f7fd fc88 	bl	8000664 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7fd fc84 	bl	8000664 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1b2      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_RCC_OscConfig+0x508>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <HAL_RCC_OscConfig+0x4d8>
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d8e:	e029      	b.n	8002de4 <HAL_RCC_OscConfig+0x52c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d115      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x50c>
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <HAL_RCC_OscConfig+0x504>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db8:	e014      	b.n	8002de4 <HAL_RCC_OscConfig+0x52c>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	4b9a      	ldr	r3, [pc, #616]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	4a99      	ldr	r2, [pc, #612]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd4:	4b96      	ldr	r3, [pc, #600]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a95      	ldr	r2, [pc, #596]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d016      	beq.n	8002e1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fd fc3a 	bl	8000664 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fd fc36 	bl	8000664 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e162      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0a:	4b89      	ldr	r3, [pc, #548]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ed      	beq.n	8002df4 <HAL_RCC_OscConfig+0x53c>
 8002e18:	e015      	b.n	8002e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fd fc23 	bl	8000664 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fd fc1f 	bl	8000664 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e14b      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e38:	4b7d      	ldr	r3, [pc, #500]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ed      	bne.n	8002e22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e46:	7ffb      	ldrb	r3, [r7, #31]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4b78      	ldr	r3, [pc, #480]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	4a77      	ldr	r2, [pc, #476]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d03c      	beq.n	8002ede <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e6c:	4b70      	ldr	r3, [pc, #448]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e72:	4a6f      	ldr	r2, [pc, #444]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fd fbf2 	bl	8000664 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e84:	f7fd fbee 	bl	8000664 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e11c      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e96:	4b66      	ldr	r3, [pc, #408]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ef      	beq.n	8002e84 <HAL_RCC_OscConfig+0x5cc>
 8002ea4:	e01b      	b.n	8002ede <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ea6:	4b62      	ldr	r3, [pc, #392]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eac:	4a60      	ldr	r2, [pc, #384]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fd fbd5 	bl	8000664 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ebe:	f7fd fbd1 	bl	8000664 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0ff      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ed0:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ef      	bne.n	8002ebe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80f3 	beq.w	80030ce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	f040 80c9 	bne.w	8003084 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f003 0203 	and.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d12c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	3b01      	subs	r3, #1
 8002f12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d123      	bne.n	8002f60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d11b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d113      	bne.n	8002f60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	3b01      	subs	r3, #1
 8002f46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d109      	bne.n	8002f60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d06b      	beq.n	8003038 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d062      	beq.n	800302c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f66:	4b32      	ldr	r3, [pc, #200]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0ac      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f76:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2d      	ldr	r2, [pc, #180]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f82:	f7fd fb6f 	bl	8000664 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fd fb6b 	bl	8000664 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e099      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9c:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_RCC_OscConfig+0x77c>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fc2:	0212      	lsls	r2, r2, #8
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fca:	0852      	lsrs	r2, r2, #1
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	0552      	lsls	r2, r2, #21
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fd6:	0852      	lsrs	r2, r2, #1
 8002fd8:	3a01      	subs	r2, #1
 8002fda:	0652      	lsls	r2, r2, #25
 8002fdc:	4311      	orrs	r1, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fe2:	06d2      	lsls	r2, r2, #27
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	4912      	ldr	r1, [pc, #72]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fec:	4b10      	ldr	r3, [pc, #64]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a0c      	ldr	r2, [pc, #48]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003002:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003004:	f7fd fb2e 	bl	8000664 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fd fb2a 	bl	8000664 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e058      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <HAL_RCC_OscConfig+0x778>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800302a:	e050      	b.n	80030ce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e04f      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
 8003030:	40021000 	.word	0x40021000
 8003034:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d144      	bne.n	80030ce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a20      	ldr	r2, [pc, #128]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800305c:	f7fd fb02 	bl	8000664 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fd fafe 	bl	8000664 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e02c      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x7ac>
 8003082:	e024      	b.n	80030ce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d01f      	beq.n	80030ca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 8003090:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fd fae5 	bl	8000664 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309e:	f7fd fae1 	bl	8000664 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e00f      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f0      	bne.n	800309e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	4905      	ldr	r1, [pc, #20]	; (80030d8 <HAL_RCC_OscConfig+0x820>)
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_OscConfig+0x824>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
 80030c8:	e001      	b.n	80030ce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	feeefffc 	.word	0xfeeefffc

080030e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0e7      	b.n	80032c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b75      	ldr	r3, [pc, #468]	; (80032cc <HAL_RCC_ClockConfig+0x1ec>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d910      	bls.n	8003124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b72      	ldr	r3, [pc, #456]	; (80032cc <HAL_RCC_ClockConfig+0x1ec>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 0207 	bic.w	r2, r3, #7
 800310a:	4970      	ldr	r1, [pc, #448]	; (80032cc <HAL_RCC_ClockConfig+0x1ec>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b6e      	ldr	r3, [pc, #440]	; (80032cc <HAL_RCC_ClockConfig+0x1ec>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0cf      	b.n	80032c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d010      	beq.n	8003152 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	429a      	cmp	r2, r3
 800313e:	d908      	bls.n	8003152 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4960      	ldr	r1, [pc, #384]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d04c      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d121      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0a6      	b.n	80032c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d115      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e09a      	b.n	80032c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003196:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e08e      	b.n	80032c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e086      	b.n	80032c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b46      	ldr	r3, [pc, #280]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4943      	ldr	r1, [pc, #268]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fd fa4c 	bl	8000664 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fd fa48 	bl	8000664 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e06e      	b.n	80032c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003210:	429a      	cmp	r2, r3
 8003212:	d208      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	492b      	ldr	r1, [pc, #172]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCC_ClockConfig+0x1ec>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d210      	bcs.n	8003256 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <HAL_RCC_ClockConfig+0x1ec>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 0207 	bic.w	r2, r3, #7
 800323c:	4923      	ldr	r1, [pc, #140]	; (80032cc <HAL_RCC_ClockConfig+0x1ec>)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003244:	4b21      	ldr	r3, [pc, #132]	; (80032cc <HAL_RCC_ClockConfig+0x1ec>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d001      	beq.n	8003256 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e036      	b.n	80032c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4918      	ldr	r1, [pc, #96]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	4313      	orrs	r3, r2
 8003272:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4910      	ldr	r1, [pc, #64]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003294:	f000 f824 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	490b      	ldr	r1, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x1f4>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1f8>)
 80032b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1fc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f983 	bl	80005c4 <HAL_InitTick>
 80032be:	4603      	mov	r3, r0
 80032c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80032c2:	7afb      	ldrb	r3, [r7, #11]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08009394 	.word	0x08009394
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000014 	.word	0x20000014

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f8:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x34>
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d121      	bne.n	8003352 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d11e      	bne.n	8003352 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d107      	bne.n	8003330 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003320:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e005      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800333c:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003344:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10d      	bne.n	8003368 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d102      	bne.n	800335e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e004      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d101      	bne.n	8003368 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003364:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003366:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d134      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d003      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0xa6>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d003      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0xac>
 8003384:	e005      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003386:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003388:	617b      	str	r3, [r7, #20]
      break;
 800338a:	e005      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800338e:	617b      	str	r3, [r7, #20]
      break;
 8003390:	e002      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	617b      	str	r3, [r7, #20]
      break;
 8003396:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003398:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	3301      	adds	r3, #1
 80033a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	fb03 f202 	mul.w	r2, r3, r2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	0e5b      	lsrs	r3, r3, #25
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	3301      	adds	r3, #1
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033d8:	69bb      	ldr	r3, [r7, #24]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	080093a4 	.word	0x080093a4
 80033f0:	00f42400 	.word	0x00f42400
 80033f4:	007a1200 	.word	0x007a1200

080033f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003410:	f7ff f9de 	bl	80027d0 <HAL_PWREx_GetVoltageRange>
 8003414:	6178      	str	r0, [r7, #20]
 8003416:	e014      	b.n	8003442 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	; 0x58
 8003424:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003430:	f7ff f9ce 	bl	80027d0 <HAL_PWREx_GetVoltageRange>
 8003434:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003448:	d10b      	bne.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b80      	cmp	r3, #128	; 0x80
 800344e:	d919      	bls.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2ba0      	cmp	r3, #160	; 0xa0
 8003454:	d902      	bls.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003456:	2302      	movs	r3, #2
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e013      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800345c:	2301      	movs	r3, #1
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e010      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d902      	bls.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003468:	2303      	movs	r3, #3
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e00a      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d102      	bne.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003474:	2302      	movs	r3, #2
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e004      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d101      	bne.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 0207 	bic.w	r2, r3, #7
 800348c:	4909      	ldr	r1, [pc, #36]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40022000 	.word	0x40022000

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c0:	2300      	movs	r3, #0
 80034c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d031      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034dc:	d01a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e2:	d814      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ec:	d10f      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034ee:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	4a5c      	ldr	r2, [pc, #368]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034fa:	e00c      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f9ce 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	74fb      	strb	r3, [r7, #19]
      break;
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	494e      	ldr	r1, [pc, #312]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003532:	e001      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 809e 	beq.w	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800354a:	4b46      	ldr	r3, [pc, #280]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b40      	ldr	r3, [pc, #256]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	4a3f      	ldr	r2, [pc, #252]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	6593      	str	r3, [r2, #88]	; 0x58
 800356c:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003578:	2301      	movs	r3, #1
 800357a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a39      	ldr	r2, [pc, #228]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003586:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003588:	f7fd f86c 	bl	8000664 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800358e:	e009      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003590:	f7fd f868 	bl	8000664 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d902      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	74fb      	strb	r3, [r7, #19]
        break;
 80035a2:	e005      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a4:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ef      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d15a      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035b6:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01e      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d019      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035de:	4b21      	ldr	r3, [pc, #132]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035ee:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035fe:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd f828 	bl	8000664 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003616:	e00b      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fd f824 	bl	8000664 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d902      	bls.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	74fb      	strb	r3, [r7, #19]
            break;
 800362e:	e006      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ec      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003652:	4904      	ldr	r1, [pc, #16]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800365a:	e009      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	74bb      	strb	r3, [r7, #18]
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003670:	7c7b      	ldrb	r3, [r7, #17]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003676:	4b8a      	ldr	r3, [pc, #552]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	4a89      	ldr	r2, [pc, #548]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800367c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003680:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800368e:	4b84      	ldr	r3, [pc, #528]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f023 0203 	bic.w	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4980      	ldr	r1, [pc, #512]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b0:	4b7b      	ldr	r3, [pc, #492]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 020c 	bic.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	4978      	ldr	r1, [pc, #480]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036d2:	4b73      	ldr	r3, [pc, #460]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	496f      	ldr	r1, [pc, #444]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036f4:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	4967      	ldr	r1, [pc, #412]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003716:	4b62      	ldr	r3, [pc, #392]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	495e      	ldr	r1, [pc, #376]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4956      	ldr	r1, [pc, #344]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	494d      	ldr	r1, [pc, #308]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d028      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800377c:	4b48      	ldr	r3, [pc, #288]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4945      	ldr	r1, [pc, #276]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379a:	d106      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379c:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a3f      	ldr	r2, [pc, #252]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a6:	60d3      	str	r3, [r2, #12]
 80037a8:	e011      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b2:	d10c      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f872 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d028      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037da:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	492d      	ldr	r1, [pc, #180]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037f8:	d106      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003804:	60d3      	str	r3, [r2, #12]
 8003806:	e011      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003810:	d10c      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f843 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003822:	7cfb      	ldrb	r3, [r7, #19]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01c      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003846:	4916      	ldr	r1, [pc, #88]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003856:	d10c      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f820 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388c:	4904      	ldr	r1, [pc, #16]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003894:	7cbb      	ldrb	r3, [r7, #18]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038b2:	4b74      	ldr	r3, [pc, #464]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038be:	4b71      	ldr	r3, [pc, #452]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
       ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038d6:	4b6b      	ldr	r3, [pc, #428]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
       ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d047      	beq.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e044      	b.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d018      	beq.n	800392a <RCCEx_PLLSAI1_Config+0x86>
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d825      	bhi.n	8003948 <RCCEx_PLLSAI1_Config+0xa4>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d002      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0x62>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d009      	beq.n	8003918 <RCCEx_PLLSAI1_Config+0x74>
 8003904:	e020      	b.n	8003948 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003906:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11d      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003916:	e01a      	b.n	800394e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003918:	4b5a      	ldr	r3, [pc, #360]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e013      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800392a:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003936:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003946:	e006      	b.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e004      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003956:	bf00      	nop
    }

    if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	430b      	orrs	r3, r1
 8003974:	4943      	ldr	r1, [pc, #268]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d17c      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003980:	4b40      	ldr	r3, [pc, #256]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a3f      	ldr	r2, [pc, #252]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003986:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800398a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fc fe6a 	bl	8000664 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003994:	f7fc fe66 	bl	8000664 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
        break;
 80039a6:	e005      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ef      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d15f      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d110      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c0:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80039c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	0211      	lsls	r1, r2, #8
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	06d2      	lsls	r2, r2, #27
 80039d8:	430a      	orrs	r2, r1
 80039da:	492a      	ldr	r1, [pc, #168]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	610b      	str	r3, [r1, #16]
 80039e0:	e027      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d112      	bne.n	8003a0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	0211      	lsls	r1, r2, #8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6912      	ldr	r2, [r2, #16]
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0552      	lsls	r2, r2, #21
 8003a04:	430a      	orrs	r2, r1
 8003a06:	491f      	ldr	r1, [pc, #124]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	610b      	str	r3, [r1, #16]
 8003a0c:	e011      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6892      	ldr	r2, [r2, #8]
 8003a1e:	0211      	lsls	r1, r2, #8
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6952      	ldr	r2, [r2, #20]
 8003a24:	0852      	lsrs	r2, r2, #1
 8003a26:	3a01      	subs	r2, #1
 8003a28:	0652      	lsls	r2, r2, #25
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	4915      	ldr	r1, [pc, #84]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fc fe11 	bl	8000664 <HAL_GetTick>
 8003a42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a44:	e009      	b.n	8003a5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a46:	f7fc fe0d 	bl	8000664 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d902      	bls.n	8003a5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	73fb      	strb	r3, [r7, #15]
          break;
 8003a58:	e005      	b.n	8003a66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0ef      	beq.n	8003a46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b0ba      	sub	sp, #232	; 0xe8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003aae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ab2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d115      	bne.n	8003af0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00f      	beq.n	8003af0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 82ae 	beq.w	8004042 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
      }
      return;
 8003aee:	e2a8      	b.n	8004042 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8117 	beq.w	8003d28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b0a:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_UART_IRQHandler+0x298>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 810a 	beq.w	8003d28 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d011      	beq.n	8003b44 <HAL_UART_IRQHandler+0xbc>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00b      	beq.n	8003b44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d011      	beq.n	8003b74 <HAL_UART_IRQHandler+0xec>
 8003b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2202      	movs	r2, #2
 8003b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6a:	f043 0204 	orr.w	r2, r3, #4
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d011      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x11c>
 8003b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2204      	movs	r2, #4
 8003b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9a:	f043 0202 	orr.w	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d017      	beq.n	8003be0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00b      	beq.n	8003be0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd6:	f043 0208 	orr.w	r2, r3, #8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d012      	beq.n	8003c12 <HAL_UART_IRQHandler+0x18a>
 8003bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8214 	beq.w	8004046 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d005      	beq.n	8003c6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04f      	beq.n	8003d0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa16 	bl	800409c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d141      	bne.n	8003d02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3308      	adds	r3, #8
 8003c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1d9      	bne.n	8003c7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d013      	beq.n	8003cfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd6:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <HAL_UART_IRQHandler+0x29c>)
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fe1b 	bl	800091a <HAL_DMA_Abort_IT>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d017      	beq.n	8003d1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	e00f      	b.n	8003d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f9b8 	bl	8004070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e00b      	b.n	8003d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f9b4 	bl	8004070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	e007      	b.n	8003d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f9b0 	bl	8004070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d18:	e195      	b.n	8004046 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1a:	bf00      	nop
    return;
 8003d1c:	e193      	b.n	8004046 <HAL_UART_IRQHandler+0x5be>
 8003d1e:	bf00      	nop
 8003d20:	04000120 	.word	0x04000120
 8003d24:	08004165 	.word	0x08004165

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	f040 814e 	bne.w	8003fce <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8147 	beq.w	8003fce <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8140 	beq.w	8003fce <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2210      	movs	r2, #16
 8003d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	f040 80b8 	bne.w	8003ed6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8167 	beq.w	800404a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d86:	429a      	cmp	r2, r3
 8003d88:	f080 815f 	bcs.w	800404a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 8086 	bne.w	8003eb4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dd6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1da      	bne.n	8003da8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e1      	bne.n	8003df2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e3      	bne.n	8003e2e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e84:	f023 0310 	bic.w	r3, r3, #16
 8003e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e96:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e4      	bne.n	8003e74 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc fcf5 	bl	800089e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8d8 	bl	8004084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ed4:	e0b9      	b.n	800404a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80ab 	beq.w	800404e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80a6 	beq.w	800404e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
 8003f26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e4      	bne.n	8003f02 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	623b      	str	r3, [r7, #32]
   return(result);
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f5c:	633a      	str	r2, [r7, #48]	; 0x30
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e3      	bne.n	8003f38 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f023 0310 	bic.w	r3, r3, #16
 8003f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e4      	bne.n	8003f84 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f85c 	bl	8004084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fcc:	e03f      	b.n	800404e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x570>
 8003fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8f7 	bl	80041e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ff6:	e02d      	b.n	8004054 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00e      	beq.n	8004022 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01c      	beq.n	8004052 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
    }
    return;
 8004020:	e017      	b.n	8004052 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d012      	beq.n	8004054 <HAL_UART_IRQHandler+0x5cc>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8a8 	bl	8004190 <UART_EndTransmit_IT>
    return;
 8004040:	e008      	b.n	8004054 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004042:	bf00      	nop
 8004044:	e006      	b.n	8004054 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004046:	bf00      	nop
 8004048:	e004      	b.n	8004054 <HAL_UART_IRQHandler+0x5cc>
      return;
 800404a:	bf00      	nop
 800404c:	e002      	b.n	8004054 <HAL_UART_IRQHandler+0x5cc>
      return;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004052:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004054:	37e8      	adds	r7, #232	; 0xe8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop

0800405c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b095      	sub	sp, #84	; 0x54
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c2:	643b      	str	r3, [r7, #64]	; 0x40
 80040c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e6      	bne.n	80040a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410e:	2b01      	cmp	r3, #1
 8004110:	d118      	bne.n	8004144 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	647b      	str	r3, [r7, #68]	; 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	613b      	str	r3, [r7, #16]
   return(result);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004158:	bf00      	nop
 800415a:	3754      	adds	r7, #84	; 0x54
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff ff74 	bl	8004070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	613b      	str	r3, [r7, #16]
   return(result);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e6      	bne.n	8004198 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff40 	bl	800405c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041dc:	bf00      	nop
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041f8:	b084      	sub	sp, #16
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	f107 0014 	add.w	r0, r7, #20
 8004206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	b004      	add	sp, #16
 8004218:	4770      	bx	lr

0800421a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800422a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800422e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004250:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004254:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	b29b      	uxth	r3, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	b29b      	uxth	r3, r3
 8004266:	4013      	ands	r3, r2
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004298:	b084      	sub	sp, #16
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	f107 0014 	add.w	r0, r7, #20
 80042a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	b004      	add	sp, #16
 80042d8:	4770      	bx	lr
	...

080042dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042dc:	b480      	push	{r7}
 80042de:	b09d      	sub	sp, #116	; 0x74
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	78db      	ldrb	r3, [r3, #3]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d81f      	bhi.n	800434e <USB_ActivateEndpoint+0x72>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <USB_ActivateEndpoint+0x38>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	08004325 	.word	0x08004325
 8004318:	08004341 	.word	0x08004341
 800431c:	08004357 	.word	0x08004357
 8004320:	08004333 	.word	0x08004333
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004324:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800432c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004330:	e012      	b.n	8004358 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004332:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004336:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800433a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800433e:	e00b      	b.n	8004358 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004340:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004348:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800434c:	e004      	b.n	8004358 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004354:	e000      	b.n	8004358 <USB_ActivateEndpoint+0x7c>
      break;
 8004356:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800436a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004376:	b29b      	uxth	r3, r3
 8004378:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	b21b      	sxth	r3, r3
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	b21a      	sxth	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	b21b      	sxth	r3, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	b21b      	sxth	r3, r3
 800439e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	441a      	add	r2, r3
 80043ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80043b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	7b1b      	ldrb	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 8178 	bne.w	80046be <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8084 	beq.w	80044e0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4413      	add	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	00da      	lsls	r2, r3, #3
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	88db      	ldrh	r3, [r3, #6]
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	b29b      	uxth	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	827b      	strh	r3, [r7, #18]
 800441a:	8a7b      	ldrh	r3, [r7, #18]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01b      	beq.n	800445c <USB_ActivateEndpoint+0x180>
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	823b      	strh	r3, [r7, #16]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	441a      	add	r2, r3
 8004446:	8a3b      	ldrh	r3, [r7, #16]
 8004448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004458:	b29b      	uxth	r3, r3
 800445a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	78db      	ldrb	r3, [r3, #3]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d020      	beq.n	80044a6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447a:	81bb      	strh	r3, [r7, #12]
 800447c:	89bb      	ldrh	r3, [r7, #12]
 800447e:	f083 0320 	eor.w	r3, r3, #32
 8004482:	81bb      	strh	r3, [r7, #12]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	89bb      	ldrh	r3, [r7, #12]
 8004490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800449c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	8013      	strh	r3, [r2, #0]
 80044a4:	e2d5      	b.n	8004a52 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044bc:	81fb      	strh	r3, [r7, #14]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	441a      	add	r2, r3
 80044c8:	89fb      	ldrh	r3, [r7, #14]
 80044ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044da:	b29b      	uxth	r3, r3
 80044dc:	8013      	strh	r3, [r2, #0]
 80044de:	e2b8      	b.n	8004a52 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	633b      	str	r3, [r7, #48]	; 0x30
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	4413      	add	r3, r2
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	00da      	lsls	r2, r3, #3
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	4413      	add	r3, r2
 80044fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	88db      	ldrh	r3, [r3, #6]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	4413      	add	r3, r2
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00da      	lsls	r2, r3, #3
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	4413      	add	r3, r2
 8004532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004542:	b29a      	uxth	r2, r3
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b3e      	cmp	r3, #62	; 0x3e
 800454e:	d91d      	bls.n	800458c <USB_ActivateEndpoint+0x2b0>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	66bb      	str	r3, [r7, #104]	; 0x68
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <USB_ActivateEndpoint+0x28e>
 8004564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004566:	3b01      	subs	r3, #1
 8004568:	66bb      	str	r3, [r7, #104]	; 0x68
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29a      	uxth	r2, r3
 8004570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004572:	b29b      	uxth	r3, r3
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	b29b      	uxth	r3, r3
 8004578:	4313      	orrs	r3, r2
 800457a:	b29b      	uxth	r3, r3
 800457c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004584:	b29a      	uxth	r2, r3
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e026      	b.n	80045da <USB_ActivateEndpoint+0x2fe>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <USB_ActivateEndpoint+0x2ce>
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	801a      	strh	r2, [r3, #0]
 80045a8:	e017      	b.n	80045da <USB_ActivateEndpoint+0x2fe>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <USB_ActivateEndpoint+0x2e8>
 80045be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045c0:	3301      	adds	r3, #1
 80045c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	029b      	lsls	r3, r3, #10
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80045e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01b      	beq.n	800462a <USB_ActivateEndpoint+0x34e>
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004608:	843b      	strh	r3, [r7, #32]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	441a      	add	r2, r3
 8004614:	8c3b      	ldrh	r3, [r7, #32]
 8004616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004626:	b29b      	uxth	r3, r3
 8004628:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d124      	bne.n	800467c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	b29b      	uxth	r3, r3
 8004640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004648:	83bb      	strh	r3, [r7, #28]
 800464a:	8bbb      	ldrh	r3, [r7, #28]
 800464c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004650:	83bb      	strh	r3, [r7, #28]
 8004652:	8bbb      	ldrh	r3, [r7, #28]
 8004654:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004658:	83bb      	strh	r3, [r7, #28]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	441a      	add	r2, r3
 8004664:	8bbb      	ldrh	r3, [r7, #28]
 8004666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004676:	b29b      	uxth	r3, r3
 8004678:	8013      	strh	r3, [r2, #0]
 800467a:	e1ea      	b.n	8004a52 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	83fb      	strh	r3, [r7, #30]
 8004694:	8bfb      	ldrh	r3, [r7, #30]
 8004696:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800469a:	83fb      	strh	r3, [r7, #30]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	8bfb      	ldrh	r3, [r7, #30]
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]
 80046bc:	e1c9      	b.n	8004a52 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	78db      	ldrb	r3, [r3, #3]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d11e      	bne.n	8004704 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80046fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8013      	strh	r3, [r2, #0]
 8004702:	e01d      	b.n	8004740 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474a:	b29b      	uxth	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004750:	4413      	add	r3, r2
 8004752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	00da      	lsls	r2, r3, #3
 800475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475c:	4413      	add	r3, r2
 800475e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004762:	65bb      	str	r3, [r7, #88]	; 0x58
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	891b      	ldrh	r3, [r3, #8]
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	b29b      	uxth	r3, r3
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	657b      	str	r3, [r7, #84]	; 0x54
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004784:	4413      	add	r3, r2
 8004786:	657b      	str	r3, [r7, #84]	; 0x54
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	00da      	lsls	r2, r3, #3
 800478e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004790:	4413      	add	r3, r2
 8004792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004796:	653b      	str	r3, [r7, #80]	; 0x50
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	895b      	ldrh	r3, [r3, #10]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f040 8093 	bne.w	80048d8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01b      	beq.n	8004806 <USB_ActivateEndpoint+0x52a>
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	b29b      	uxth	r3, r3
 8004804:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004814:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01b      	beq.n	8004856 <USB_ActivateEndpoint+0x57a>
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004852:	b29b      	uxth	r3, r3
 8004854:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	873b      	strh	r3, [r7, #56]	; 0x38
 800486e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004870:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004874:	873b      	strh	r3, [r7, #56]	; 0x38
 8004876:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004878:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800487c:	873b      	strh	r3, [r7, #56]	; 0x38
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800488a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	8013      	strh	r3, [r2, #0]
 80048d6:	e0bc      	b.n	8004a52 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80048e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01d      	beq.n	8004930 <USB_ActivateEndpoint+0x654>
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800491c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492c:	b29b      	uxth	r3, r3
 800492e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004940:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01d      	beq.n	8004988 <USB_ActivateEndpoint+0x6ac>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004984:	b29b      	uxth	r3, r3
 8004986:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	78db      	ldrb	r3, [r3, #3]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d024      	beq.n	80049da <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049ae:	f083 0320 	eor.w	r3, r3, #32
 80049b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	441a      	add	r2, r3
 80049c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8013      	strh	r3, [r2, #0]
 80049d8:	e01d      	b.n	8004a16 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3774      	adds	r7, #116	; 0x74
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b08d      	sub	sp, #52	; 0x34
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	7b1b      	ldrb	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 808e 	bne.w	8004b94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d044      	beq.n	8004b0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	81bb      	strh	r3, [r7, #12]
 8004a8e:	89bb      	ldrh	r3, [r7, #12]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01b      	beq.n	8004ad0 <USB_DeactivateEndpoint+0x6c>
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	817b      	strh	r3, [r7, #10]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	897b      	ldrh	r3, [r7, #10]
 8004abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae6:	813b      	strh	r3, [r7, #8]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	893b      	ldrh	r3, [r7, #8]
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
 8004b08:	e192      	b.n	8004e30 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	827b      	strh	r3, [r7, #18]
 8004b18:	8a7b      	ldrh	r3, [r7, #18]
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01b      	beq.n	8004b5a <USB_DeactivateEndpoint+0xf6>
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	823b      	strh	r3, [r7, #16]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	441a      	add	r2, r3
 8004b44:	8a3b      	ldrh	r3, [r7, #16]
 8004b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b70:	81fb      	strh	r3, [r7, #14]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	89fb      	ldrh	r3, [r7, #14]
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
 8004b92:	e14d      	b.n	8004e30 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f040 80a5 	bne.w	8004ce8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	843b      	strh	r3, [r7, #32]
 8004bac:	8c3b      	ldrh	r3, [r7, #32]
 8004bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01b      	beq.n	8004bee <USB_DeactivateEndpoint+0x18a>
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	83fb      	strh	r3, [r7, #30]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	8bfb      	ldrh	r3, [r7, #30]
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	83bb      	strh	r3, [r7, #28]
 8004bfc:	8bbb      	ldrh	r3, [r7, #28]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01b      	beq.n	8004c3e <USB_DeactivateEndpoint+0x1da>
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	837b      	strh	r3, [r7, #26]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	8b7b      	ldrh	r3, [r7, #26]
 8004c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c54:	833b      	strh	r3, [r7, #24]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	8b3b      	ldrh	r3, [r7, #24]
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	82fb      	strh	r3, [r7, #22]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	441a      	add	r2, r3
 8004c98:	8afb      	ldrh	r3, [r7, #22]
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc4:	82bb      	strh	r3, [r7, #20]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	8abb      	ldrh	r3, [r7, #20]
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]
 8004ce6:	e0a3      	b.n	8004e30 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01b      	beq.n	8004d38 <USB_DeactivateEndpoint+0x2d4>
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01b      	beq.n	8004d88 <USB_DeactivateEndpoint+0x324>
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3734      	adds	r7, #52	; 0x34
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b0c2      	sub	sp, #264	; 0x108
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e4c:	6018      	str	r0, [r3, #0]
 8004e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e56:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f040 86b7 	bne.w	8005bd8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d908      	bls.n	8004e98 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e96:	e007      	b.n	8004ea8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	7b1b      	ldrb	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d13a      	bne.n	8004f2e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6959      	ldr	r1, [r3, #20]
 8004ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	88da      	ldrh	r2, [r3, #6]
 8004ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004eda:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ede:	6800      	ldr	r0, [r0, #0]
 8004ee0:	f001 fcb9 	bl	8006856 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	00da      	lsls	r2, r3, #3
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	f000 be1f 	b.w	8005b6c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	78db      	ldrb	r3, [r3, #3]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	f040 8462 	bne.w	8005804 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	f240 83df 	bls.w	800571c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 81c7 	beq.w	800538e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
 800500c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d177      	bne.n	800510c <USB_EPStartXfer+0x2ce>
 800501c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
 8005028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	4413      	add	r3, r2
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	00da      	lsls	r2, r3, #3
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	4413      	add	r3, r2
 8005052:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005062:	b29a      	uxth	r2, r3
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800506c:	2b3e      	cmp	r3, #62	; 0x3e
 800506e:	d921      	bls.n	80050b4 <USB_EPStartXfer+0x276>
 8005070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800507a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <USB_EPStartXfer+0x252>
 8005086:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800508a:	3b01      	subs	r3, #1
 800508c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800509a:	b29b      	uxth	r3, r3
 800509c:	029b      	lsls	r3, r3, #10
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4313      	orrs	r3, r2
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	801a      	strh	r2, [r3, #0]
 80050b2:	e050      	b.n	8005156 <USB_EPStartXfer+0x318>
 80050b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <USB_EPStartXfer+0x294>
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	801a      	strh	r2, [r3, #0]
 80050d0:	e041      	b.n	8005156 <USB_EPStartXfer+0x318>
 80050d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <USB_EPStartXfer+0x2b4>
 80050e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050ec:	3301      	adds	r3, #1
 80050ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	029b      	lsls	r3, r3, #10
 8005100:	b29b      	uxth	r3, r3
 8005102:	4313      	orrs	r3, r2
 8005104:	b29a      	uxth	r2, r3
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	e024      	b.n	8005156 <USB_EPStartXfer+0x318>
 800510c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d11c      	bne.n	8005156 <USB_EPStartXfer+0x318>
 800511c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	4413      	add	r3, r2
 8005132:	633b      	str	r3, [r7, #48]	; 0x30
 8005134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	00da      	lsls	r2, r3, #3
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	4413      	add	r3, r2
 8005146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800514c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005150:	b29a      	uxth	r2, r3
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	895b      	ldrh	r3, [r3, #10]
 8005162:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6959      	ldr	r1, [r3, #20]
 8005172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005176:	b29b      	uxth	r3, r3
 8005178:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800517c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005180:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005184:	6800      	ldr	r0, [r0, #0]
 8005186:	f001 fb66 	bl	8006856 <USB_WritePMA>
            ep->xfer_buff += len;
 800518a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519a:	441a      	add	r2, r3
 800519c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d90f      	bls.n	80051e4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80051c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a1a      	ldr	r2, [r3, #32]
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	621a      	str	r2, [r3, #32]
 80051e2:	e00e      	b.n	8005202 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80051e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80051f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d177      	bne.n	8005302 <USB_EPStartXfer+0x4c4>
 8005212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522c:	b29b      	uxth	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	4413      	add	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	00da      	lsls	r2, r3, #3
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	4413      	add	r3, r2
 8005248:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005258:	b29a      	uxth	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005262:	2b3e      	cmp	r3, #62	; 0x3e
 8005264:	d921      	bls.n	80052aa <USB_EPStartXfer+0x46c>
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <USB_EPStartXfer+0x448>
 800527c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005280:	3b01      	subs	r3, #1
 8005282:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29a      	uxth	r2, r3
 800528c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005290:	b29b      	uxth	r3, r3
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	b29b      	uxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	e056      	b.n	8005358 <USB_EPStartXfer+0x51a>
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <USB_EPStartXfer+0x48a>
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e047      	b.n	8005358 <USB_EPStartXfer+0x51a>
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <USB_EPStartXfer+0x4aa>
 80052de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e2:	3301      	adds	r3, #1
 80052e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e02a      	b.n	8005358 <USB_EPStartXfer+0x51a>
 8005302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d122      	bne.n	8005358 <USB_EPStartXfer+0x51a>
 8005312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	623b      	str	r3, [r7, #32]
 800531e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532c:	b29b      	uxth	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	4413      	add	r3, r2
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	00da      	lsls	r2, r3, #3
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	4413      	add	r3, r2
 8005348:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005352:	b29a      	uxth	r2, r3
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	891b      	ldrh	r3, [r3, #8]
 8005364:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6959      	ldr	r1, [r3, #20]
 8005374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005378:	b29b      	uxth	r3, r3
 800537a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800537e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005382:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005386:	6800      	ldr	r0, [r0, #0]
 8005388:	f001 fa65 	bl	8006856 <USB_WritePMA>
 800538c:	e3ee      	b.n	8005b6c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d177      	bne.n	800548e <USB_EPStartXfer+0x650>
 800539e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053be:	4413      	add	r3, r2
 80053c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	00da      	lsls	r2, r3, #3
 80053d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053d8:	647b      	str	r3, [r7, #68]	; 0x44
 80053da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ee:	2b3e      	cmp	r3, #62	; 0x3e
 80053f0:	d921      	bls.n	8005436 <USB_EPStartXfer+0x5f8>
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <USB_EPStartXfer+0x5d4>
 8005408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800540c:	3b01      	subs	r3, #1
 800540e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29a      	uxth	r2, r3
 8005418:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800541c:	b29b      	uxth	r3, r3
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	b29b      	uxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e056      	b.n	80054e4 <USB_EPStartXfer+0x6a6>
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <USB_EPStartXfer+0x616>
 800543e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544c:	b29a      	uxth	r2, r3
 800544e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	e047      	b.n	80054e4 <USB_EPStartXfer+0x6a6>
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800545e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <USB_EPStartXfer+0x636>
 800546a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800546e:	3301      	adds	r3, #1
 8005470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29a      	uxth	r2, r3
 800547a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800547e:	b29b      	uxth	r3, r3
 8005480:	029b      	lsls	r3, r3, #10
 8005482:	b29b      	uxth	r3, r3
 8005484:	4313      	orrs	r3, r2
 8005486:	b29a      	uxth	r2, r3
 8005488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	e02a      	b.n	80054e4 <USB_EPStartXfer+0x6a6>
 800548e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	785b      	ldrb	r3, [r3, #1]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d122      	bne.n	80054e4 <USB_EPStartXfer+0x6a6>
 800549e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
 80054aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054be:	4413      	add	r3, r2
 80054c0:	653b      	str	r3, [r7, #80]	; 0x50
 80054c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	00da      	lsls	r2, r3, #3
 80054d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d2:	4413      	add	r3, r2
 80054d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	891b      	ldrh	r3, [r3, #8]
 80054f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6959      	ldr	r1, [r3, #20]
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005504:	b29b      	uxth	r3, r3
 8005506:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800550a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800550e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005512:	6800      	ldr	r0, [r0, #0]
 8005514:	f001 f99f 	bl	8006856 <USB_WritePMA>
            ep->xfer_buff += len;
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005528:	441a      	add	r2, r3
 800552a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d90f      	bls.n	8005572 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a1a      	ldr	r2, [r3, #32]
 800555e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005562:	1ad2      	subs	r2, r2, r3
 8005564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	621a      	str	r2, [r3, #32]
 8005570:	e00e      	b.n	8005590 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	643b      	str	r3, [r7, #64]	; 0x40
 800559c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d177      	bne.n	800569c <USB_EPStartXfer+0x85e>
 80055ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	4413      	add	r3, r2
 80055ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80055d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	00da      	lsls	r2, r3, #3
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	4413      	add	r3, r2
 80055e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fc:	2b3e      	cmp	r3, #62	; 0x3e
 80055fe:	d921      	bls.n	8005644 <USB_EPStartXfer+0x806>
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <USB_EPStartXfer+0x7e2>
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	3b01      	subs	r3, #1
 800561c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29a      	uxth	r2, r3
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562a:	b29b      	uxth	r3, r3
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	b29b      	uxth	r3, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563c:	b29a      	uxth	r2, r3
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e050      	b.n	80056e6 <USB_EPStartXfer+0x8a8>
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <USB_EPStartXfer+0x824>
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565a:	b29a      	uxth	r2, r3
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e041      	b.n	80056e6 <USB_EPStartXfer+0x8a8>
 8005662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <USB_EPStartXfer+0x844>
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	3301      	adds	r3, #1
 800567e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29a      	uxth	r2, r3
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	b29b      	uxth	r3, r3
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	b29b      	uxth	r3, r3
 8005692:	4313      	orrs	r3, r2
 8005694:	b29a      	uxth	r2, r3
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	e024      	b.n	80056e6 <USB_EPStartXfer+0x8a8>
 800569c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d11c      	bne.n	80056e6 <USB_EPStartXfer+0x8a8>
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c0:	4413      	add	r3, r2
 80056c2:	643b      	str	r3, [r7, #64]	; 0x40
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	00da      	lsls	r2, r3, #3
 80056d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d4:	4413      	add	r3, r2
 80056d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	895b      	ldrh	r3, [r3, #10]
 80056f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6959      	ldr	r1, [r3, #20]
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005706:	b29b      	uxth	r3, r3
 8005708:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800570c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005710:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005714:	6800      	ldr	r0, [r0, #0]
 8005716:	f001 f89e 	bl	8006856 <USB_WritePMA>
 800571a:	e227      	b.n	8005b6c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800571c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800572c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a8:	4413      	add	r3, r2
 80057aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	00da      	lsls	r2, r3, #3
 80057ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057bc:	4413      	add	r3, r2
 80057be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	891b      	ldrh	r3, [r3, #8]
 80057da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6959      	ldr	r1, [r3, #20]
 80057ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057fc:	6800      	ldr	r0, [r0, #0]
 80057fe:	f001 f82a 	bl	8006856 <USB_WritePMA>
 8005802:	e1b3      	b.n	8005b6c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80c6 	beq.w	80059d6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800584a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	673b      	str	r3, [r7, #112]	; 0x70
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d177      	bne.n	8005956 <USB_EPStartXfer+0xb18>
 8005866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	66bb      	str	r3, [r7, #104]	; 0x68
 8005872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005880:	b29b      	uxth	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005886:	4413      	add	r3, r2
 8005888:	66bb      	str	r3, [r7, #104]	; 0x68
 800588a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	00da      	lsls	r2, r3, #3
 8005898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589a:	4413      	add	r3, r2
 800589c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058a0:	667b      	str	r3, [r7, #100]	; 0x64
 80058a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b6:	2b3e      	cmp	r3, #62	; 0x3e
 80058b8:	d921      	bls.n	80058fe <USB_EPStartXfer+0xac0>
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <USB_EPStartXfer+0xa9c>
 80058d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058d4:	3b01      	subs	r3, #1
 80058d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29a      	uxth	r2, r3
 80058e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	029b      	lsls	r3, r3, #10
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	4313      	orrs	r3, r2
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	e050      	b.n	80059a0 <USB_EPStartXfer+0xb62>
 80058fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <USB_EPStartXfer+0xade>
 8005906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005914:	b29a      	uxth	r2, r3
 8005916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005918:	801a      	strh	r2, [r3, #0]
 800591a:	e041      	b.n	80059a0 <USB_EPStartXfer+0xb62>
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <USB_EPStartXfer+0xafe>
 8005932:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005936:	3301      	adds	r3, #1
 8005938:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800593c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29a      	uxth	r2, r3
 8005942:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005946:	b29b      	uxth	r3, r3
 8005948:	029b      	lsls	r3, r3, #10
 800594a:	b29b      	uxth	r3, r3
 800594c:	4313      	orrs	r3, r2
 800594e:	b29a      	uxth	r2, r3
 8005950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	e024      	b.n	80059a0 <USB_EPStartXfer+0xb62>
 8005956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d11c      	bne.n	80059a0 <USB_EPStartXfer+0xb62>
 8005966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005974:	b29b      	uxth	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800597a:	4413      	add	r3, r2
 800597c:	673b      	str	r3, [r7, #112]	; 0x70
 800597e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	00da      	lsls	r2, r3, #3
 800598c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800598e:	4413      	add	r3, r2
 8005990:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005994:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599a:	b29a      	uxth	r2, r3
 800599c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	895b      	ldrh	r3, [r3, #10]
 80059ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6959      	ldr	r1, [r3, #20]
 80059bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059ce:	6800      	ldr	r0, [r0, #0]
 80059d0:	f000 ff41 	bl	8006856 <USB_WritePMA>
 80059d4:	e0ca      	b.n	8005b6c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d177      	bne.n	8005ad6 <USB_EPStartXfer+0xc98>
 80059e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a06:	4413      	add	r3, r2
 8005a08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	00da      	lsls	r2, r3, #3
 8005a18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a36:	2b3e      	cmp	r3, #62	; 0x3e
 8005a38:	d921      	bls.n	8005a7e <USB_EPStartXfer+0xc40>
 8005a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <USB_EPStartXfer+0xc1c>
 8005a50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a54:	3b01      	subs	r3, #1
 8005a56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	029b      	lsls	r3, r3, #10
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	e05c      	b.n	8005b38 <USB_EPStartXfer+0xcfa>
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <USB_EPStartXfer+0xc5e>
 8005a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e04d      	b.n	8005b38 <USB_EPStartXfer+0xcfa>
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa0:	085b      	lsrs	r3, r3, #1
 8005aa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <USB_EPStartXfer+0xc7e>
 8005ab2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	029b      	lsls	r3, r3, #10
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4313      	orrs	r3, r2
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	e030      	b.n	8005b38 <USB_EPStartXfer+0xcfa>
 8005ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d128      	bne.n	8005b38 <USB_EPStartXfer+0xcfa>
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	00da      	lsls	r2, r3, #3
 8005b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b22:	4413      	add	r3, r2
 8005b24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	891b      	ldrh	r3, [r3, #8]
 8005b44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6959      	ldr	r1, [r3, #20]
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b66:	6800      	ldr	r0, [r0, #0]
 8005b68:	f000 fe75 	bl	8006856 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b92:	817b      	strh	r3, [r7, #10]
 8005b94:	897b      	ldrh	r3, [r7, #10]
 8005b96:	f083 0310 	eor.w	r3, r3, #16
 8005b9a:	817b      	strh	r3, [r7, #10]
 8005b9c:	897b      	ldrh	r3, [r7, #10]
 8005b9e:	f083 0320 	eor.w	r3, r3, #32
 8005ba2:	817b      	strh	r3, [r7, #10]
 8005ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	897b      	ldrh	r3, [r7, #10]
 8005bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8013      	strh	r3, [r2, #0]
 8005bd4:	f000 bcde 	b.w	8006594 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	7b1b      	ldrb	r3, [r3, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 80bb 	bne.w	8005d60 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d917      	bls.n	8005c36 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	619a      	str	r2, [r3, #24]
 8005c34:	e00e      	b.n	8005c54 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c78:	4413      	add	r3, r2
 8005c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	00da      	lsls	r2, r3, #3
 8005c8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb4:	d924      	bls.n	8005d00 <USB_EPStartXfer+0xec2>
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <USB_EPStartXfer+0xe98>
 8005ccc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	029b      	lsls	r3, r3, #10
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	f000 bc10 	b.w	8006520 <USB_EPStartXfer+0x16e2>
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10c      	bne.n	8005d22 <USB_EPStartXfer+0xee4>
 8005d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e3fe      	b.n	8006520 <USB_EPStartXfer+0x16e2>
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <USB_EPStartXfer+0xf04>
 8005d38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4313      	orrs	r3, r2
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e3df      	b.n	8006520 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	78db      	ldrb	r3, [r3, #3]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	f040 8218 	bne.w	80061a2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 809d 	bne.w	8005ebe <USB_EPStartXfer+0x1080>
 8005d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da8:	4413      	add	r3, r2
 8005daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	00da      	lsls	r2, r3, #3
 8005dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b3e      	cmp	r3, #62	; 0x3e
 8005dec:	d92b      	bls.n	8005e46 <USB_EPStartXfer+0x1008>
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <USB_EPStartXfer+0xfe0>
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	029b      	lsls	r3, r3, #10
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4313      	orrs	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e070      	b.n	8005f28 <USB_EPStartXfer+0x10ea>
 8005e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10c      	bne.n	8005e70 <USB_EPStartXfer+0x1032>
 8005e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	e05b      	b.n	8005f28 <USB_EPStartXfer+0x10ea>
 8005e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <USB_EPStartXfer+0x1062>
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005eba:	801a      	strh	r2, [r3, #0]
 8005ebc:	e034      	b.n	8005f28 <USB_EPStartXfer+0x10ea>
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d12c      	bne.n	8005f28 <USB_EPStartXfer+0x10ea>
 8005ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	00da      	lsls	r2, r3, #3
 8005f06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 809d 	bne.w	8006082 <USB_EPStartXfer+0x1244>
 8005f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	00da      	lsls	r2, r3, #3
 8005f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f84:	4413      	add	r3, r2
 8005f86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b3e      	cmp	r3, #62	; 0x3e
 8005fb0:	d92b      	bls.n	800600a <USB_EPStartXfer+0x11cc>
 8005fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <USB_EPStartXfer+0x11a4>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	029b      	lsls	r3, r3, #10
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	e069      	b.n	80060de <USB_EPStartXfer+0x12a0>
 800600a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10c      	bne.n	8006034 <USB_EPStartXfer+0x11f6>
 800601a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602a:	b29a      	uxth	r2, r3
 800602c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	e054      	b.n	80060de <USB_EPStartXfer+0x12a0>
 8006034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <USB_EPStartXfer+0x1226>
 800605a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605e:	3301      	adds	r3, #1
 8006060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006070:	b29b      	uxth	r3, r3
 8006072:	029b      	lsls	r3, r3, #10
 8006074:	b29b      	uxth	r3, r3
 8006076:	4313      	orrs	r3, r2
 8006078:	b29a      	uxth	r2, r3
 800607a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	e02d      	b.n	80060de <USB_EPStartXfer+0x12a0>
 8006082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d125      	bne.n	80060de <USB_EPStartXfer+0x12a0>
 8006092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006096:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060a8:	4413      	add	r3, r2
 80060aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	00da      	lsls	r2, r3, #3
 80060bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80060de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 8218 	beq.w	8006520 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006110:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <USB_EPStartXfer+0x12ea>
 800611c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006128:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800612c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006130:	2b00      	cmp	r3, #0
 8006132:	f040 81f5 	bne.w	8006520 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006136:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	f040 81ee 	bne.w	8006520 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800618c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006198:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800619c:	b29b      	uxth	r3, r3
 800619e:	8013      	strh	r3, [r2, #0]
 80061a0:	e1be      	b.n	8006520 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80061a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	78db      	ldrb	r3, [r3, #3]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	f040 81b4 	bne.w	800651c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d917      	bls.n	8006200 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	619a      	str	r2, [r3, #24]
 80061fe:	e00e      	b.n	800621e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800621e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 8085 	bne.w	800633a <USB_EPStartXfer+0x14fc>
 8006230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624c:	b29b      	uxth	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006254:	4413      	add	r3, r2
 8006256:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	00da      	lsls	r2, r3, #3
 8006268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800626c:	4413      	add	r3, r2
 800626e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628e:	2b3e      	cmp	r3, #62	; 0x3e
 8006290:	d923      	bls.n	80062da <USB_EPStartXfer+0x149c>
 8006292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d104      	bne.n	80062b2 <USB_EPStartXfer+0x1474>
 80062a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ac:	3b01      	subs	r3, #1
 80062ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062be:	b29b      	uxth	r3, r3
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	4313      	orrs	r3, r2
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	e060      	b.n	800639c <USB_EPStartXfer+0x155e>
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10c      	bne.n	80062fc <USB_EPStartXfer+0x14be>
 80062e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e04f      	b.n	800639c <USB_EPStartXfer+0x155e>
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d004      	beq.n	800631c <USB_EPStartXfer+0x14de>
 8006312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006316:	3301      	adds	r3, #1
 8006318:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800631c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29b      	uxth	r3, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	b29a      	uxth	r2, r3
 8006332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	e030      	b.n	800639c <USB_EPStartXfer+0x155e>
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d128      	bne.n	800639c <USB_EPStartXfer+0x155e>
 800634a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006366:	b29b      	uxth	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800636e:	4413      	add	r3, r2
 8006370:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	00da      	lsls	r2, r3, #3
 8006382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006386:	4413      	add	r3, r2
 8006388:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800638c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 8085 	bne.w	80064c6 <USB_EPStartXfer+0x1688>
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063e0:	4413      	add	r3, r2
 80063e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	00da      	lsls	r2, r3, #3
 80063f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063f8:	4413      	add	r3, r2
 80063fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800640e:	b29a      	uxth	r2, r3
 8006410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641a:	2b3e      	cmp	r3, #62	; 0x3e
 800641c:	d923      	bls.n	8006466 <USB_EPStartXfer+0x1628>
 800641e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <USB_EPStartXfer+0x1600>
 8006434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006438:	3b01      	subs	r3, #1
 800643a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800643e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29a      	uxth	r2, r3
 8006446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800644a:	b29b      	uxth	r3, r3
 800644c:	029b      	lsls	r3, r3, #10
 800644e:	b29b      	uxth	r3, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	e05c      	b.n	8006520 <USB_EPStartXfer+0x16e2>
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <USB_EPStartXfer+0x164a>
 800646e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647e:	b29a      	uxth	r2, r3
 8006480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	e04b      	b.n	8006520 <USB_EPStartXfer+0x16e2>
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <USB_EPStartXfer+0x166a>
 800649e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a2:	3301      	adds	r3, #1
 80064a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	029b      	lsls	r3, r3, #10
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	4313      	orrs	r3, r2
 80064bc:	b29a      	uxth	r2, r3
 80064be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	e02c      	b.n	8006520 <USB_EPStartXfer+0x16e2>
 80064c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d124      	bne.n	8006520 <USB_EPStartXfer+0x16e2>
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064ec:	4413      	add	r3, r2
 80064ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	00da      	lsls	r2, r3, #3
 8006500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006504:	4413      	add	r3, r2
 8006506:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800650a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800650e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006512:	b29a      	uxth	r2, r3
 8006514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	e001      	b.n	8006520 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e03a      	b.n	8006596 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800654a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800654e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006552:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006556:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800655a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800655e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	441a      	add	r2, r3
 800657c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d020      	beq.n	80065f4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c8:	81bb      	strh	r3, [r7, #12]
 80065ca:	89bb      	ldrh	r3, [r7, #12]
 80065cc:	f083 0310 	eor.w	r3, r3, #16
 80065d0:	81bb      	strh	r3, [r7, #12]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	89bb      	ldrh	r3, [r7, #12]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]
 80065f2:	e01f      	b.n	8006634 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	81fb      	strh	r3, [r7, #14]
 800660c:	89fb      	ldrh	r3, [r7, #14]
 800660e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006612:	81fb      	strh	r3, [r7, #14]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	89fb      	ldrh	r3, [r7, #14]
 8006620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006630:	b29b      	uxth	r3, r3
 8006632:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006642:	b480      	push	{r7}
 8006644:	b087      	sub	sp, #28
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	7b1b      	ldrb	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 809d 	bne.w	8006790 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	785b      	ldrb	r3, [r3, #1]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d04c      	beq.n	80066f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	823b      	strh	r3, [r7, #16]
 800666c:	8a3b      	ldrh	r3, [r7, #16]
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01b      	beq.n	80066ae <USB_EPClearStall+0x6c>
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668c:	81fb      	strh	r3, [r7, #14]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	89fb      	ldrh	r3, [r7, #14]
 800669a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	78db      	ldrb	r3, [r3, #3]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d06c      	beq.n	8006790 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	81bb      	strh	r3, [r7, #12]
 80066ce:	89bb      	ldrh	r3, [r7, #12]
 80066d0:	f083 0320 	eor.w	r3, r3, #32
 80066d4:	81bb      	strh	r3, [r7, #12]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	441a      	add	r2, r3
 80066e0:	89bb      	ldrh	r3, [r7, #12]
 80066e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	8013      	strh	r3, [r2, #0]
 80066f6:	e04b      	b.n	8006790 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	82fb      	strh	r3, [r7, #22]
 8006706:	8afb      	ldrh	r3, [r7, #22]
 8006708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01b      	beq.n	8006748 <USB_EPClearStall+0x106>
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	82bb      	strh	r3, [r7, #20]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	441a      	add	r2, r3
 8006732:	8abb      	ldrh	r3, [r7, #20]
 8006734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006744:	b29b      	uxth	r3, r3
 8006746:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	827b      	strh	r3, [r7, #18]
 8006760:	8a7b      	ldrh	r3, [r7, #18]
 8006762:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006766:	827b      	strh	r3, [r7, #18]
 8006768:	8a7b      	ldrh	r3, [r7, #18]
 800676a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800676e:	827b      	strh	r3, [r7, #18]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	8a7b      	ldrh	r3, [r7, #18]
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d103      	bne.n	80067b8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2280      	movs	r2, #128	; 0x80
 80067b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067de:	b29a      	uxth	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006802:	b29b      	uxth	r3, r3
 8006804:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800682c:	b29b      	uxth	r3, r3
 800682e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006830:	68fb      	ldr	r3, [r7, #12]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006856:	b480      	push	{r7}
 8006858:	b08b      	sub	sp, #44	; 0x2c
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	4611      	mov	r1, r2
 8006862:	461a      	mov	r2, r3
 8006864:	460b      	mov	r3, r1
 8006866:	80fb      	strh	r3, [r7, #6]
 8006868:	4613      	mov	r3, r2
 800686a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800686c:	88bb      	ldrh	r3, [r7, #4]
 800686e:	3301      	adds	r3, #1
 8006870:	085b      	lsrs	r3, r3, #1
 8006872:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800687c:	88fa      	ldrh	r2, [r7, #6]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006886:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
 800688c:	e01b      	b.n	80068c6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	3301      	adds	r3, #1
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	b21a      	sxth	r2, r3
 800689e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	b21b      	sxth	r3, r3
 80068a6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	8a7a      	ldrh	r2, [r7, #18]
 80068ac:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	3302      	adds	r3, #2
 80068b2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	3301      	adds	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	3301      	adds	r3, #1
 80068be:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	3b01      	subs	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e0      	bne.n	800688e <USB_WritePMA+0x38>
  }
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	372c      	adds	r7, #44	; 0x2c
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068da:	b480      	push	{r7}
 80068dc:	b08b      	sub	sp, #44	; 0x2c
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	4611      	mov	r1, r2
 80068e6:	461a      	mov	r2, r3
 80068e8:	460b      	mov	r3, r1
 80068ea:	80fb      	strh	r3, [r7, #6]
 80068ec:	4613      	mov	r3, r2
 80068ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80068f0:	88bb      	ldrh	r3, [r7, #4]
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006900:	88fa      	ldrh	r2, [r7, #6]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
 8006910:	e018      	b.n	8006944 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	3302      	adds	r3, #2
 800691e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	b2da      	uxtb	r2, r3
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	3301      	adds	r3, #1
 800692c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	0a1b      	lsrs	r3, r3, #8
 8006932:	b2da      	uxtb	r2, r3
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	3301      	adds	r3, #1
 800693c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	3b01      	subs	r3, #1
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e3      	bne.n	8006912 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800694a:	88bb      	ldrh	r3, [r7, #4]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	701a      	strb	r2, [r3, #0]
  }
}
 8006966:	bf00      	nop
 8006968:	372c      	adds	r7, #44	; 0x2c
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006980:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006984:	f002 fc80 	bl	8009288 <USBD_static_malloc>
 8006988:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d109      	bne.n	80069a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32b0      	adds	r2, #176	; 0xb0
 800699a:	2100      	movs	r1, #0
 800699c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80069a0:	2302      	movs	r3, #2
 80069a2:	e0d4      	b.n	8006b4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80069a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80069a8:	2100      	movs	r1, #0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f002 fc95 	bl	80092da <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	32b0      	adds	r2, #176	; 0xb0
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	32b0      	adds	r2, #176	; 0xb0
 80069ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7c1b      	ldrb	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d138      	bne.n	8006a4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069dc:	4b5e      	ldr	r3, [pc, #376]	; (8006b58 <USBD_CDC_Init+0x1e4>)
 80069de:	7819      	ldrb	r1, [r3, #0]
 80069e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e4:	2202      	movs	r2, #2
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f002 fa50 	bl	8008e8c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80069ec:	4b5a      	ldr	r3, [pc, #360]	; (8006b58 <USBD_CDC_Init+0x1e4>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 020f 	and.w	r2, r3, #15
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3324      	adds	r3, #36	; 0x24
 8006a02:	2201      	movs	r2, #1
 8006a04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a06:	4b55      	ldr	r3, [pc, #340]	; (8006b5c <USBD_CDC_Init+0x1e8>)
 8006a08:	7819      	ldrb	r1, [r3, #0]
 8006a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a0e:	2202      	movs	r2, #2
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f002 fa3b 	bl	8008e8c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a16:	4b51      	ldr	r3, [pc, #324]	; (8006b5c <USBD_CDC_Init+0x1e8>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	f003 020f 	and.w	r2, r3, #15
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a2e:	2201      	movs	r2, #1
 8006a30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a32:	4b4b      	ldr	r3, [pc, #300]	; (8006b60 <USBD_CDC_Init+0x1ec>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	f003 020f 	and.w	r2, r3, #15
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	3326      	adds	r3, #38	; 0x26
 8006a48:	2210      	movs	r2, #16
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e035      	b.n	8006aba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a4e:	4b42      	ldr	r3, [pc, #264]	; (8006b58 <USBD_CDC_Init+0x1e4>)
 8006a50:	7819      	ldrb	r1, [r3, #0]
 8006a52:	2340      	movs	r3, #64	; 0x40
 8006a54:	2202      	movs	r2, #2
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 fa18 	bl	8008e8c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a5c:	4b3e      	ldr	r3, [pc, #248]	; (8006b58 <USBD_CDC_Init+0x1e4>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	3324      	adds	r3, #36	; 0x24
 8006a72:	2201      	movs	r2, #1
 8006a74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a76:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <USBD_CDC_Init+0x1e8>)
 8006a78:	7819      	ldrb	r1, [r3, #0]
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f002 fa04 	bl	8008e8c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a84:	4b35      	ldr	r3, [pc, #212]	; (8006b5c <USBD_CDC_Init+0x1e8>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006aa0:	4b2f      	ldr	r3, [pc, #188]	; (8006b60 <USBD_CDC_Init+0x1ec>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 020f 	and.w	r2, r3, #15
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	3326      	adds	r3, #38	; 0x26
 8006ab6:	2210      	movs	r2, #16
 8006ab8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006aba:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <USBD_CDC_Init+0x1ec>)
 8006abc:	7819      	ldrb	r1, [r3, #0]
 8006abe:	2308      	movs	r3, #8
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f002 f9e2 	bl	8008e8c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ac8:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <USBD_CDC_Init+0x1ec>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	3324      	adds	r3, #36	; 0x24
 8006ade:	2201      	movs	r2, #1
 8006ae0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	33b0      	adds	r3, #176	; 0xb0
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e018      	b.n	8006b4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7c1b      	ldrb	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b24:	4b0d      	ldr	r3, [pc, #52]	; (8006b5c <USBD_CDC_Init+0x1e8>)
 8006b26:	7819      	ldrb	r1, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f002 fb26 	bl	8009184 <USBD_LL_PrepareReceive>
 8006b38:	e008      	b.n	8006b4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b3a:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <USBD_CDC_Init+0x1e8>)
 8006b3c:	7819      	ldrb	r1, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 fb1c 	bl	8009184 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200000a3 	.word	0x200000a3
 8006b5c:	200000a4 	.word	0x200000a4
 8006b60:	200000a5 	.word	0x200000a5

08006b64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b70:	4b3a      	ldr	r3, [pc, #232]	; (8006c5c <USBD_CDC_DeInit+0xf8>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f002 f9c6 	bl	8008f08 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b7c:	4b37      	ldr	r3, [pc, #220]	; (8006c5c <USBD_CDC_DeInit+0xf8>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	3324      	adds	r3, #36	; 0x24
 8006b92:	2200      	movs	r2, #0
 8006b94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b96:	4b32      	ldr	r3, [pc, #200]	; (8006c60 <USBD_CDC_DeInit+0xfc>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f002 f9b3 	bl	8008f08 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ba2:	4b2f      	ldr	r3, [pc, #188]	; (8006c60 <USBD_CDC_DeInit+0xfc>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bba:	2200      	movs	r2, #0
 8006bbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006bbe:	4b29      	ldr	r3, [pc, #164]	; (8006c64 <USBD_CDC_DeInit+0x100>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f002 f99f 	bl	8008f08 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006bca:	4b26      	ldr	r3, [pc, #152]	; (8006c64 <USBD_CDC_DeInit+0x100>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f003 020f 	and.w	r2, r3, #15
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	3324      	adds	r3, #36	; 0x24
 8006be0:	2200      	movs	r2, #0
 8006be2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006be4:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <USBD_CDC_DeInit+0x100>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f003 020f 	and.w	r2, r3, #15
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3326      	adds	r3, #38	; 0x26
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	32b0      	adds	r2, #176	; 0xb0
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01f      	beq.n	8006c50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	33b0      	adds	r3, #176	; 0xb0
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32b0      	adds	r2, #176	; 0xb0
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f002 fb36 	bl	80092a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	32b0      	adds	r2, #176	; 0xb0
 8006c42:	2100      	movs	r1, #0
 8006c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200000a3 	.word	0x200000a3
 8006c60:	200000a4 	.word	0x200000a4
 8006c64:	200000a5 	.word	0x200000a5

08006c68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	32b0      	adds	r2, #176	; 0xb0
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e0bf      	b.n	8006e18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d050      	beq.n	8006d46 <USBD_CDC_Setup+0xde>
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	f040 80af 	bne.w	8006e08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88db      	ldrh	r3, [r3, #6]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d03a      	beq.n	8006d28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	b25b      	sxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	da1b      	bge.n	8006cf4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	33b0      	adds	r3, #176	; 0xb0
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006cd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	88d2      	ldrh	r2, [r2, #6]
 8006cd8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	88db      	ldrh	r3, [r3, #6]
 8006cde:	2b07      	cmp	r3, #7
 8006ce0:	bf28      	it	cs
 8006ce2:	2307      	movcs	r3, #7
 8006ce4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	89fa      	ldrh	r2, [r7, #14]
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fce1 	bl	80086b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006cf2:	e090      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	785a      	ldrb	r2, [r3, #1]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	88db      	ldrh	r3, [r3, #6]
 8006d02:	2b3f      	cmp	r3, #63	; 0x3f
 8006d04:	d803      	bhi.n	8006d0e <USBD_CDC_Setup+0xa6>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	88db      	ldrh	r3, [r3, #6]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	e000      	b.n	8006d10 <USBD_CDC_Setup+0xa8>
 8006d0e:	2240      	movs	r2, #64	; 0x40
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006d16:	6939      	ldr	r1, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fcf3 	bl	800870c <USBD_CtlPrepareRx>
      break;
 8006d26:	e076      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	33b0      	adds	r3, #176	; 0xb0
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	7850      	ldrb	r0, [r2, #1]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	4798      	blx	r3
      break;
 8006d44:	e067      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b0b      	cmp	r3, #11
 8006d4c:	d851      	bhi.n	8006df2 <USBD_CDC_Setup+0x18a>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <USBD_CDC_Setup+0xec>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d85 	.word	0x08006d85
 8006d58:	08006e01 	.word	0x08006e01
 8006d5c:	08006df3 	.word	0x08006df3
 8006d60:	08006df3 	.word	0x08006df3
 8006d64:	08006df3 	.word	0x08006df3
 8006d68:	08006df3 	.word	0x08006df3
 8006d6c:	08006df3 	.word	0x08006df3
 8006d70:	08006df3 	.word	0x08006df3
 8006d74:	08006df3 	.word	0x08006df3
 8006d78:	08006df3 	.word	0x08006df3
 8006d7c:	08006daf 	.word	0x08006daf
 8006d80:	08006dd9 	.word	0x08006dd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d107      	bne.n	8006da0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d90:	f107 030a 	add.w	r3, r7, #10
 8006d94:	2202      	movs	r2, #2
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fc8b 	bl	80086b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d9e:	e032      	b.n	8006e06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 fc15 	bl	80085d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	75fb      	strb	r3, [r7, #23]
          break;
 8006dac:	e02b      	b.n	8006e06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d107      	bne.n	8006dca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dba:	f107 030d 	add.w	r3, r7, #13
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fc76 	bl	80086b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dc8:	e01d      	b.n	8006e06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fc00 	bl	80085d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006dd6:	e016      	b.n	8006e06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d00f      	beq.n	8006e04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fbf3 	bl	80085d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006df0:	e008      	b.n	8006e04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fbec 	bl	80085d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dfe:	e002      	b.n	8006e06 <USBD_CDC_Setup+0x19e>
          break;
 8006e00:	bf00      	nop
 8006e02:	e008      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>
          break;
 8006e04:	bf00      	nop
      }
      break;
 8006e06:	e006      	b.n	8006e16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fbe1 	bl	80085d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e10:	2303      	movs	r3, #3
 8006e12:	75fb      	strb	r3, [r7, #23]
      break;
 8006e14:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32b0      	adds	r2, #176	; 0xb0
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e065      	b.n	8006f16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32b0      	adds	r2, #176	; 0xb0
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3318      	adds	r3, #24
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d02f      	beq.n	8006ed4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	f003 020f 	and.w	r2, r3, #15
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	3318      	adds	r3, #24
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	f003 010f 	and.w	r1, r3, #15
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	460b      	mov	r3, r1
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	4403      	add	r3, r0
 8006e9c:	3338      	adds	r3, #56	; 0x38
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d112      	bne.n	8006ed4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ec6:	78f9      	ldrb	r1, [r7, #3]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2200      	movs	r2, #0
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f002 f921 	bl	8009114 <USBD_LL_Transmit>
 8006ed2:	e01f      	b.n	8006f14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	33b0      	adds	r3, #176	; 0xb0
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d010      	beq.n	8006f14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	33b0      	adds	r3, #176	; 0xb0
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f10:	78fa      	ldrb	r2, [r7, #3]
 8006f12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	32b0      	adds	r2, #176	; 0xb0
 8006f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	32b0      	adds	r2, #176	; 0xb0
 8006f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e01a      	b.n	8006f86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f002 f94d 	bl	80091f4 <USBD_LL_GetRxDataSize>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	33b0      	adds	r3, #176	; 0xb0
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f80:	4611      	mov	r1, r2
 8006f82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	32b0      	adds	r2, #176	; 0xb0
 8006fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e025      	b.n	8006ffc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	33b0      	adds	r3, #176	; 0xb0
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01a      	beq.n	8006ffa <USBD_CDC_EP0_RxReady+0x6c>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fca:	2bff      	cmp	r3, #255	; 0xff
 8006fcc:	d015      	beq.n	8006ffa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	33b0      	adds	r3, #176	; 0xb0
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006fe6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006fee:	b292      	uxth	r2, r2
 8006ff0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800700c:	2182      	movs	r1, #130	; 0x82
 800700e:	4818      	ldr	r0, [pc, #96]	; (8007070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007010:	f000 fc7d 	bl	800790e <USBD_GetEpDesc>
 8007014:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007016:	2101      	movs	r1, #1
 8007018:	4815      	ldr	r0, [pc, #84]	; (8007070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800701a:	f000 fc78 	bl	800790e <USBD_GetEpDesc>
 800701e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007020:	2181      	movs	r1, #129	; 0x81
 8007022:	4813      	ldr	r0, [pc, #76]	; (8007070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007024:	f000 fc73 	bl	800790e <USBD_GetEpDesc>
 8007028:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2210      	movs	r2, #16
 8007034:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2200      	movs	r2, #0
 8007040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007044:	711a      	strb	r2, [r3, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d006      	beq.n	800705e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007058:	711a      	strb	r2, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2243      	movs	r2, #67	; 0x43
 8007062:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007064:	4b02      	ldr	r3, [pc, #8]	; (8007070 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000060 	.word	0x20000060

08007074 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800707c:	2182      	movs	r1, #130	; 0x82
 800707e:	4818      	ldr	r0, [pc, #96]	; (80070e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007080:	f000 fc45 	bl	800790e <USBD_GetEpDesc>
 8007084:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007086:	2101      	movs	r1, #1
 8007088:	4815      	ldr	r0, [pc, #84]	; (80070e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800708a:	f000 fc40 	bl	800790e <USBD_GetEpDesc>
 800708e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007090:	2181      	movs	r1, #129	; 0x81
 8007092:	4813      	ldr	r0, [pc, #76]	; (80070e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007094:	f000 fc3b 	bl	800790e <USBD_GetEpDesc>
 8007098:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2210      	movs	r2, #16
 80070a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d006      	beq.n	80070ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2200      	movs	r2, #0
 80070b0:	711a      	strb	r2, [r3, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f042 0202 	orr.w	r2, r2, #2
 80070b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	711a      	strb	r2, [r3, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f042 0202 	orr.w	r2, r2, #2
 80070cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2243      	movs	r2, #67	; 0x43
 80070d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070d4:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000060 	.word	0x20000060

080070e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070ec:	2182      	movs	r1, #130	; 0x82
 80070ee:	4818      	ldr	r0, [pc, #96]	; (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070f0:	f000 fc0d 	bl	800790e <USBD_GetEpDesc>
 80070f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070f6:	2101      	movs	r1, #1
 80070f8:	4815      	ldr	r0, [pc, #84]	; (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070fa:	f000 fc08 	bl	800790e <USBD_GetEpDesc>
 80070fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007100:	2181      	movs	r1, #129	; 0x81
 8007102:	4813      	ldr	r0, [pc, #76]	; (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007104:	f000 fc03 	bl	800790e <USBD_GetEpDesc>
 8007108:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2210      	movs	r2, #16
 8007114:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d006      	beq.n	800712a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2200      	movs	r2, #0
 8007120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007124:	711a      	strb	r2, [r3, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007138:	711a      	strb	r2, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2243      	movs	r2, #67	; 0x43
 8007142:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000060 	.word	0x20000060

08007154 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220a      	movs	r2, #10
 8007160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007162:	4b03      	ldr	r3, [pc, #12]	; (8007170 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	2000001c 	.word	0x2000001c

08007174 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e009      	b.n	800719c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	33b0      	adds	r3, #176	; 0xb0
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	32b0      	adds	r2, #176	; 0xb0
 80071be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e008      	b.n	80071e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	32b0      	adds	r2, #176	; 0xb0
 8007200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007204:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	e004      	b.n	800721a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32b0      	adds	r2, #176	; 0xb0
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	32b0      	adds	r2, #176	; 0xb0
 800724a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007252:	2303      	movs	r3, #3
 8007254:	e018      	b.n	8007288 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7c1b      	ldrb	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10a      	bne.n	8007274 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800725e:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <USBD_CDC_ReceivePacket+0x68>)
 8007260:	7819      	ldrb	r1, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 ff89 	bl	8009184 <USBD_LL_PrepareReceive>
 8007272:	e008      	b.n	8007286 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <USBD_CDC_ReceivePacket+0x68>)
 8007276:	7819      	ldrb	r1, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800727e:	2340      	movs	r3, #64	; 0x40
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 ff7f 	bl	8009184 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	200000a4 	.word	0x200000a4

08007294 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e01f      	b.n	80072ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	79fa      	ldrb	r2, [r7, #7]
 80072de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f001 fd3f 	bl	8008d64 <USBD_LL_Init>
 80072e6:	4603      	mov	r3, r0
 80072e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007308:	2303      	movs	r3, #3
 800730a:	e025      	b.n	8007358 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	32ae      	adds	r2, #174	; 0xae
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00f      	beq.n	8007348 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	32ae      	adds	r2, #174	; 0xae
 8007332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	f107 020e 	add.w	r2, r7, #14
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	4602      	mov	r2, r0
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 fd5d 	bl	8008e28 <USBD_LL_Start>
 800736e:	4603      	mov	r3, r0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007380:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d009      	beq.n	80073bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	4611      	mov	r1, r2
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	78fa      	ldrb	r2, [r7, #3]
 80073e0:	4611      	mov	r1, r2
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80073ec:	2303      	movs	r3, #3
 80073ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f001 f8a6 	bl	800855e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007420:	461a      	mov	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	2b02      	cmp	r3, #2
 8007434:	d01a      	beq.n	800746c <USBD_LL_SetupStage+0x72>
 8007436:	2b02      	cmp	r3, #2
 8007438:	d822      	bhi.n	8007480 <USBD_LL_SetupStage+0x86>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <USBD_LL_SetupStage+0x4a>
 800743e:	2b01      	cmp	r3, #1
 8007440:	d00a      	beq.n	8007458 <USBD_LL_SetupStage+0x5e>
 8007442:	e01d      	b.n	8007480 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fad3 	bl	80079f8 <USBD_StdDevReq>
 8007452:	4603      	mov	r3, r0
 8007454:	73fb      	strb	r3, [r7, #15]
      break;
 8007456:	e020      	b.n	800749a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fb3b 	bl	8007adc <USBD_StdItfReq>
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]
      break;
 800746a:	e016      	b.n	800749a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fb9d 	bl	8007bb4 <USBD_StdEPReq>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]
      break;
 800747e:	e00c      	b.n	800749a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007486:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800748a:	b2db      	uxtb	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fd70 	bl	8008f74 <USBD_LL_StallEP>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
      break;
 8007498:	bf00      	nop
  }

  return ret;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	460b      	mov	r3, r1
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074b6:	7afb      	ldrb	r3, [r7, #11]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d16e      	bne.n	800759a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	f040 8098 	bne.w	8007600 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d913      	bls.n	8007504 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	4293      	cmp	r3, r2
 80074f4:	bf28      	it	cs
 80074f6:	4613      	movcs	r3, r2
 80074f8:	461a      	mov	r2, r3
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f001 f922 	bl	8008746 <USBD_CtlContinueRx>
 8007502:	e07d      	b.n	8007600 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b02      	cmp	r3, #2
 8007510:	d014      	beq.n	800753c <USBD_LL_DataOutStage+0x98>
 8007512:	2b02      	cmp	r3, #2
 8007514:	d81d      	bhi.n	8007552 <USBD_LL_DataOutStage+0xae>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <USBD_LL_DataOutStage+0x7c>
 800751a:	2b01      	cmp	r3, #1
 800751c:	d003      	beq.n	8007526 <USBD_LL_DataOutStage+0x82>
 800751e:	e018      	b.n	8007552 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	75bb      	strb	r3, [r7, #22]
            break;
 8007524:	e018      	b.n	8007558 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800752c:	b2db      	uxtb	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f9d2 	bl	80078da <USBD_CoreFindIF>
 8007536:	4603      	mov	r3, r0
 8007538:	75bb      	strb	r3, [r7, #22]
            break;
 800753a:	e00d      	b.n	8007558 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4619      	mov	r1, r3
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f9d4 	bl	80078f4 <USBD_CoreFindEP>
 800754c:	4603      	mov	r3, r0
 800754e:	75bb      	strb	r3, [r7, #22]
            break;
 8007550:	e002      	b.n	8007558 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	75bb      	strb	r3, [r7, #22]
            break;
 8007556:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007558:	7dbb      	ldrb	r3, [r7, #22]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d119      	bne.n	8007592 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b03      	cmp	r3, #3
 8007568:	d113      	bne.n	8007592 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800756a:	7dba      	ldrb	r2, [r7, #22]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	32ae      	adds	r2, #174	; 0xae
 8007570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800757a:	7dba      	ldrb	r2, [r7, #22]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007582:	7dba      	ldrb	r2, [r7, #22]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	32ae      	adds	r2, #174	; 0xae
 8007588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f001 f8e8 	bl	8008768 <USBD_CtlSendStatus>
 8007598:	e032      	b.n	8007600 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	4619      	mov	r1, r3
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f9a5 	bl	80078f4 <USBD_CoreFindEP>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ae:	7dbb      	ldrb	r3, [r7, #22]
 80075b0:	2bff      	cmp	r3, #255	; 0xff
 80075b2:	d025      	beq.n	8007600 <USBD_LL_DataOutStage+0x15c>
 80075b4:	7dbb      	ldrb	r3, [r7, #22]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d122      	bne.n	8007600 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d117      	bne.n	80075f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075c6:	7dba      	ldrb	r2, [r7, #22]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	32ae      	adds	r2, #174	; 0xae
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00f      	beq.n	80075f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075d6:	7dba      	ldrb	r2, [r7, #22]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80075de:	7dba      	ldrb	r2, [r7, #22]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	32ae      	adds	r2, #174	; 0xae
 80075e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	7afa      	ldrb	r2, [r7, #11]
 80075ec:	4611      	mov	r1, r2
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	4798      	blx	r3
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	e000      	b.n	8007602 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b086      	sub	sp, #24
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	460b      	mov	r3, r1
 8007614:	607a      	str	r2, [r7, #4]
 8007616:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d16f      	bne.n	80076fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3314      	adds	r3, #20
 8007622:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800762a:	2b02      	cmp	r3, #2
 800762c:	d15a      	bne.n	80076e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	429a      	cmp	r2, r3
 8007638:	d914      	bls.n	8007664 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	1ad2      	subs	r2, r2, r3
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	461a      	mov	r2, r3
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f001 f84a 	bl	80086ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007656:	2300      	movs	r3, #0
 8007658:	2200      	movs	r2, #0
 800765a:	2100      	movs	r1, #0
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f001 fd91 	bl	8009184 <USBD_LL_PrepareReceive>
 8007662:	e03f      	b.n	80076e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	429a      	cmp	r2, r3
 800766e:	d11c      	bne.n	80076aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007678:	429a      	cmp	r2, r3
 800767a:	d316      	bcc.n	80076aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007686:	429a      	cmp	r2, r3
 8007688:	d20f      	bcs.n	80076aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800768a:	2200      	movs	r2, #0
 800768c:	2100      	movs	r1, #0
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f001 f82b 	bl	80086ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800769c:	2300      	movs	r3, #0
 800769e:	2200      	movs	r2, #0
 80076a0:	2100      	movs	r1, #0
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f001 fd6e 	bl	8009184 <USBD_LL_PrepareReceive>
 80076a8:	e01c      	b.n	80076e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d10f      	bne.n	80076d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076d6:	2180      	movs	r1, #128	; 0x80
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 fc4b 	bl	8008f74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f001 f855 	bl	800878e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d03a      	beq.n	8007764 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff fe42 	bl	8007378 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80076fc:	e032      	b.n	8007764 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007704:	b2db      	uxtb	r3, r3
 8007706:	4619      	mov	r1, r3
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 f8f3 	bl	80078f4 <USBD_CoreFindEP>
 800770e:	4603      	mov	r3, r0
 8007710:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	2bff      	cmp	r3, #255	; 0xff
 8007716:	d025      	beq.n	8007764 <USBD_LL_DataInStage+0x15a>
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d122      	bne.n	8007764 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d11c      	bne.n	8007764 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800772a:	7dfa      	ldrb	r2, [r7, #23]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	32ae      	adds	r2, #174	; 0xae
 8007730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d014      	beq.n	8007764 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800773a:	7dfa      	ldrb	r2, [r7, #23]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007742:	7dfa      	ldrb	r2, [r7, #23]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	32ae      	adds	r2, #174	; 0xae
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	7afa      	ldrb	r2, [r7, #11]
 8007750:	4611      	mov	r1, r2
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	4798      	blx	r3
 8007756:	4603      	mov	r3, r0
 8007758:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800775a:	7dbb      	ldrb	r3, [r7, #22]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007760:	7dbb      	ldrb	r3, [r7, #22]
 8007762:	e000      	b.n	8007766 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d014      	beq.n	80077d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00e      	beq.n	80077d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6852      	ldr	r2, [r2, #4]
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	4611      	mov	r1, r2
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077d0:	2303      	movs	r3, #3
 80077d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	2200      	movs	r2, #0
 80077d8:	2100      	movs	r1, #0
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fb56 	bl	8008e8c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2240      	movs	r2, #64	; 0x40
 80077ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077f0:	2340      	movs	r3, #64	; 0x40
 80077f2:	2200      	movs	r2, #0
 80077f4:	2180      	movs	r1, #128	; 0x80
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 fb48 	bl	8008e8c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2240      	movs	r2, #64	; 0x40
 8007806:	621a      	str	r2, [r3, #32]

  return ret;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b04      	cmp	r3, #4
 8007844:	d006      	beq.n	8007854 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784c:	b2da      	uxtb	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2204      	movs	r2, #4
 8007858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b04      	cmp	r3, #4
 800787c:	d106      	bne.n	800788c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007884:	b2da      	uxtb	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d110      	bne.n	80078d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007900:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b086      	sub	sp, #24
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	885b      	ldrh	r3, [r3, #2]
 800792a:	b29a      	uxth	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	429a      	cmp	r2, r3
 8007934:	d920      	bls.n	8007978 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800793e:	e013      	b.n	8007968 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007940:	f107 030a 	add.w	r3, r7, #10
 8007944:	4619      	mov	r1, r3
 8007946:	6978      	ldr	r0, [r7, #20]
 8007948:	f000 f81b 	bl	8007982 <USBD_GetNextDesc>
 800794c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b05      	cmp	r3, #5
 8007954:	d108      	bne.n	8007968 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	789b      	ldrb	r3, [r3, #2]
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	429a      	cmp	r2, r3
 8007962:	d008      	beq.n	8007976 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	885b      	ldrh	r3, [r3, #2]
 800796c:	b29a      	uxth	r2, r3
 800796e:	897b      	ldrh	r3, [r7, #10]
 8007970:	429a      	cmp	r2, r3
 8007972:	d8e5      	bhi.n	8007940 <USBD_GetEpDesc+0x32>
 8007974:	e000      	b.n	8007978 <USBD_GetEpDesc+0x6a>
          break;
 8007976:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007978:	693b      	ldr	r3, [r7, #16]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	881a      	ldrh	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	4413      	add	r3, r2
 800799c:	b29a      	uxth	r2, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4413      	add	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079ae:	68fb      	ldr	r3, [r7, #12]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	3301      	adds	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079da:	8a3b      	ldrh	r3, [r7, #16]
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	b21a      	sxth	r2, r3
 80079e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	b21b      	sxth	r3, r3
 80079e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079ea:	89fb      	ldrh	r3, [r7, #14]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	371c      	adds	r7, #28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	d005      	beq.n	8007a1e <USBD_StdDevReq+0x26>
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d857      	bhi.n	8007ac6 <USBD_StdDevReq+0xce>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00f      	beq.n	8007a3a <USBD_StdDevReq+0x42>
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d153      	bne.n	8007ac6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	32ae      	adds	r2, #174	; 0xae
 8007a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
      break;
 8007a38:	e04a      	b.n	8007ad0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b09      	cmp	r3, #9
 8007a40:	d83b      	bhi.n	8007aba <USBD_StdDevReq+0xc2>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <USBD_StdDevReq+0x50>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a9d 	.word	0x08007a9d
 8007a4c:	08007ab1 	.word	0x08007ab1
 8007a50:	08007abb 	.word	0x08007abb
 8007a54:	08007aa7 	.word	0x08007aa7
 8007a58:	08007abb 	.word	0x08007abb
 8007a5c:	08007a7b 	.word	0x08007a7b
 8007a60:	08007a71 	.word	0x08007a71
 8007a64:	08007abb 	.word	0x08007abb
 8007a68:	08007a93 	.word	0x08007a93
 8007a6c:	08007a85 	.word	0x08007a85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa3c 	bl	8007ef0 <USBD_GetDescriptor>
          break;
 8007a78:	e024      	b.n	8007ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fbcb 	bl	8008218 <USBD_SetAddress>
          break;
 8007a82:	e01f      	b.n	8007ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fc0a 	bl	80082a0 <USBD_SetConfig>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
          break;
 8007a90:	e018      	b.n	8007ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fcad 	bl	80083f4 <USBD_GetConfig>
          break;
 8007a9a:	e013      	b.n	8007ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fcde 	bl	8008460 <USBD_GetStatus>
          break;
 8007aa4:	e00e      	b.n	8007ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fd0d 	bl	80084c8 <USBD_SetFeature>
          break;
 8007aae:	e009      	b.n	8007ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fd31 	bl	800851a <USBD_ClrFeature>
          break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fd88 	bl	80085d2 <USBD_CtlError>
          break;
 8007ac2:	bf00      	nop
      }
      break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fd82 	bl	80085d2 <USBD_CtlError>
      break;
 8007ace:	bf00      	nop
  }

  return ret;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop

08007adc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d005      	beq.n	8007b02 <USBD_StdItfReq+0x26>
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d852      	bhi.n	8007ba0 <USBD_StdItfReq+0xc4>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <USBD_StdItfReq+0x26>
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d14e      	bne.n	8007ba0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d840      	bhi.n	8007b92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	889b      	ldrh	r3, [r3, #4]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d836      	bhi.n	8007b88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	889b      	ldrh	r3, [r3, #4]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff fed9 	bl	80078da <USBD_CoreFindIF>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2bff      	cmp	r3, #255	; 0xff
 8007b30:	d01d      	beq.n	8007b6e <USBD_StdItfReq+0x92>
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11a      	bne.n	8007b6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b38:	7bba      	ldrb	r2, [r7, #14]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	32ae      	adds	r2, #174	; 0xae
 8007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00f      	beq.n	8007b68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b48:	7bba      	ldrb	r2, [r7, #14]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b50:	7bba      	ldrb	r2, [r7, #14]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32ae      	adds	r2, #174	; 0xae
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b66:	e004      	b.n	8007b72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b6c:	e001      	b.n	8007b72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	88db      	ldrh	r3, [r3, #6]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d110      	bne.n	8007b9c <USBD_StdItfReq+0xc0>
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10d      	bne.n	8007b9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fdf1 	bl	8008768 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b86:	e009      	b.n	8007b9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fd21 	bl	80085d2 <USBD_CtlError>
          break;
 8007b90:	e004      	b.n	8007b9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fd1c 	bl	80085d2 <USBD_CtlError>
          break;
 8007b9a:	e000      	b.n	8007b9e <USBD_StdItfReq+0xc2>
          break;
 8007b9c:	bf00      	nop
      }
      break;
 8007b9e:	e004      	b.n	8007baa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fd15 	bl	80085d2 <USBD_CtlError>
      break;
 8007ba8:	bf00      	nop
  }

  return ret;
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	889b      	ldrh	r3, [r3, #4]
 8007bc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d007      	beq.n	8007be4 <USBD_StdEPReq+0x30>
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	f200 817f 	bhi.w	8007ed8 <USBD_StdEPReq+0x324>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d02a      	beq.n	8007c34 <USBD_StdEPReq+0x80>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	f040 817a 	bne.w	8007ed8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff fe83 	bl	80078f4 <USBD_CoreFindEP>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bf2:	7b7b      	ldrb	r3, [r7, #13]
 8007bf4:	2bff      	cmp	r3, #255	; 0xff
 8007bf6:	f000 8174 	beq.w	8007ee2 <USBD_StdEPReq+0x32e>
 8007bfa:	7b7b      	ldrb	r3, [r7, #13]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f040 8170 	bne.w	8007ee2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c02:	7b7a      	ldrb	r2, [r7, #13]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c0a:	7b7a      	ldrb	r2, [r7, #13]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	32ae      	adds	r2, #174	; 0xae
 8007c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 8163 	beq.w	8007ee2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c1c:	7b7a      	ldrb	r2, [r7, #13]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	32ae      	adds	r2, #174	; 0xae
 8007c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c32:	e156      	b.n	8007ee2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d008      	beq.n	8007c4e <USBD_StdEPReq+0x9a>
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	f300 8145 	bgt.w	8007ecc <USBD_StdEPReq+0x318>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 809b 	beq.w	8007d7e <USBD_StdEPReq+0x1ca>
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d03c      	beq.n	8007cc6 <USBD_StdEPReq+0x112>
 8007c4c:	e13e      	b.n	8007ecc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d002      	beq.n	8007c60 <USBD_StdEPReq+0xac>
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d016      	beq.n	8007c8c <USBD_StdEPReq+0xd8>
 8007c5e:	e02c      	b.n	8007cba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00d      	beq.n	8007c82 <USBD_StdEPReq+0xce>
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b80      	cmp	r3, #128	; 0x80
 8007c6a:	d00a      	beq.n	8007c82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 f97f 	bl	8008f74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c76:	2180      	movs	r1, #128	; 0x80
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 f97b 	bl	8008f74 <USBD_LL_StallEP>
 8007c7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c80:	e020      	b.n	8007cc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fca4 	bl	80085d2 <USBD_CtlError>
              break;
 8007c8a:	e01b      	b.n	8007cc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	885b      	ldrh	r3, [r3, #2]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10e      	bne.n	8007cb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00b      	beq.n	8007cb2 <USBD_StdEPReq+0xfe>
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	2b80      	cmp	r3, #128	; 0x80
 8007c9e:	d008      	beq.n	8007cb2 <USBD_StdEPReq+0xfe>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	88db      	ldrh	r3, [r3, #6]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d104      	bne.n	8007cb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 f961 	bl	8008f74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fd58 	bl	8008768 <USBD_CtlSendStatus>

              break;
 8007cb8:	e004      	b.n	8007cc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fc88 	bl	80085d2 <USBD_CtlError>
              break;
 8007cc2:	bf00      	nop
          }
          break;
 8007cc4:	e107      	b.n	8007ed6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d002      	beq.n	8007cd8 <USBD_StdEPReq+0x124>
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d016      	beq.n	8007d04 <USBD_StdEPReq+0x150>
 8007cd6:	e04b      	b.n	8007d70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00d      	beq.n	8007cfa <USBD_StdEPReq+0x146>
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b80      	cmp	r3, #128	; 0x80
 8007ce2:	d00a      	beq.n	8007cfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 f943 	bl	8008f74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cee:	2180      	movs	r1, #128	; 0x80
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f93f 	bl	8008f74 <USBD_LL_StallEP>
 8007cf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cf8:	e040      	b.n	8007d7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc68 	bl	80085d2 <USBD_CtlError>
              break;
 8007d02:	e03b      	b.n	8007d7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	885b      	ldrh	r3, [r3, #2]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d136      	bne.n	8007d7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d004      	beq.n	8007d20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 f960 	bl	8008fe0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fd21 	bl	8008768 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff fde2 	bl	80078f4 <USBD_CoreFindEP>
 8007d30:	4603      	mov	r3, r0
 8007d32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d34:	7b7b      	ldrb	r3, [r7, #13]
 8007d36:	2bff      	cmp	r3, #255	; 0xff
 8007d38:	d01f      	beq.n	8007d7a <USBD_StdEPReq+0x1c6>
 8007d3a:	7b7b      	ldrb	r3, [r7, #13]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d11c      	bne.n	8007d7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d40:	7b7a      	ldrb	r2, [r7, #13]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d48:	7b7a      	ldrb	r2, [r7, #13]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	32ae      	adds	r2, #174	; 0xae
 8007d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d010      	beq.n	8007d7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d58:	7b7a      	ldrb	r2, [r7, #13]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	32ae      	adds	r2, #174	; 0xae
 8007d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d6e:	e004      	b.n	8007d7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fc2d 	bl	80085d2 <USBD_CtlError>
              break;
 8007d78:	e000      	b.n	8007d7c <USBD_StdEPReq+0x1c8>
              break;
 8007d7a:	bf00      	nop
          }
          break;
 8007d7c:	e0ab      	b.n	8007ed6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d002      	beq.n	8007d90 <USBD_StdEPReq+0x1dc>
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d032      	beq.n	8007df4 <USBD_StdEPReq+0x240>
 8007d8e:	e097      	b.n	8007ec0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <USBD_StdEPReq+0x1f2>
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	2b80      	cmp	r3, #128	; 0x80
 8007d9a:	d004      	beq.n	8007da6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fc17 	bl	80085d2 <USBD_CtlError>
                break;
 8007da4:	e091      	b.n	8007eca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	da0b      	bge.n	8007dc6 <USBD_StdEPReq+0x212>
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	3310      	adds	r3, #16
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	e00b      	b.n	8007dde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	3304      	adds	r3, #4
 8007dde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2202      	movs	r2, #2
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fc61 	bl	80086b4 <USBD_CtlSendData>
              break;
 8007df2:	e06a      	b.n	8007eca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	da11      	bge.n	8007e20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	f003 020f 	and.w	r2, r3, #15
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	3324      	adds	r3, #36	; 0x24
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d117      	bne.n	8007e46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fbda 	bl	80085d2 <USBD_CtlError>
                  break;
 8007e1e:	e054      	b.n	8007eca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	f003 020f 	and.w	r2, r3, #15
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	440b      	add	r3, r1
 8007e32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fbc7 	bl	80085d2 <USBD_CtlError>
                  break;
 8007e44:	e041      	b.n	8007eca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da0b      	bge.n	8007e66 <USBD_StdEPReq+0x2b2>
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	3310      	adds	r3, #16
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	3304      	adds	r3, #4
 8007e64:	e00b      	b.n	8007e7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <USBD_StdEPReq+0x2d8>
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	d103      	bne.n	8007e94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e00e      	b.n	8007eb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 f8d7 	bl	800904c <USBD_LL_IsStallEP>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e002      	b.n	8007eb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fbfb 	bl	80086b4 <USBD_CtlSendData>
              break;
 8007ebe:	e004      	b.n	8007eca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fb85 	bl	80085d2 <USBD_CtlError>
              break;
 8007ec8:	bf00      	nop
          }
          break;
 8007eca:	e004      	b.n	8007ed6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fb7f 	bl	80085d2 <USBD_CtlError>
          break;
 8007ed4:	bf00      	nop
      }
      break;
 8007ed6:	e005      	b.n	8007ee4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fb79 	bl	80085d2 <USBD_CtlError>
      break;
 8007ee0:	e000      	b.n	8007ee4 <USBD_StdEPReq+0x330>
      break;
 8007ee2:	bf00      	nop
  }

  return ret;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	885b      	ldrh	r3, [r3, #2]
 8007f0a:	0a1b      	lsrs	r3, r3, #8
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	2b0e      	cmp	r3, #14
 8007f12:	f200 8152 	bhi.w	80081ba <USBD_GetDescriptor+0x2ca>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <USBD_GetDescriptor+0x2c>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f8d 	.word	0x08007f8d
 8007f20:	08007fa5 	.word	0x08007fa5
 8007f24:	08007fe5 	.word	0x08007fe5
 8007f28:	080081bb 	.word	0x080081bb
 8007f2c:	080081bb 	.word	0x080081bb
 8007f30:	0800815b 	.word	0x0800815b
 8007f34:	08008187 	.word	0x08008187
 8007f38:	080081bb 	.word	0x080081bb
 8007f3c:	080081bb 	.word	0x080081bb
 8007f40:	080081bb 	.word	0x080081bb
 8007f44:	080081bb 	.word	0x080081bb
 8007f48:	080081bb 	.word	0x080081bb
 8007f4c:	080081bb 	.word	0x080081bb
 8007f50:	080081bb 	.word	0x080081bb
 8007f54:	08007f59 	.word	0x08007f59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	7c12      	ldrb	r2, [r2, #16]
 8007f70:	f107 0108 	add.w	r1, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f7a:	e126      	b.n	80081ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fb27 	bl	80085d2 <USBD_CtlError>
        err++;
 8007f84:	7afb      	ldrb	r3, [r7, #11]
 8007f86:	3301      	adds	r3, #1
 8007f88:	72fb      	strb	r3, [r7, #11]
      break;
 8007f8a:	e11e      	b.n	80081ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	7c12      	ldrb	r2, [r2, #16]
 8007f98:	f107 0108 	add.w	r1, r7, #8
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	60f8      	str	r0, [r7, #12]
      break;
 8007fa2:	e112      	b.n	80081ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	7c1b      	ldrb	r3, [r3, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10d      	bne.n	8007fc8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f107 0208 	add.w	r2, r7, #8
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4798      	blx	r3
 8007fbc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fc6:	e100      	b.n	80081ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	f107 0208 	add.w	r2, r7, #8
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4798      	blx	r3
 8007fd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	2202      	movs	r2, #2
 8007fe0:	701a      	strb	r2, [r3, #0]
      break;
 8007fe2:	e0f2      	b.n	80081ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	885b      	ldrh	r3, [r3, #2]
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	f200 80ac 	bhi.w	8008148 <USBD_GetDescriptor+0x258>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <USBD_GetDescriptor+0x108>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008011 	.word	0x08008011
 8007ffc:	08008045 	.word	0x08008045
 8008000:	08008079 	.word	0x08008079
 8008004:	080080ad 	.word	0x080080ad
 8008008:	080080e1 	.word	0x080080e1
 800800c:	08008115 	.word	0x08008115
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	7c12      	ldrb	r2, [r2, #16]
 8008028:	f107 0108 	add.w	r1, r7, #8
 800802c:	4610      	mov	r0, r2
 800802e:	4798      	blx	r3
 8008030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008032:	e091      	b.n	8008158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 facb 	bl	80085d2 <USBD_CtlError>
            err++;
 800803c:	7afb      	ldrb	r3, [r7, #11]
 800803e:	3301      	adds	r3, #1
 8008040:	72fb      	strb	r3, [r7, #11]
          break;
 8008042:	e089      	b.n	8008158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	7c12      	ldrb	r2, [r2, #16]
 800805c:	f107 0108 	add.w	r1, r7, #8
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008066:	e077      	b.n	8008158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fab1 	bl	80085d2 <USBD_CtlError>
            err++;
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	3301      	adds	r3, #1
 8008074:	72fb      	strb	r3, [r7, #11]
          break;
 8008076:	e06f      	b.n	8008158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	7c12      	ldrb	r2, [r2, #16]
 8008090:	f107 0108 	add.w	r1, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800809a:	e05d      	b.n	8008158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa97 	bl	80085d2 <USBD_CtlError>
            err++;
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	3301      	adds	r3, #1
 80080a8:	72fb      	strb	r3, [r7, #11]
          break;
 80080aa:	e055      	b.n	8008158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ce:	e043      	b.n	8008158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa7d 	bl	80085d2 <USBD_CtlError>
            err++;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	3301      	adds	r3, #1
 80080dc:	72fb      	strb	r3, [r7, #11]
          break;
 80080de:	e03b      	b.n	8008158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7c12      	ldrb	r2, [r2, #16]
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008102:	e029      	b.n	8008158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa63 	bl	80085d2 <USBD_CtlError>
            err++;
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	3301      	adds	r3, #1
 8008110:	72fb      	strb	r3, [r7, #11]
          break;
 8008112:	e021      	b.n	8008158 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	7c12      	ldrb	r2, [r2, #16]
 800812c:	f107 0108 	add.w	r1, r7, #8
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
 8008134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008136:	e00f      	b.n	8008158 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa49 	bl	80085d2 <USBD_CtlError>
            err++;
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	3301      	adds	r3, #1
 8008144:	72fb      	strb	r3, [r7, #11]
          break;
 8008146:	e007      	b.n	8008158 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa41 	bl	80085d2 <USBD_CtlError>
          err++;
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	3301      	adds	r3, #1
 8008154:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008156:	bf00      	nop
      }
      break;
 8008158:	e037      	b.n	80081ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	7c1b      	ldrb	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d109      	bne.n	8008176 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816a:	f107 0208 	add.w	r2, r7, #8
 800816e:	4610      	mov	r0, r2
 8008170:	4798      	blx	r3
 8008172:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008174:	e029      	b.n	80081ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fa2a 	bl	80085d2 <USBD_CtlError>
        err++;
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	3301      	adds	r3, #1
 8008182:	72fb      	strb	r3, [r7, #11]
      break;
 8008184:	e021      	b.n	80081ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	7c1b      	ldrb	r3, [r3, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10d      	bne.n	80081aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	f107 0208 	add.w	r2, r7, #8
 800819a:	4610      	mov	r0, r2
 800819c:	4798      	blx	r3
 800819e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3301      	adds	r3, #1
 80081a4:	2207      	movs	r2, #7
 80081a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081a8:	e00f      	b.n	80081ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fa10 	bl	80085d2 <USBD_CtlError>
        err++;
 80081b2:	7afb      	ldrb	r3, [r7, #11]
 80081b4:	3301      	adds	r3, #1
 80081b6:	72fb      	strb	r3, [r7, #11]
      break;
 80081b8:	e007      	b.n	80081ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa08 	bl	80085d2 <USBD_CtlError>
      err++;
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	3301      	adds	r3, #1
 80081c6:	72fb      	strb	r3, [r7, #11]
      break;
 80081c8:	bf00      	nop
  }

  if (err != 0U)
 80081ca:	7afb      	ldrb	r3, [r7, #11]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d11e      	bne.n	800820e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	88db      	ldrh	r3, [r3, #6]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d016      	beq.n	8008206 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80081d8:	893b      	ldrh	r3, [r7, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00e      	beq.n	80081fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	88da      	ldrh	r2, [r3, #6]
 80081e2:	893b      	ldrh	r3, [r7, #8]
 80081e4:	4293      	cmp	r3, r2
 80081e6:	bf28      	it	cs
 80081e8:	4613      	movcs	r3, r2
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081ee:	893b      	ldrh	r3, [r7, #8]
 80081f0:	461a      	mov	r2, r3
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fa5d 	bl	80086b4 <USBD_CtlSendData>
 80081fa:	e009      	b.n	8008210 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f9e7 	bl	80085d2 <USBD_CtlError>
 8008204:	e004      	b.n	8008210 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 faae 	bl	8008768 <USBD_CtlSendStatus>
 800820c:	e000      	b.n	8008210 <USBD_GetDescriptor+0x320>
    return;
 800820e:	bf00      	nop
  }
}
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop

08008218 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	889b      	ldrh	r3, [r3, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d131      	bne.n	800828e <USBD_SetAddress+0x76>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	88db      	ldrh	r3, [r3, #6]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d12d      	bne.n	800828e <USBD_SetAddress+0x76>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	885b      	ldrh	r3, [r3, #2]
 8008236:	2b7f      	cmp	r3, #127	; 0x7f
 8008238:	d829      	bhi.n	800828e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008244:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b03      	cmp	r3, #3
 8008250:	d104      	bne.n	800825c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f9bc 	bl	80085d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825a:	e01d      	b.n	8008298 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7bfa      	ldrb	r2, [r7, #15]
 8008260:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 ff1d 	bl	80090a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa7a 	bl	8008768 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d004      	beq.n	8008284 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2202      	movs	r2, #2
 800827e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008282:	e009      	b.n	8008298 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828c:	e004      	b.n	8008298 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f99e 	bl	80085d2 <USBD_CtlError>
  }
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	4b4e      	ldr	r3, [pc, #312]	; (80083f0 <USBD_SetConfig+0x150>)
 80082b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082b8:	4b4d      	ldr	r3, [pc, #308]	; (80083f0 <USBD_SetConfig+0x150>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d905      	bls.n	80082cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f985 	bl	80085d2 <USBD_CtlError>
    return USBD_FAIL;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e08c      	b.n	80083e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d002      	beq.n	80082de <USBD_SetConfig+0x3e>
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d029      	beq.n	8008330 <USBD_SetConfig+0x90>
 80082dc:	e075      	b.n	80083ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082de:	4b44      	ldr	r3, [pc, #272]	; (80083f0 <USBD_SetConfig+0x150>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d020      	beq.n	8008328 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082e6:	4b42      	ldr	r3, [pc, #264]	; (80083f0 <USBD_SetConfig+0x150>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082f0:	4b3f      	ldr	r3, [pc, #252]	; (80083f0 <USBD_SetConfig+0x150>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff f849 	bl	800738e <USBD_SetClassConfig>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d008      	beq.n	8008318 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f962 	bl	80085d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2202      	movs	r2, #2
 8008312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008316:	e065      	b.n	80083e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fa25 	bl	8008768 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2203      	movs	r2, #3
 8008322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008326:	e05d      	b.n	80083e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fa1d 	bl	8008768 <USBD_CtlSendStatus>
      break;
 800832e:	e059      	b.n	80083e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008330:	4b2f      	ldr	r3, [pc, #188]	; (80083f0 <USBD_SetConfig+0x150>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d112      	bne.n	800835e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008340:	4b2b      	ldr	r3, [pc, #172]	; (80083f0 <USBD_SetConfig+0x150>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800834a:	4b29      	ldr	r3, [pc, #164]	; (80083f0 <USBD_SetConfig+0x150>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff f838 	bl	80073c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa06 	bl	8008768 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800835c:	e042      	b.n	80083e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800835e:	4b24      	ldr	r3, [pc, #144]	; (80083f0 <USBD_SetConfig+0x150>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	429a      	cmp	r2, r3
 800836a:	d02a      	beq.n	80083c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff f826 	bl	80073c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800837a:	4b1d      	ldr	r3, [pc, #116]	; (80083f0 <USBD_SetConfig+0x150>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008384:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <USBD_SetConfig+0x150>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe ffff 	bl	800738e <USBD_SetClassConfig>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00f      	beq.n	80083ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f918 	bl	80085d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff f80b 	bl	80073c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083b8:	e014      	b.n	80083e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f9d4 	bl	8008768 <USBD_CtlSendStatus>
      break;
 80083c0:	e010      	b.n	80083e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f9d0 	bl	8008768 <USBD_CtlSendStatus>
      break;
 80083c8:	e00c      	b.n	80083e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f900 	bl	80085d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083d2:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <USBD_SetConfig+0x150>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7fe fff4 	bl	80073c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083de:	2303      	movs	r3, #3
 80083e0:	73fb      	strb	r3, [r7, #15]
      break;
 80083e2:	bf00      	nop
  }

  return ret;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	200001c4 	.word	0x200001c4

080083f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	88db      	ldrh	r3, [r3, #6]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d004      	beq.n	8008410 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f8e2 	bl	80085d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800840e:	e023      	b.n	8008458 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	dc02      	bgt.n	8008422 <USBD_GetConfig+0x2e>
 800841c:	2b00      	cmp	r3, #0
 800841e:	dc03      	bgt.n	8008428 <USBD_GetConfig+0x34>
 8008420:	e015      	b.n	800844e <USBD_GetConfig+0x5a>
 8008422:	2b03      	cmp	r3, #3
 8008424:	d00b      	beq.n	800843e <USBD_GetConfig+0x4a>
 8008426:	e012      	b.n	800844e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3308      	adds	r3, #8
 8008432:	2201      	movs	r2, #1
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f93c 	bl	80086b4 <USBD_CtlSendData>
        break;
 800843c:	e00c      	b.n	8008458 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	2201      	movs	r2, #1
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f934 	bl	80086b4 <USBD_CtlSendData>
        break;
 800844c:	e004      	b.n	8008458 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f8be 	bl	80085d2 <USBD_CtlError>
        break;
 8008456:	bf00      	nop
}
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008470:	b2db      	uxtb	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	2b02      	cmp	r3, #2
 8008476:	d81e      	bhi.n	80084b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	88db      	ldrh	r3, [r3, #6]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d004      	beq.n	800848a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f8a5 	bl	80085d2 <USBD_CtlError>
        break;
 8008488:	e01a      	b.n	80084c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f043 0202 	orr.w	r2, r3, #2
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	330c      	adds	r3, #12
 80084aa:	2202      	movs	r2, #2
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f900 	bl	80086b4 <USBD_CtlSendData>
      break;
 80084b4:	e004      	b.n	80084c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f88a 	bl	80085d2 <USBD_CtlError>
      break;
 80084be:	bf00      	nop
  }
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	885b      	ldrh	r3, [r3, #2]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d107      	bne.n	80084ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f940 	bl	8008768 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084e8:	e013      	b.n	8008512 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d10b      	bne.n	800850a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	889b      	ldrh	r3, [r3, #4]
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f930 	bl	8008768 <USBD_CtlSendStatus>
}
 8008508:	e003      	b.n	8008512 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f860 	bl	80085d2 <USBD_CtlError>
}
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852a:	b2db      	uxtb	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	2b02      	cmp	r3, #2
 8008530:	d80b      	bhi.n	800854a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d10c      	bne.n	8008554 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f910 	bl	8008768 <USBD_CtlSendStatus>
      }
      break;
 8008548:	e004      	b.n	8008554 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f840 	bl	80085d2 <USBD_CtlError>
      break;
 8008552:	e000      	b.n	8008556 <USBD_ClrFeature+0x3c>
      break;
 8008554:	bf00      	nop
  }
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	781a      	ldrb	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3301      	adds	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	781a      	ldrb	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7ff fa17 	bl	80079bc <SWAPBYTE>
 800858e:	4603      	mov	r3, r0
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3301      	adds	r3, #1
 80085a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff fa0a 	bl	80079bc <SWAPBYTE>
 80085a8:	4603      	mov	r3, r0
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3301      	adds	r3, #1
 80085b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff f9fd 	bl	80079bc <SWAPBYTE>
 80085c2:	4603      	mov	r3, r0
 80085c4:	461a      	mov	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	80da      	strh	r2, [r3, #6]
}
 80085ca:	bf00      	nop
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085dc:	2180      	movs	r1, #128	; 0x80
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fcc8 	bl	8008f74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085e4:	2100      	movs	r1, #0
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fcc4 	bl	8008f74 <USBD_LL_StallEP>
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d036      	beq.n	8008678 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800860e:	6938      	ldr	r0, [r7, #16]
 8008610:	f000 f836 	bl	8008680 <USBD_GetLen>
 8008614:	4603      	mov	r3, r0
 8008616:	3301      	adds	r3, #1
 8008618:	b29b      	uxth	r3, r3
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	b29a      	uxth	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	4413      	add	r3, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	7812      	ldrb	r2, [r2, #0]
 800862c:	701a      	strb	r2, [r3, #0]
  idx++;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	3301      	adds	r3, #1
 8008632:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	4413      	add	r3, r2
 800863a:	2203      	movs	r2, #3
 800863c:	701a      	strb	r2, [r3, #0]
  idx++;
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	3301      	adds	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008644:	e013      	b.n	800866e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	4413      	add	r3, r2
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	7812      	ldrb	r2, [r2, #0]
 8008650:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	3301      	adds	r3, #1
 8008656:	613b      	str	r3, [r7, #16]
    idx++;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	3301      	adds	r3, #1
 800865c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	4413      	add	r3, r2
 8008664:	2200      	movs	r2, #0
 8008666:	701a      	strb	r2, [r3, #0]
    idx++;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	3301      	adds	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e7      	bne.n	8008646 <USBD_GetString+0x52>
 8008676:	e000      	b.n	800867a <USBD_GetString+0x86>
    return;
 8008678:	bf00      	nop
  }
}
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008690:	e005      	b.n	800869e <USBD_GetLen+0x1e>
  {
    len++;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	3301      	adds	r3, #1
 8008696:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	3301      	adds	r3, #1
 800869c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1f5      	bne.n	8008692 <USBD_GetLen+0x12>
  }

  return len;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	2100      	movs	r1, #0
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 fd1a 	bl	8009114 <USBD_LL_Transmit>

  return USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	2100      	movs	r1, #0
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fd09 	bl	8009114 <USBD_LL_Transmit>

  return USBD_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2203      	movs	r2, #3
 800871c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	2100      	movs	r1, #0
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fd24 	bl	8009184 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	2100      	movs	r1, #0
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fd13 	bl	8009184 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2204      	movs	r2, #4
 8008774:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008778:	2300      	movs	r3, #0
 800877a:	2200      	movs	r2, #0
 800877c:	2100      	movs	r1, #0
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fcc8 	bl	8009114 <USBD_LL_Transmit>

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2205      	movs	r2, #5
 800879a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800879e:	2300      	movs	r3, #0
 80087a0:	2200      	movs	r2, #0
 80087a2:	2100      	movs	r1, #0
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fced 	bl	8009184 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087b8:	2200      	movs	r2, #0
 80087ba:	4912      	ldr	r1, [pc, #72]	; (8008804 <MX_USB_DEVICE_Init+0x50>)
 80087bc:	4812      	ldr	r0, [pc, #72]	; (8008808 <MX_USB_DEVICE_Init+0x54>)
 80087be:	f7fe fd69 	bl	8007294 <USBD_Init>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087c8:	f7f7 fda9 	bl	800031e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087cc:	490f      	ldr	r1, [pc, #60]	; (800880c <MX_USB_DEVICE_Init+0x58>)
 80087ce:	480e      	ldr	r0, [pc, #56]	; (8008808 <MX_USB_DEVICE_Init+0x54>)
 80087d0:	f7fe fd90 	bl	80072f4 <USBD_RegisterClass>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087da:	f7f7 fda0 	bl	800031e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087de:	490c      	ldr	r1, [pc, #48]	; (8008810 <MX_USB_DEVICE_Init+0x5c>)
 80087e0:	4809      	ldr	r0, [pc, #36]	; (8008808 <MX_USB_DEVICE_Init+0x54>)
 80087e2:	f7fe fcc7 	bl	8007174 <USBD_CDC_RegisterInterface>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087ec:	f7f7 fd97 	bl	800031e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087f0:	4805      	ldr	r0, [pc, #20]	; (8008808 <MX_USB_DEVICE_Init+0x54>)
 80087f2:	f7fe fdb5 	bl	8007360 <USBD_Start>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087fc:	f7f7 fd8f 	bl	800031e <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008800:	bf00      	nop
 8008802:	bd80      	pop	{r7, pc}
 8008804:	200000bc 	.word	0x200000bc
 8008808:	200001c8 	.word	0x200001c8
 800880c:	20000028 	.word	0x20000028
 8008810:	200000a8 	.word	0x200000a8

08008814 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008818:	2200      	movs	r2, #0
 800881a:	4905      	ldr	r1, [pc, #20]	; (8008830 <CDC_Init_FS+0x1c>)
 800881c:	4805      	ldr	r0, [pc, #20]	; (8008834 <CDC_Init_FS+0x20>)
 800881e:	f7fe fcc3 	bl	80071a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008822:	4905      	ldr	r1, [pc, #20]	; (8008838 <CDC_Init_FS+0x24>)
 8008824:	4803      	ldr	r0, [pc, #12]	; (8008834 <CDC_Init_FS+0x20>)
 8008826:	f7fe fce1 	bl	80071ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800882a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800882c:	4618      	mov	r0, r3
 800882e:	bd80      	pop	{r7, pc}
 8008830:	200008a4 	.word	0x200008a4
 8008834:	200001c8 	.word	0x200001c8
 8008838:	200004a4 	.word	0x200004a4

0800883c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008840:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008842:	4618      	mov	r0, r3
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	71fb      	strb	r3, [r7, #7]
 8008858:	4613      	mov	r3, r2
 800885a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b23      	cmp	r3, #35	; 0x23
 8008860:	d84a      	bhi.n	80088f8 <CDC_Control_FS+0xac>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <CDC_Control_FS+0x1c>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	080088f9 	.word	0x080088f9
 800886c:	080088f9 	.word	0x080088f9
 8008870:	080088f9 	.word	0x080088f9
 8008874:	080088f9 	.word	0x080088f9
 8008878:	080088f9 	.word	0x080088f9
 800887c:	080088f9 	.word	0x080088f9
 8008880:	080088f9 	.word	0x080088f9
 8008884:	080088f9 	.word	0x080088f9
 8008888:	080088f9 	.word	0x080088f9
 800888c:	080088f9 	.word	0x080088f9
 8008890:	080088f9 	.word	0x080088f9
 8008894:	080088f9 	.word	0x080088f9
 8008898:	080088f9 	.word	0x080088f9
 800889c:	080088f9 	.word	0x080088f9
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	080088f9 	.word	0x080088f9
 80088ac:	080088f9 	.word	0x080088f9
 80088b0:	080088f9 	.word	0x080088f9
 80088b4:	080088f9 	.word	0x080088f9
 80088b8:	080088f9 	.word	0x080088f9
 80088bc:	080088f9 	.word	0x080088f9
 80088c0:	080088f9 	.word	0x080088f9
 80088c4:	080088f9 	.word	0x080088f9
 80088c8:	080088f9 	.word	0x080088f9
 80088cc:	080088f9 	.word	0x080088f9
 80088d0:	080088f9 	.word	0x080088f9
 80088d4:	080088f9 	.word	0x080088f9
 80088d8:	080088f9 	.word	0x080088f9
 80088dc:	080088f9 	.word	0x080088f9
 80088e0:	080088f9 	.word	0x080088f9
 80088e4:	080088f9 	.word	0x080088f9
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	080088f9 	.word	0x080088f9
 80088f0:	080088f9 	.word	0x080088f9
 80088f4:	080088f9 	.word	0x080088f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80088f8:	bf00      	nop
  }

  return (USBD_OK);
 80088fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4805      	ldr	r0, [pc, #20]	; (800892c <CDC_Receive_FS+0x24>)
 8008916:	f7fe fc69 	bl	80071ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800891a:	4804      	ldr	r0, [pc, #16]	; (800892c <CDC_Receive_FS+0x24>)
 800891c:	f7fe fc84 	bl	8007228 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008920:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	200001c8 	.word	0x200001c8

08008930 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008946:	4618      	mov	r0, r3
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	6039      	str	r1, [r7, #0]
 800895e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2212      	movs	r2, #18
 8008964:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008966:	4b03      	ldr	r3, [pc, #12]	; (8008974 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	200000dc 	.word	0x200000dc

08008978 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	6039      	str	r1, [r7, #0]
 8008982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2204      	movs	r2, #4
 8008988:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800898a:	4b03      	ldr	r3, [pc, #12]	; (8008998 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	200000fc 	.word	0x200000fc

0800899c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	6039      	str	r1, [r7, #0]
 80089a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d105      	bne.n	80089ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	4907      	ldr	r1, [pc, #28]	; (80089d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80089b2:	4808      	ldr	r0, [pc, #32]	; (80089d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80089b4:	f7ff fe1e 	bl	80085f4 <USBD_GetString>
 80089b8:	e004      	b.n	80089c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	4904      	ldr	r1, [pc, #16]	; (80089d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80089be:	4805      	ldr	r0, [pc, #20]	; (80089d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80089c0:	f7ff fe18 	bl	80085f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089c4:	4b02      	ldr	r3, [pc, #8]	; (80089d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000ca4 	.word	0x20000ca4
 80089d4:	0800934c 	.word	0x0800934c

080089d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	4904      	ldr	r1, [pc, #16]	; (80089f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089e8:	4804      	ldr	r0, [pc, #16]	; (80089fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089ea:	f7ff fe03 	bl	80085f4 <USBD_GetString>
  return USBD_StrDesc;
 80089ee:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20000ca4 	.word	0x20000ca4
 80089fc:	08009364 	.word	0x08009364

08008a00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	6039      	str	r1, [r7, #0]
 8008a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	221a      	movs	r2, #26
 8008a10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a12:	f000 f855 	bl	8008ac0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a16:	4b02      	ldr	r3, [pc, #8]	; (8008a20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20000100 	.word	0x20000100

08008a24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	4907      	ldr	r1, [pc, #28]	; (8008a58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a3a:	4808      	ldr	r0, [pc, #32]	; (8008a5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a3c:	f7ff fdda 	bl	80085f4 <USBD_GetString>
 8008a40:	e004      	b.n	8008a4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	4904      	ldr	r1, [pc, #16]	; (8008a58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a46:	4805      	ldr	r0, [pc, #20]	; (8008a5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a48:	f7ff fdd4 	bl	80085f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000ca4 	.word	0x20000ca4
 8008a5c:	08009378 	.word	0x08009378

08008a60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4907      	ldr	r1, [pc, #28]	; (8008a94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a76:	4808      	ldr	r0, [pc, #32]	; (8008a98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a78:	f7ff fdbc 	bl	80085f4 <USBD_GetString>
 8008a7c:	e004      	b.n	8008a88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4904      	ldr	r1, [pc, #16]	; (8008a94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a82:	4805      	ldr	r0, [pc, #20]	; (8008a98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a84:	f7ff fdb6 	bl	80085f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000ca4 	.word	0x20000ca4
 8008a98:	08009384 	.word	0x08009384

08008a9c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	220c      	movs	r2, #12
 8008aac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008aae:	4b03      	ldr	r3, [pc, #12]	; (8008abc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	200000f0 	.word	0x200000f0

08008ac0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4413      	add	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d009      	beq.n	8008ae8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ad4:	2208      	movs	r2, #8
 8008ad6:	4906      	ldr	r1, [pc, #24]	; (8008af0 <Get_SerialNum+0x30>)
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f80d 	bl	8008af8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ade:	2204      	movs	r2, #4
 8008ae0:	4904      	ldr	r1, [pc, #16]	; (8008af4 <Get_SerialNum+0x34>)
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f808 	bl	8008af8 <IntToUnicode>
  }
}
 8008ae8:	bf00      	nop
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20000102 	.word	0x20000102
 8008af4:	20000112 	.word	0x20000112

08008af8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
 8008b0e:	e027      	b.n	8008b60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	0f1b      	lsrs	r3, r3, #28
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d80b      	bhi.n	8008b30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	0f1b      	lsrs	r3, r3, #28
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	4619      	mov	r1, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	440b      	add	r3, r1
 8008b28:	3230      	adds	r2, #48	; 0x30
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	e00a      	b.n	8008b46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0f1b      	lsrs	r3, r3, #28
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	440b      	add	r3, r1
 8008b40:	3237      	adds	r2, #55	; 0x37
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	3301      	adds	r3, #1
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	4413      	add	r3, r2
 8008b56:	2200      	movs	r2, #0
 8008b58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	75fb      	strb	r3, [r7, #23]
 8008b60:	7dfa      	ldrb	r2, [r7, #23]
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d3d3      	bcc.n	8008b10 <IntToUnicode+0x18>
  }
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
	...

08008b78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b098      	sub	sp, #96	; 0x60
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b80:	f107 030c 	add.w	r3, r7, #12
 8008b84:	2254      	movs	r2, #84	; 0x54
 8008b86:	2100      	movs	r1, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fba6 	bl	80092da <memset>
  if(pcdHandle->Instance==USB)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a1d      	ldr	r2, [pc, #116]	; (8008c08 <HAL_PCD_MspInit+0x90>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d132      	bne.n	8008bfe <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b9c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008b9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008bac:	2318      	movs	r3, #24
 8008bae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008bb0:	2307      	movs	r3, #7
 8008bb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008bbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008bc2:	f107 030c 	add.w	r3, r7, #12
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fa fc76 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 8008bd2:	f7f7 fba4 	bl	800031e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	; (8008c0c <HAL_PCD_MspInit+0x94>)
 8008bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bda:	4a0c      	ldr	r2, [pc, #48]	; (8008c0c <HAL_PCD_MspInit+0x94>)
 8008bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008be0:	6593      	str	r3, [r2, #88]	; 0x58
 8008be2:	4b0a      	ldr	r3, [pc, #40]	; (8008c0c <HAL_PCD_MspInit+0x94>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bea:	60bb      	str	r3, [r7, #8]
 8008bec:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	2043      	movs	r0, #67	; 0x43
 8008bf4:	f7f7 fe1d 	bl	8000832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008bf8:	2043      	movs	r0, #67	; 0x43
 8008bfa:	f7f7 fe36 	bl	800086a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008bfe:	bf00      	nop
 8008c00:	3760      	adds	r7, #96	; 0x60
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40006800 	.word	0x40006800
 8008c0c:	40021000 	.word	0x40021000

08008c10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7fe fbe7 	bl	80073fa <USBD_LL_SetupStage>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	6879      	ldr	r1, [r7, #4]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	440b      	add	r3, r1
 8008c54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f7fe fc21 	bl	80074a4 <USBD_LL_DataOutStage>
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4613      	mov	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	440b      	add	r3, r1
 8008c8a:	333c      	adds	r3, #60	; 0x3c
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	4619      	mov	r1, r3
 8008c92:	f7fe fcba 	bl	800760a <USBD_LL_DataInStage>
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe fdf4 	bl	800789a <USBD_LL_SOF>
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d001      	beq.n	8008cd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008cce:	f7f7 fb26 	bl	800031e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008cd8:	7bfa      	ldrb	r2, [r7, #15]
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe fd98 	bl	8007812 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fd40 	bl	800776e <USBD_LL_Reset>
}
 8008cee:	bf00      	nop
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe fd93 	bl	8007832 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <HAL_PCD_SuspendCallback+0x30>)
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	4a03      	ldr	r2, [pc, #12]	; (8008d28 <HAL_PCD_SuspendCallback+0x30>)
 8008d1a:	f043 0306 	orr.w	r3, r3, #6
 8008d1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed00 	.word	0xe000ed00

08008d2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d007      	beq.n	8008d4c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d3c:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <HAL_PCD_ResumeCallback+0x34>)
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	4a07      	ldr	r2, [pc, #28]	; (8008d60 <HAL_PCD_ResumeCallback+0x34>)
 8008d42:	f023 0306 	bic.w	r3, r3, #6
 8008d46:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008d48:	f000 fab6 	bl	80092b8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fd89 	bl	800786a <USBD_LL_Resume>
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	e000ed00 	.word	0xe000ed00

08008d64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008d6c:	f7f9 fd94 	bl	8002898 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008d70:	4a2b      	ldr	r2, [pc, #172]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a29      	ldr	r2, [pc, #164]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008d7c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8008d80:	4b27      	ldr	r3, [pc, #156]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008d82:	4a28      	ldr	r2, [pc, #160]	; (8008e24 <USBD_LL_Init+0xc0>)
 8008d84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008d86:	4b26      	ldr	r3, [pc, #152]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008d88:	2208      	movs	r2, #8
 8008d8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008d8c:	4b24      	ldr	r3, [pc, #144]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008d8e:	2202      	movs	r2, #2
 8008d90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d92:	4b23      	ldr	r3, [pc, #140]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008d94:	2202      	movs	r2, #2
 8008d96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008d98:	4b21      	ldr	r3, [pc, #132]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008d9e:	4b20      	ldr	r3, [pc, #128]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008da4:	4b1e      	ldr	r3, [pc, #120]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008daa:	4b1d      	ldr	r3, [pc, #116]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008db0:	481b      	ldr	r0, [pc, #108]	; (8008e20 <USBD_LL_Init+0xbc>)
 8008db2:	f7f7 ff8f 	bl	8000cd4 <HAL_PCD_Init>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008dbc:	f7f7 faaf 	bl	800031e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008dc6:	2318      	movs	r3, #24
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2100      	movs	r1, #0
 8008dcc:	f7f9 fc93 	bl	80026f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008dd6:	2358      	movs	r3, #88	; 0x58
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2180      	movs	r1, #128	; 0x80
 8008ddc:	f7f9 fc8b 	bl	80026f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008de6:	23c0      	movs	r3, #192	; 0xc0
 8008de8:	2200      	movs	r2, #0
 8008dea:	2181      	movs	r1, #129	; 0x81
 8008dec:	f7f9 fc83 	bl	80026f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008df6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	f7f9 fc7a 	bl	80026f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2182      	movs	r1, #130	; 0x82
 8008e10:	f7f9 fc71 	bl	80026f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	20000ea4 	.word	0x20000ea4
 8008e24:	40006800 	.word	0x40006800

08008e28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f8 f84e 	bl	8000ee0 <HAL_PCD_Start>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d816      	bhi.n	8008e7c <USBD_LL_Start+0x54>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <USBD_LL_Start+0x2c>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008e65 	.word	0x08008e65
 8008e58:	08008e6b 	.word	0x08008e6b
 8008e5c:	08008e71 	.word	0x08008e71
 8008e60:	08008e77 	.word	0x08008e77
    case HAL_OK :
      usb_status = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
    break;
 8008e68:	e00b      	b.n	8008e82 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6e:	e008      	b.n	8008e82 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e70:	2301      	movs	r3, #1
 8008e72:	73fb      	strb	r3, [r7, #15]
    break;
 8008e74:	e005      	b.n	8008e82 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e76:	2303      	movs	r3, #3
 8008e78:	73fb      	strb	r3, [r7, #15]
    break;
 8008e7a:	e002      	b.n	8008e82 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e80:	bf00      	nop
  }
  return usb_status;
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	4608      	mov	r0, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	70fb      	strb	r3, [r7, #3]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	70bb      	strb	r3, [r7, #2]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008eb4:	78bb      	ldrb	r3, [r7, #2]
 8008eb6:	883a      	ldrh	r2, [r7, #0]
 8008eb8:	78f9      	ldrb	r1, [r7, #3]
 8008eba:	f7f8 f97f 	bl	80011bc <HAL_PCD_EP_Open>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d817      	bhi.n	8008ef8 <USBD_LL_OpenEP+0x6c>
 8008ec8:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <USBD_LL_OpenEP+0x44>)
 8008eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ece:	bf00      	nop
 8008ed0:	08008ee1 	.word	0x08008ee1
 8008ed4:	08008ee7 	.word	0x08008ee7
 8008ed8:	08008eed 	.word	0x08008eed
 8008edc:	08008ef3 	.word	0x08008ef3
    case HAL_OK :
      usb_status = USBD_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee4:	e00b      	b.n	8008efe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eea:	e008      	b.n	8008efe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008eec:	2301      	movs	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef0:	e005      	b.n	8008efe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef6:	e002      	b.n	8008efe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	73fb      	strb	r3, [r7, #15]
    break;
 8008efc:	bf00      	nop
  }
  return usb_status;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f8 f9a5 	bl	8001276 <HAL_PCD_EP_Close>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d816      	bhi.n	8008f64 <USBD_LL_CloseEP+0x5c>
 8008f36:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <USBD_LL_CloseEP+0x34>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f4d 	.word	0x08008f4d
 8008f40:	08008f53 	.word	0x08008f53
 8008f44:	08008f59 	.word	0x08008f59
 8008f48:	08008f5f 	.word	0x08008f5f
    case HAL_OK :
      usb_status = USBD_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f50:	e00b      	b.n	8008f6a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	73fb      	strb	r3, [r7, #15]
    break;
 8008f56:	e008      	b.n	8008f6a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5c:	e005      	b.n	8008f6a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	73fb      	strb	r3, [r7, #15]
    break;
 8008f62:	e002      	b.n	8008f6a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f64:	2303      	movs	r3, #3
 8008f66:	73fb      	strb	r3, [r7, #15]
    break;
 8008f68:	bf00      	nop
  }
  return usb_status;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	4611      	mov	r1, r2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f8 fa37 	bl	8001406 <HAL_PCD_EP_SetStall>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d816      	bhi.n	8008fd0 <USBD_LL_StallEP+0x5c>
 8008fa2:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <USBD_LL_StallEP+0x34>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08008fb9 	.word	0x08008fb9
 8008fac:	08008fbf 	.word	0x08008fbf
 8008fb0:	08008fc5 	.word	0x08008fc5
 8008fb4:	08008fcb 	.word	0x08008fcb
    case HAL_OK :
      usb_status = USBD_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73fb      	strb	r3, [r7, #15]
    break;
 8008fbc:	e00b      	b.n	8008fd6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc2:	e008      	b.n	8008fd6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc8:	e005      	b.n	8008fd6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fce:	e002      	b.n	8008fd6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd4:	bf00      	nop
  }
  return usb_status;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f8 fa61 	bl	80014c6 <HAL_PCD_EP_ClrStall>
 8009004:	4603      	mov	r3, r0
 8009006:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b03      	cmp	r3, #3
 800900c:	d816      	bhi.n	800903c <USBD_LL_ClearStallEP+0x5c>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <USBD_LL_ClearStallEP+0x34>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009025 	.word	0x08009025
 8009018:	0800902b 	.word	0x0800902b
 800901c:	08009031 	.word	0x08009031
 8009020:	08009037 	.word	0x08009037
    case HAL_OK :
      usb_status = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	e00b      	b.n	8009042 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800902a:	2303      	movs	r3, #3
 800902c:	73fb      	strb	r3, [r7, #15]
    break;
 800902e:	e008      	b.n	8009042 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009030:	2301      	movs	r3, #1
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	e005      	b.n	8009042 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009036:	2303      	movs	r3, #3
 8009038:	73fb      	strb	r3, [r7, #15]
    break;
 800903a:	e002      	b.n	8009042 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	73fb      	strb	r3, [r7, #15]
    break;
 8009040:	bf00      	nop
  }
  return usb_status;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800905e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009064:	2b00      	cmp	r3, #0
 8009066:	da0c      	bge.n	8009082 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800906e:	68f9      	ldr	r1, [r7, #12]
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	440b      	add	r3, r1
 800907c:	3302      	adds	r3, #2
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	e00b      	b.n	800909a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009082:	78fb      	ldrb	r3, [r7, #3]
 8009084:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009088:	68f9      	ldr	r1, [r7, #12]
 800908a:	4613      	mov	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	00db      	lsls	r3, r3, #3
 8009092:	440b      	add	r3, r1
 8009094:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009098:	781b      	ldrb	r3, [r3, #0]
  }
}
 800909a:	4618      	mov	r0, r3
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	4611      	mov	r1, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f8 f853 	bl	8001172 <HAL_PCD_SetAddress>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d816      	bhi.n	8009104 <USBD_LL_SetUSBAddress+0x5c>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <USBD_LL_SetUSBAddress+0x34>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	080090ed 	.word	0x080090ed
 80090e0:	080090f3 	.word	0x080090f3
 80090e4:	080090f9 	.word	0x080090f9
 80090e8:	080090ff 	.word	0x080090ff
    case HAL_OK :
      usb_status = USBD_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]
    break;
 80090f0:	e00b      	b.n	800910a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090f2:	2303      	movs	r3, #3
 80090f4:	73fb      	strb	r3, [r7, #15]
    break;
 80090f6:	e008      	b.n	800910a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090f8:	2301      	movs	r3, #1
 80090fa:	73fb      	strb	r3, [r7, #15]
    break;
 80090fc:	e005      	b.n	800910a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090fe:	2303      	movs	r3, #3
 8009100:	73fb      	strb	r3, [r7, #15]
    break;
 8009102:	e002      	b.n	800910a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009104:	2303      	movs	r3, #3
 8009106:	73fb      	strb	r3, [r7, #15]
    break;
 8009108:	bf00      	nop
  }
  return usb_status;
 800910a:	7bfb      	ldrb	r3, [r7, #15]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	607a      	str	r2, [r7, #4]
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	460b      	mov	r3, r1
 8009122:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009132:	7af9      	ldrb	r1, [r7, #11]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	f7f8 f92e 	bl	8001398 <HAL_PCD_EP_Transmit>
 800913c:	4603      	mov	r3, r0
 800913e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009140:	7dbb      	ldrb	r3, [r7, #22]
 8009142:	2b03      	cmp	r3, #3
 8009144:	d816      	bhi.n	8009174 <USBD_LL_Transmit+0x60>
 8009146:	a201      	add	r2, pc, #4	; (adr r2, 800914c <USBD_LL_Transmit+0x38>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	0800915d 	.word	0x0800915d
 8009150:	08009163 	.word	0x08009163
 8009154:	08009169 	.word	0x08009169
 8009158:	0800916f 	.word	0x0800916f
    case HAL_OK :
      usb_status = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	75fb      	strb	r3, [r7, #23]
    break;
 8009160:	e00b      	b.n	800917a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009162:	2303      	movs	r3, #3
 8009164:	75fb      	strb	r3, [r7, #23]
    break;
 8009166:	e008      	b.n	800917a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009168:	2301      	movs	r3, #1
 800916a:	75fb      	strb	r3, [r7, #23]
    break;
 800916c:	e005      	b.n	800917a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800916e:	2303      	movs	r3, #3
 8009170:	75fb      	strb	r3, [r7, #23]
    break;
 8009172:	e002      	b.n	800917a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009174:	2303      	movs	r3, #3
 8009176:	75fb      	strb	r3, [r7, #23]
    break;
 8009178:	bf00      	nop
  }
  return usb_status;
 800917a:	7dfb      	ldrb	r3, [r7, #23]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	607a      	str	r2, [r7, #4]
 800918e:	603b      	str	r3, [r7, #0]
 8009190:	460b      	mov	r3, r1
 8009192:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091a2:	7af9      	ldrb	r1, [r7, #11]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	f7f8 f8ad 	bl	8001306 <HAL_PCD_EP_Receive>
 80091ac:	4603      	mov	r3, r0
 80091ae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80091b0:	7dbb      	ldrb	r3, [r7, #22]
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d816      	bhi.n	80091e4 <USBD_LL_PrepareReceive+0x60>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <USBD_LL_PrepareReceive+0x38>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091d3 	.word	0x080091d3
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	080091df 	.word	0x080091df
    case HAL_OK :
      usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	75fb      	strb	r3, [r7, #23]
    break;
 80091d0:	e00b      	b.n	80091ea <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091d2:	2303      	movs	r3, #3
 80091d4:	75fb      	strb	r3, [r7, #23]
    break;
 80091d6:	e008      	b.n	80091ea <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d8:	2301      	movs	r3, #1
 80091da:	75fb      	strb	r3, [r7, #23]
    break;
 80091dc:	e005      	b.n	80091ea <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	75fb      	strb	r3, [r7, #23]
    break;
 80091e2:	e002      	b.n	80091ea <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	75fb      	strb	r3, [r7, #23]
    break;
 80091e8:	bf00      	nop
  }
  return usb_status;
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	4611      	mov	r1, r2
 800920a:	4618      	mov	r0, r3
 800920c:	f7f8 f8ac 	bl	8001368 <HAL_PCD_EP_GetRxCount>
 8009210:	4603      	mov	r3, r0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <HAL_PCDEx_LPM_Callback+0x18>
 800922e:	2b01      	cmp	r3, #1
 8009230:	d013      	beq.n	800925a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009232:	e023      	b.n	800927c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800923c:	f000 f83c 	bl	80092b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009240:	4b10      	ldr	r3, [pc, #64]	; (8009284 <HAL_PCDEx_LPM_Callback+0x68>)
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	4a0f      	ldr	r2, [pc, #60]	; (8009284 <HAL_PCDEx_LPM_Callback+0x68>)
 8009246:	f023 0306 	bic.w	r3, r3, #6
 800924a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fb09 	bl	800786a <USBD_LL_Resume>
    break;
 8009258:	e010      	b.n	800927c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fae6 	bl	8007832 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800926e:	4b05      	ldr	r3, [pc, #20]	; (8009284 <HAL_PCDEx_LPM_Callback+0x68>)
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	4a04      	ldr	r2, [pc, #16]	; (8009284 <HAL_PCDEx_LPM_Callback+0x68>)
 8009274:	f043 0306 	orr.w	r3, r3, #6
 8009278:	6113      	str	r3, [r2, #16]
    break;
 800927a:	bf00      	nop
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	e000ed00 	.word	0xe000ed00

08009288 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009290:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <USBD_static_malloc+0x18>)
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	2000119c 	.word	0x2000119c

080092a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]

}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80092bc:	f7f6 ffdd 	bl	800027a <SystemClock_Config>
}
 80092c0:	bf00      	nop
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <main>:

#include "main.h"



int main(void){
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  hwInit();
 80092c8:	f7f7 f95c 	bl	8000584 <hwInit>
  apInit();
 80092cc:	f7f6 ff7e 	bl	80001cc <apInit>

  apMain();
 80092d0:	f7f6 ff83 	bl	80001da <apMain>

  return 0;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	bd80      	pop	{r7, pc}

080092da <memset>:
 80092da:	4402      	add	r2, r0
 80092dc:	4603      	mov	r3, r0
 80092de:	4293      	cmp	r3, r2
 80092e0:	d100      	bne.n	80092e4 <memset+0xa>
 80092e2:	4770      	bx	lr
 80092e4:	f803 1b01 	strb.w	r1, [r3], #1
 80092e8:	e7f9      	b.n	80092de <memset+0x4>
	...

080092ec <__libc_init_array>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	4d0d      	ldr	r5, [pc, #52]	; (8009324 <__libc_init_array+0x38>)
 80092f0:	4c0d      	ldr	r4, [pc, #52]	; (8009328 <__libc_init_array+0x3c>)
 80092f2:	1b64      	subs	r4, r4, r5
 80092f4:	10a4      	asrs	r4, r4, #2
 80092f6:	2600      	movs	r6, #0
 80092f8:	42a6      	cmp	r6, r4
 80092fa:	d109      	bne.n	8009310 <__libc_init_array+0x24>
 80092fc:	4d0b      	ldr	r5, [pc, #44]	; (800932c <__libc_init_array+0x40>)
 80092fe:	4c0c      	ldr	r4, [pc, #48]	; (8009330 <__libc_init_array+0x44>)
 8009300:	f000 f818 	bl	8009334 <_init>
 8009304:	1b64      	subs	r4, r4, r5
 8009306:	10a4      	asrs	r4, r4, #2
 8009308:	2600      	movs	r6, #0
 800930a:	42a6      	cmp	r6, r4
 800930c:	d105      	bne.n	800931a <__libc_init_array+0x2e>
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	f855 3b04 	ldr.w	r3, [r5], #4
 8009314:	4798      	blx	r3
 8009316:	3601      	adds	r6, #1
 8009318:	e7ee      	b.n	80092f8 <__libc_init_array+0xc>
 800931a:	f855 3b04 	ldr.w	r3, [r5], #4
 800931e:	4798      	blx	r3
 8009320:	3601      	adds	r6, #1
 8009322:	e7f2      	b.n	800930a <__libc_init_array+0x1e>
 8009324:	080093d4 	.word	0x080093d4
 8009328:	080093d4 	.word	0x080093d4
 800932c:	080093d4 	.word	0x080093d4
 8009330:	080093d8 	.word	0x080093d8

08009334 <_init>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr

08009340 <_fini>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr
