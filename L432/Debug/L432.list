
L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000193c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001ad0  08001ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b18  08001b18  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001b18  08001b18  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b18  08001b18  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b18  08001b18  00011b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b1c  08001b1c  00011b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000006c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000880a  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000016f9  00000000  00000000  00028885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c8  00000000  00000000  00029f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000763  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b2d  00000000  00000000  0002b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ceb5  00000000  00000000  0004cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd340  00000000  00000000  00059a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002688  00000000  00000000  00126dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00129458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001ab8 	.word	0x08001ab8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08001ab8 	.word	0x08001ab8

080001d4 <apInit>:
 */


#include "ap.h"

void apInit(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr

080001e2 <apMain>:

void apMain(void){
 80001e2:	b480      	push	{r7}
 80001e4:	af00      	add	r7, sp, #0
  while(1){
 80001e6:	e7fe      	b.n	80001e6 <apMain+0x4>

080001e8 <bspInit>:
 */


#include "bsp.h"

void bspInit(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
  HAL_Init();
 80001ee:	f000 f9d0 	bl	8000592 <HAL_Init>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f2:	f107 030c 	add.w	r3, r7, #12
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000202:	4b2f      	ldr	r3, [pc, #188]	; (80002c0 <bspInit+0xd8>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000206:	4a2e      	ldr	r2, [pc, #184]	; (80002c0 <bspInit+0xd8>)
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800020e:	4b2c      	ldr	r3, [pc, #176]	; (80002c0 <bspInit+0xd8>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000212:	f003 0304 	and.w	r3, r3, #4
 8000216:	60bb      	str	r3, [r7, #8]
 8000218:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <bspInit+0xd8>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	4a28      	ldr	r2, [pc, #160]	; (80002c0 <bspInit+0xd8>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000226:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <bspInit+0xd8>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <bspInit+0xd8>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <bspInit+0xd8>)
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023e:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <bspInit+0xd8>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	603b      	str	r3, [r7, #0]
 8000248:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000250:	481c      	ldr	r0, [pc, #112]	; (80002c4 <bspInit+0xdc>)
 8000252:	f000 fc0f 	bl	8000a74 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2123      	movs	r1, #35	; 0x23
 800025a:	481b      	ldr	r0, [pc, #108]	; (80002c8 <bspInit+0xe0>)
 800025c:	f000 fc0a 	bl	8000a74 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PC14 PC15 */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000260:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000264:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000266:	2301      	movs	r3, #1
 8000268:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000272:	f107 030c 	add.w	r3, r7, #12
 8000276:	4619      	mov	r1, r3
 8000278:	4812      	ldr	r0, [pc, #72]	; (80002c4 <bspInit+0xdc>)
 800027a:	f000 fa91 	bl	80007a0 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800027e:	2310      	movs	r3, #16
 8000280:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	4619      	mov	r1, r3
 8000290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000294:	f000 fa84 	bl	80007a0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB0 PB1 PB5 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000298:	2323      	movs	r3, #35	; 0x23
 800029a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2300      	movs	r3, #0
 80002a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	4619      	mov	r1, r3
 80002ae:	4806      	ldr	r0, [pc, #24]	; (80002c8 <bspInit+0xe0>)
 80002b0:	f000 fa76 	bl	80007a0 <HAL_GPIO_Init>
  SystemClock_Config();
 80002b4:	f000 f80a 	bl	80002cc <SystemClock_Config>
}
 80002b8:	bf00      	nop
 80002ba:	3720      	adds	r7, #32
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40021000 	.word	0x40021000
 80002c4:	48000800 	.word	0x48000800
 80002c8:	48000400 	.word	0x48000400

080002cc <SystemClock_Config>:




void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b096      	sub	sp, #88	; 0x58
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	2244      	movs	r2, #68	; 0x44
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fbbf 	bl	8001a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002f2:	f000 fbe5 	bl	8000ac0 <HAL_PWREx_ControlVoltageScaling>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002fc:	f000 f838 	bl	8000370 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000300:	2310      	movs	r3, #16
 8000302:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800030c:	2360      	movs	r3, #96	; 0x60
 800030e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	2302      	movs	r3, #2
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000314:	2301      	movs	r3, #1
 8000316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000318:	2301      	movs	r3, #1
 800031a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800031c:	2314      	movs	r3, #20
 800031e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000320:	2307      	movs	r3, #7
 8000322:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000324:	2302      	movs	r3, #2
 8000326:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000328:	2302      	movs	r3, #2
 800032a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fc1b 	bl	8000b6c <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800033c:	f000 f818 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2303      	movs	r3, #3
 8000346:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000354:	463b      	mov	r3, r7
 8000356:	2102      	movs	r1, #2
 8000358:	4618      	mov	r0, r3
 800035a:	f001 f81b 	bl	8001394 <HAL_RCC_ClockConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000364:	f000 f804 	bl	8000370 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3758      	adds	r7, #88	; 0x58
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>
	...

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <HAL_MspInit+0x44>)
 8000384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_MspInit+0x44>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6613      	str	r3, [r2, #96]	; 0x60
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <HAL_MspInit+0x44>)
 8000390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <HAL_MspInit+0x44>)
 800039c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <HAL_MspInit+0x44>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	6593      	str	r3, [r2, #88]	; 0x58
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HAL_MspInit+0x44>)
 80003a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08e      	sub	sp, #56	; 0x38
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80003d2:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <HAL_InitTick+0xe0>)
 80003d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003d6:	4a33      	ldr	r2, [pc, #204]	; (80004a4 <HAL_InitTick+0xe0>)
 80003d8:	f043 0310 	orr.w	r3, r3, #16
 80003dc:	6593      	str	r3, [r2, #88]	; 0x58
 80003de:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <HAL_InitTick+0xe0>)
 80003e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003e2:	f003 0310 	and.w	r3, r3, #16
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003ea:	f107 0210 	add.w	r2, r7, #16
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 f97b 	bl	80016f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003fa:	6a3b      	ldr	r3, [r7, #32]
 80003fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000400:	2b00      	cmp	r3, #0
 8000402:	d103      	bne.n	800040c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000404:	f001 f95e 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 8000408:	6378      	str	r0, [r7, #52]	; 0x34
 800040a:	e004      	b.n	8000416 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800040c:	f001 f95a 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 8000410:	4603      	mov	r3, r0
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000418:	4a23      	ldr	r2, [pc, #140]	; (80004a8 <HAL_InitTick+0xe4>)
 800041a:	fba2 2303 	umull	r2, r3, r2, r3
 800041e:	0c9b      	lsrs	r3, r3, #18
 8000420:	3b01      	subs	r3, #1
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <HAL_InitTick+0xe8>)
 8000426:	4a22      	ldr	r2, [pc, #136]	; (80004b0 <HAL_InitTick+0xec>)
 8000428:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800042a:	4b20      	ldr	r3, [pc, #128]	; (80004ac <HAL_InitTick+0xe8>)
 800042c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000430:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000432:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <HAL_InitTick+0xe8>)
 8000434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000436:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <HAL_InitTick+0xe8>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <HAL_InitTick+0xe8>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <HAL_InitTick+0xe8>)
 8000446:	2200      	movs	r2, #0
 8000448:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800044a:	4818      	ldr	r0, [pc, #96]	; (80004ac <HAL_InitTick+0xe8>)
 800044c:	f001 f9e2 	bl	8001814 <HAL_TIM_Base_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000456:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800045a:	2b00      	cmp	r3, #0
 800045c:	d11b      	bne.n	8000496 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800045e:	4813      	ldr	r0, [pc, #76]	; (80004ac <HAL_InitTick+0xe8>)
 8000460:	f001 fa3a 	bl	80018d8 <HAL_TIM_Base_Start_IT>
 8000464:	4603      	mov	r3, r0
 8000466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800046a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800046e:	2b00      	cmp	r3, #0
 8000470:	d111      	bne.n	8000496 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000472:	2036      	movs	r0, #54	; 0x36
 8000474:	f000 f986 	bl	8000784 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b0f      	cmp	r3, #15
 800047c:	d808      	bhi.n	8000490 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800047e:	2200      	movs	r2, #0
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	2036      	movs	r0, #54	; 0x36
 8000484:	f000 f962 	bl	800074c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000488:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <HAL_InitTick+0xf0>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6013      	str	r3, [r2, #0]
 800048e:	e002      	b.n	8000496 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000490:	2301      	movs	r3, #1
 8000492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000496:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800049a:	4618      	mov	r0, r3
 800049c:	3738      	adds	r7, #56	; 0x38
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	431bde83 	.word	0x431bde83
 80004ac:	20000024 	.word	0x20000024
 80004b0:	40001000 	.word	0x40001000
 80004b4:	20000004 	.word	0x20000004

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	e7fe      	b.n	80004bc <NMI_Handler+0x4>

080004be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <MemManage_Handler+0x4>

080004ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <SystemInit+0x20>)
 8000516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <SystemInit+0x20>)
 800051c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000538:	f7ff ffea 	bl	8000510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000562:	f001 fa85 	bl	8001a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000566:	f001 fa6f 	bl	8001a48 <main>

0800056a <LoopForever>:

LoopForever:
  b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   r0, =_estack
 800056c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000578:	08001b20 	.word	0x08001b20
  ldr r2, =_sbss
 800057c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000580:	20000074 	.word	0x20000074

08000584 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_IRQHandler>

08000586 <hwInit>:
 *  Created on: Mar 23, 2024
 *      Author: Min
 */
#include "hw.h"

void hwInit(void){
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  bspInit();
 800058a:	f7ff fe2d 	bl	80001e8 <bspInit>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}

08000592 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000598:	2300      	movs	r3, #0
 800059a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f8ca 	bl	8000736 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a2:	200f      	movs	r0, #15
 80005a4:	f7ff ff0e 	bl	80003c4 <HAL_InitTick>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e001      	b.n	80005b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b4:	f7ff fee2 	bl	800037c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000070 	.word	0x20000070

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0b      	blt.n	800066a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 021f 	and.w	r2, r3, #31
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <__NVIC_EnableIRQ+0x38>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	095b      	lsrs	r3, r3, #5
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db0a      	blt.n	80006a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a4:	e00a      	b.n	80006bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4908      	ldr	r1, [pc, #32]	; (80006cc <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	0112      	lsls	r2, r2, #4
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	761a      	strb	r2, [r3, #24]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 32ff 	mov.w	r2, #4294967295
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43da      	mvns	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43d9      	mvns	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff4c 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800075e:	f7ff ff61 	bl	8000624 <__NVIC_GetPriorityGrouping>
 8000762:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	6978      	ldr	r0, [r7, #20]
 800076a:	f7ff ffb1 	bl	80006d0 <NVIC_EncodePriority>
 800076e:	4602      	mov	r2, r0
 8000770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff80 	bl	800067c <__NVIC_SetPriority>
}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff54 	bl	8000640 <__NVIC_EnableIRQ>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ae:	e148      	b.n	8000a42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	2101      	movs	r1, #1
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f000 813a 	beq.w	8000a3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f003 0303 	and.w	r3, r3, #3
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d005      	beq.n	80007e0 <HAL_GPIO_Init+0x40>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 0303 	and.w	r3, r3, #3
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d130      	bne.n	8000842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	2203      	movs	r2, #3
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	43db      	mvns	r3, r3
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	4313      	orrs	r3, r2
 8000808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000816:	2201      	movs	r2, #1
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4013      	ands	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	091b      	lsrs	r3, r3, #4
 800082c:	f003 0201 	and.w	r2, r3, #1
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	4313      	orrs	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	2b03      	cmp	r3, #3
 800084c:	d017      	beq.n	800087e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2203      	movs	r2, #3
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4013      	ands	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4313      	orrs	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	2b02      	cmp	r3, #2
 8000888:	d123      	bne.n	80008d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	08da      	lsrs	r2, r3, #3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3208      	adds	r2, #8
 8000892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	220f      	movs	r2, #15
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	691a      	ldr	r2, [r3, #16]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f003 0307 	and.w	r3, r3, #7
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	08da      	lsrs	r2, r3, #3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3208      	adds	r2, #8
 80008cc:	6939      	ldr	r1, [r7, #16]
 80008ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2203      	movs	r2, #3
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f003 0203 	and.w	r2, r3, #3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8094 	beq.w	8000a3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000914:	4b52      	ldr	r3, [pc, #328]	; (8000a60 <HAL_GPIO_Init+0x2c0>)
 8000916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000918:	4a51      	ldr	r2, [pc, #324]	; (8000a60 <HAL_GPIO_Init+0x2c0>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6613      	str	r3, [r2, #96]	; 0x60
 8000920:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <HAL_GPIO_Init+0x2c0>)
 8000922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800092c:	4a4d      	ldr	r2, [pc, #308]	; (8000a64 <HAL_GPIO_Init+0x2c4>)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	089b      	lsrs	r3, r3, #2
 8000932:	3302      	adds	r3, #2
 8000934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000956:	d00d      	beq.n	8000974 <HAL_GPIO_Init+0x1d4>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <HAL_GPIO_Init+0x2c8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d007      	beq.n	8000970 <HAL_GPIO_Init+0x1d0>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a42      	ldr	r2, [pc, #264]	; (8000a6c <HAL_GPIO_Init+0x2cc>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d101      	bne.n	800096c <HAL_GPIO_Init+0x1cc>
 8000968:	2302      	movs	r3, #2
 800096a:	e004      	b.n	8000976 <HAL_GPIO_Init+0x1d6>
 800096c:	2307      	movs	r3, #7
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0x1d6>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <HAL_GPIO_Init+0x1d6>
 8000974:	2300      	movs	r3, #0
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	f002 0203 	and.w	r2, r2, #3
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	4093      	lsls	r3, r2
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000986:	4937      	ldr	r1, [pc, #220]	; (8000a64 <HAL_GPIO_Init+0x2c4>)
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	3302      	adds	r3, #2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000994:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	43db      	mvns	r3, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009b8:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f47f aeaf 	bne.w	80007b0 <HAL_GPIO_Init+0x10>
  }
}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010000 	.word	0x40010000
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	40010400 	.word	0x40010400

08000a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
 8000a80:	4613      	mov	r3, r2
 8000a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a84:	787b      	ldrb	r3, [r7, #1]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a8a:	887a      	ldrh	r2, [r7, #2]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a92:	887a      	ldrh	r2, [r7, #2]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <HAL_PWREx_GetVoltageRange+0x18>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40007000 	.word	0x40007000

08000ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ace:	d130      	bne.n	8000b32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000adc:	d038      	beq.n	8000b50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2232      	movs	r2, #50	; 0x32
 8000af4:	fb02 f303 	mul.w	r3, r2, r3
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b04:	e002      	b.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b18:	d102      	bne.n	8000b20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1f2      	bne.n	8000b06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b2c:	d110      	bne.n	8000b50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e00f      	b.n	8000b52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3e:	d007      	beq.n	8000b50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40007000 	.word	0x40007000
 8000b64:	20000000 	.word	0x20000000
 8000b68:	431bde83 	.word	0x431bde83

08000b6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f000 bc02 	b.w	8001384 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b80:	4b96      	ldr	r3, [pc, #600]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b8a:	4b94      	ldr	r3, [pc, #592]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 80e4 	beq.w	8000d6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x4c>
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2b0c      	cmp	r3, #12
 8000bac:	f040 808b 	bne.w	8000cc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	f040 8087 	bne.w	8000cc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bb8:	4b88      	ldr	r3, [pc, #544]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d005      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x64>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e3d9      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1a      	ldr	r2, [r3, #32]
 8000bd4:	4b81      	ldr	r3, [pc, #516]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d004      	beq.n	8000bea <HAL_RCC_OscConfig+0x7e>
 8000be0:	4b7e      	ldr	r3, [pc, #504]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000be8:	e005      	b.n	8000bf6 <HAL_RCC_OscConfig+0x8a>
 8000bea:	4b7c      	ldr	r3, [pc, #496]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bf0:	091b      	lsrs	r3, r3, #4
 8000bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d223      	bcs.n	8000c42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a1b      	ldr	r3, [r3, #32]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fda8 	bl	8001754 <RCC_SetFlashLatencyFromMSIRange>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e3ba      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c0e:	4b73      	ldr	r3, [pc, #460]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a72      	ldr	r2, [pc, #456]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	4b70      	ldr	r3, [pc, #448]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	496d      	ldr	r1, [pc, #436]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c2c:	4b6b      	ldr	r3, [pc, #428]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	4968      	ldr	r1, [pc, #416]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
 8000c40:	e025      	b.n	8000c8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c42:	4b66      	ldr	r3, [pc, #408]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	4b63      	ldr	r3, [pc, #396]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	4960      	ldr	r1, [pc, #384]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c60:	4b5e      	ldr	r3, [pc, #376]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	495b      	ldr	r1, [pc, #364]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c70:	4313      	orrs	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d109      	bne.n	8000c8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fd68 	bl	8001754 <RCC_SetFlashLatencyFromMSIRange>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e37a      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c8e:	f000 fc81 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8000c92:	4602      	mov	r2, r0
 8000c94:	4b51      	ldr	r3, [pc, #324]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	4950      	ldr	r1, [pc, #320]	; (8000de0 <HAL_RCC_OscConfig+0x274>)
 8000ca0:	5ccb      	ldrb	r3, [r1, r3]
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8000caa:	4a4e      	ldr	r2, [pc, #312]	; (8000de4 <HAL_RCC_OscConfig+0x278>)
 8000cac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cae:	4b4e      	ldr	r3, [pc, #312]	; (8000de8 <HAL_RCC_OscConfig+0x27c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fb86 	bl	80003c4 <HAL_InitTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d052      	beq.n	8000d68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	e35e      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d032      	beq.n	8000d34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cce:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a42      	ldr	r2, [pc, #264]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cda:	f7ff fc73 	bl	80005c4 <HAL_GetTick>
 8000cde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ce0:	e008      	b.n	8000cf4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fc6f 	bl	80005c4 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e347      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cf4:	4b39      	ldr	r3, [pc, #228]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f0      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a35      	ldr	r2, [pc, #212]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	4930      	ldr	r1, [pc, #192]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	492b      	ldr	r1, [pc, #172]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	604b      	str	r3, [r1, #4]
 8000d32:	e01a      	b.n	8000d6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a28      	ldr	r2, [pc, #160]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d3a:	f023 0301 	bic.w	r3, r3, #1
 8000d3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc40 	bl	80005c4 <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d48:	f7ff fc3c 	bl	80005c4 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e314      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f0      	bne.n	8000d48 <HAL_RCC_OscConfig+0x1dc>
 8000d66:	e000      	b.n	8000d6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d073      	beq.n	8000e5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d005      	beq.n	8000d88 <HAL_RCC_OscConfig+0x21c>
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2b0c      	cmp	r3, #12
 8000d80:	d10e      	bne.n	8000da0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d10b      	bne.n	8000da0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d063      	beq.n	8000e5c <HAL_RCC_OscConfig+0x2f0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d15f      	bne.n	8000e5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e2f1      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da8:	d106      	bne.n	8000db8 <HAL_RCC_OscConfig+0x24c>
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e025      	b.n	8000e04 <HAL_RCC_OscConfig+0x298>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc0:	d114      	bne.n	8000dec <HAL_RCC_OscConfig+0x280>
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a02      	ldr	r2, [pc, #8]	; (8000ddc <HAL_RCC_OscConfig+0x270>)
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e013      	b.n	8000e04 <HAL_RCC_OscConfig+0x298>
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	08001ad0 	.word	0x08001ad0
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004
 8000dec:	4ba0      	ldr	r3, [pc, #640]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a9f      	ldr	r2, [pc, #636]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b9d      	ldr	r3, [pc, #628]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a9c      	ldr	r2, [pc, #624]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d013      	beq.n	8000e34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fbda 	bl	80005c4 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fbd6 	bl	80005c4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e2ae      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e26:	4b92      	ldr	r3, [pc, #584]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x2a8>
 8000e32:	e014      	b.n	8000e5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e34:	f7ff fbc6 	bl	80005c4 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fbc2 	bl	80005c4 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e29a      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e4e:	4b88      	ldr	r3, [pc, #544]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x2d0>
 8000e5a:	e000      	b.n	8000e5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d060      	beq.n	8000f2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d005      	beq.n	8000e7c <HAL_RCC_OscConfig+0x310>
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b0c      	cmp	r3, #12
 8000e74:	d119      	bne.n	8000eaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d116      	bne.n	8000eaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e7c:	4b7c      	ldr	r3, [pc, #496]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <HAL_RCC_OscConfig+0x328>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e277      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e94:	4b76      	ldr	r3, [pc, #472]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	061b      	lsls	r3, r3, #24
 8000ea2:	4973      	ldr	r1, [pc, #460]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ea8:	e040      	b.n	8000f2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d023      	beq.n	8000efa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb2:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a6e      	ldr	r2, [pc, #440]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fb81 	bl	80005c4 <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec6:	f7ff fb7d 	bl	80005c4 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e255      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ed8:	4b65      	ldr	r3, [pc, #404]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee4:	4b62      	ldr	r3, [pc, #392]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	061b      	lsls	r3, r3, #24
 8000ef2:	495f      	ldr	r1, [pc, #380]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	604b      	str	r3, [r1, #4]
 8000ef8:	e018      	b.n	8000f2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a5c      	ldr	r2, [pc, #368]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f06:	f7ff fb5d 	bl	80005c4 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fb59 	bl	80005c4 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e231      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f20:	4b53      	ldr	r3, [pc, #332]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d03c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d01c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f50:	f7ff fb38 	bl	80005c4 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f58:	f7ff fb34 	bl	80005c4 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e20c      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f6a:	4b41      	ldr	r3, [pc, #260]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0ef      	beq.n	8000f58 <HAL_RCC_OscConfig+0x3ec>
 8000f78:	e01b      	b.n	8000fb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f80:	4a3b      	ldr	r2, [pc, #236]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000f82:	f023 0301 	bic.w	r3, r3, #1
 8000f86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb1b 	bl	80005c4 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f92:	f7ff fb17 	bl	80005c4 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e1ef      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fa4:	4b32      	ldr	r3, [pc, #200]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1ef      	bne.n	8000f92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80a6 	beq.w	800110c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10d      	bne.n	8000fec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6593      	str	r3, [r2, #88]	; 0x58
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <HAL_RCC_OscConfig+0x508>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d118      	bne.n	800102a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <HAL_RCC_OscConfig+0x508>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <HAL_RCC_OscConfig+0x508>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001004:	f7ff fade 	bl	80005c4 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100c:	f7ff fada 	bl	80005c4 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e1b2      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_RCC_OscConfig+0x508>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d108      	bne.n	8001044 <HAL_RCC_OscConfig+0x4d8>
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8001034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001042:	e029      	b.n	8001098 <HAL_RCC_OscConfig+0x52c>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b05      	cmp	r3, #5
 800104a:	d115      	bne.n	8001078 <HAL_RCC_OscConfig+0x50c>
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 800104e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 800105e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001062:	4a03      	ldr	r2, [pc, #12]	; (8001070 <HAL_RCC_OscConfig+0x504>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800106c:	e014      	b.n	8001098 <HAL_RCC_OscConfig+0x52c>
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	40007000 	.word	0x40007000
 8001078:	4b9a      	ldr	r3, [pc, #616]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 800107a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800107e:	4a99      	ldr	r2, [pc, #612]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001088:	4b96      	ldr	r3, [pc, #600]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 800108a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800108e:	4a95      	ldr	r2, [pc, #596]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d016      	beq.n	80010ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a0:	f7ff fa90 	bl	80005c4 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010a6:	e00a      	b.n	80010be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a8:	f7ff fa8c 	bl	80005c4 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e162      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010be:	4b89      	ldr	r3, [pc, #548]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 80010c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0ed      	beq.n	80010a8 <HAL_RCC_OscConfig+0x53c>
 80010cc:	e015      	b.n	80010fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ce:	f7ff fa79 	bl	80005c4 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010d4:	e00a      	b.n	80010ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff fa75 	bl	80005c4 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e14b      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ec:	4b7d      	ldr	r3, [pc, #500]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 80010ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ed      	bne.n	80010d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010fa:	7ffb      	ldrb	r3, [r7, #31]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d105      	bne.n	800110c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001100:	4b78      	ldr	r3, [pc, #480]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	4a77      	ldr	r2, [pc, #476]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800110a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	2b00      	cmp	r3, #0
 8001116:	d03c      	beq.n	8001192 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01c      	beq.n	800115a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001120:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001126:	4a6f      	ldr	r2, [pc, #444]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff fa48 	bl	80005c4 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001138:	f7ff fa44 	bl	80005c4 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e11c      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800114a:	4b66      	ldr	r3, [pc, #408]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 800114c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ef      	beq.n	8001138 <HAL_RCC_OscConfig+0x5cc>
 8001158:	e01b      	b.n	8001192 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800115a:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 800115c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001160:	4a60      	ldr	r2, [pc, #384]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116a:	f7ff fa2b 	bl	80005c4 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001172:	f7ff fa27 	bl	80005c4 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e0ff      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001184:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1ef      	bne.n	8001172 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80f3 	beq.w	8001382 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	f040 80c9 	bne.w	8001338 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f003 0203 	and.w	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d12c      	bne.n	8001214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	3b01      	subs	r3, #1
 80011c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d123      	bne.n	8001214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011d8:	429a      	cmp	r2, r3
 80011da:	d11b      	bne.n	8001214 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d113      	bne.n	8001214 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f6:	085b      	lsrs	r3, r3, #1
 80011f8:	3b01      	subs	r3, #1
 80011fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d109      	bne.n	8001214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	085b      	lsrs	r3, r3, #1
 800120c:	3b01      	subs	r3, #1
 800120e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001210:	429a      	cmp	r2, r3
 8001212:	d06b      	beq.n	80012ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d062      	beq.n	80012e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0ac      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001234:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001236:	f7ff f9c5 	bl	80005c4 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123e:	f7ff f9c1 	bl	80005c4 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e099      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_RCC_OscConfig+0x77c>)
 8001262:	4013      	ands	r3, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800126c:	3a01      	subs	r2, #1
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	4311      	orrs	r1, r2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001276:	0212      	lsls	r2, r2, #8
 8001278:	4311      	orrs	r1, r2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800127e:	0852      	lsrs	r2, r2, #1
 8001280:	3a01      	subs	r2, #1
 8001282:	0552      	lsls	r2, r2, #21
 8001284:	4311      	orrs	r1, r2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800128a:	0852      	lsrs	r2, r2, #1
 800128c:	3a01      	subs	r2, #1
 800128e:	0652      	lsls	r2, r2, #25
 8001290:	4311      	orrs	r1, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001296:	06d2      	lsls	r2, r2, #27
 8001298:	430a      	orrs	r2, r1
 800129a:	4912      	ldr	r1, [pc, #72]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 800129c:	4313      	orrs	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 80012a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 80012b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012b8:	f7ff f984 	bl	80005c4 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c0:	f7ff f980 	bl	80005c4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e058      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_RCC_OscConfig+0x778>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012de:	e050      	b.n	8001382 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e04f      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
 80012e4:	40021000 	.word	0x40021000
 80012e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_OscConfig+0x820>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d144      	bne.n	8001382 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_RCC_OscConfig+0x820>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a23      	ldr	r2, [pc, #140]	; (800138c <HAL_RCC_OscConfig+0x820>)
 80012fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001302:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_RCC_OscConfig+0x820>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4a20      	ldr	r2, [pc, #128]	; (800138c <HAL_RCC_OscConfig+0x820>)
 800130a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800130e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001310:	f7ff f958 	bl	80005c4 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff f954 	bl	80005c4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e02c      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_RCC_OscConfig+0x820>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x7ac>
 8001336:	e024      	b.n	8001382 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b0c      	cmp	r3, #12
 800133c:	d01f      	beq.n	800137e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_RCC_OscConfig+0x820>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <HAL_RCC_OscConfig+0x820>)
 8001344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134a:	f7ff f93b 	bl	80005c4 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff f937 	bl	80005c4 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e00f      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_OscConfig+0x820>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_RCC_OscConfig+0x820>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	4905      	ldr	r1, [pc, #20]	; (800138c <HAL_RCC_OscConfig+0x820>)
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_RCC_OscConfig+0x824>)
 8001378:	4013      	ands	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
 800137c:	e001      	b.n	8001382 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	feeefffc 	.word	0xfeeefffc

08001394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0e7      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a8:	4b75      	ldr	r3, [pc, #468]	; (8001580 <HAL_RCC_ClockConfig+0x1ec>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d910      	bls.n	80013d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_RCC_ClockConfig+0x1ec>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 0207 	bic.w	r2, r3, #7
 80013be:	4970      	ldr	r1, [pc, #448]	; (8001580 <HAL_RCC_ClockConfig+0x1ec>)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c6:	4b6e      	ldr	r3, [pc, #440]	; (8001580 <HAL_RCC_ClockConfig+0x1ec>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0cf      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d010      	beq.n	8001406 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	4b66      	ldr	r3, [pc, #408]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d908      	bls.n	8001406 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f4:	4b63      	ldr	r3, [pc, #396]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4960      	ldr	r1, [pc, #384]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d04c      	beq.n	80014ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141a:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d121      	bne.n	800146a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0a6      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001432:	4b54      	ldr	r3, [pc, #336]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d115      	bne.n	800146a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e09a      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800144a:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e08e      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e086      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f023 0203 	bic.w	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4943      	ldr	r1, [pc, #268]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	4313      	orrs	r3, r2
 800147a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800147c:	f7ff f8a2 	bl	80005c4 <HAL_GetTick>
 8001480:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	e00a      	b.n	800149a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001484:	f7ff f89e 	bl	80005c4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e06e      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 020c 	and.w	r2, r3, #12
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d1eb      	bne.n	8001484 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d010      	beq.n	80014da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d208      	bcs.n	80014da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	492b      	ldr	r1, [pc, #172]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_RCC_ClockConfig+0x1ec>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d210      	bcs.n	800150a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_RCC_ClockConfig+0x1ec>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 0207 	bic.w	r2, r3, #7
 80014f0:	4923      	ldr	r1, [pc, #140]	; (8001580 <HAL_RCC_ClockConfig+0x1ec>)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_RCC_ClockConfig+0x1ec>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e036      	b.n	8001578 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	4918      	ldr	r1, [pc, #96]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4910      	ldr	r1, [pc, #64]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001548:	f000 f824 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_RCC_ClockConfig+0x1f0>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	490b      	ldr	r1, [pc, #44]	; (8001588 <HAL_RCC_ClockConfig+0x1f4>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1f8>)
 8001566:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1fc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ff29 	bl	80003c4 <HAL_InitTick>
 8001572:	4603      	mov	r3, r0
 8001574:	72fb      	strb	r3, [r7, #11]

  return status;
 8001576:	7afb      	ldrb	r3, [r7, #11]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40022000 	.word	0x40022000
 8001584:	40021000 	.word	0x40021000
 8001588:	08001ad0 	.word	0x08001ad0
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ac:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x34>
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d121      	bne.n	8001606 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d11e      	bne.n	8001606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015c8:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	e005      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015f0:	4a2b      	ldr	r2, [pc, #172]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10d      	bne.n	800161c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001604:	e00a      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b04      	cmp	r3, #4
 800160a:	d102      	bne.n	8001612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	e004      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d101      	bne.n	800161c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800161a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	2b0c      	cmp	r3, #12
 8001620:	d134      	bne.n	800168c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d003      	beq.n	800163a <HAL_RCC_GetSysClockFreq+0xa6>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d003      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0xac>
 8001638:	e005      	b.n	8001646 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800163c:	617b      	str	r3, [r7, #20]
      break;
 800163e:	e005      	b.n	800164c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001642:	617b      	str	r3, [r7, #20]
      break;
 8001644:	e002      	b.n	800164c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	617b      	str	r3, [r7, #20]
      break;
 800164a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	3301      	adds	r3, #1
 8001658:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	fb03 f202 	mul.w	r2, r3, r2
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_RCC_GetSysClockFreq+0x108>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	0e5b      	lsrs	r3, r3, #25
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	3301      	adds	r3, #1
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800168c:	69bb      	ldr	r3, [r7, #24]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	08001ae8 	.word	0x08001ae8
 80016a4:	00f42400 	.word	0x00f42400
 80016a8:	007a1200 	.word	0x007a1200

080016ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000

080016c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80016c8:	f7ff fff0 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4904      	ldr	r1, [pc, #16]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08001ae0 	.word	0x08001ae0

080016f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	220f      	movs	r2, #15
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_RCC_GetClockConfig+0x5c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_RCC_GetClockConfig+0x5c>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_RCC_GetClockConfig+0x5c>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_GetClockConfig+0x5c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <HAL_RCC_GetClockConfig+0x60>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0207 	and.w	r2, r3, #7
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40022000 	.word	0x40022000

08001754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800176c:	f7ff f99a 	bl	8000aa4 <HAL_PWREx_GetVoltageRange>
 8001770:	6178      	str	r0, [r7, #20]
 8001772:	e014      	b.n	800179e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a24      	ldr	r2, [pc, #144]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800178c:	f7ff f98a 	bl	8000aa4 <HAL_PWREx_GetVoltageRange>
 8001790:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a4:	d10b      	bne.n	80017be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d919      	bls.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2ba0      	cmp	r3, #160	; 0xa0
 80017b0:	d902      	bls.n	80017b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017b2:	2302      	movs	r3, #2
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e013      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017b8:	2301      	movs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	e010      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b80      	cmp	r3, #128	; 0x80
 80017c2:	d902      	bls.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017c4:	2303      	movs	r3, #3
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e00a      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b80      	cmp	r3, #128	; 0x80
 80017ce:	d102      	bne.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017d0:	2302      	movs	r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e004      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b70      	cmp	r3, #112	; 0x70
 80017da:	d101      	bne.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0207 	bic.w	r2, r3, #7
 80017e8:	4909      	ldr	r1, [pc, #36]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e049      	b.n	80018ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f841 	bl	80018c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3304      	adds	r3, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f000 f894 	bl	8001980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d001      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e03b      	b.n	8001968 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_TIM_Base_Start_IT+0x9c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_TIM_Base_Start_IT+0x4e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191a:	d004      	beq.n	8001926 <HAL_TIM_Base_Start_IT+0x4e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_TIM_Base_Start_IT+0xa0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d115      	bne.n	8001952 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_TIM_Base_Start_IT+0xa4>)
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b06      	cmp	r3, #6
 8001936:	d015      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x8c>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193e:	d011      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001950:	e008      	b.n	8001964 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e000      	b.n	8001966 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001964:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40012c00 	.word	0x40012c00
 8001978:	40014000 	.word	0x40014000
 800197c:	00010007 	.word	0x00010007

08001980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <TIM_Base_SetConfig+0xbc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d003      	beq.n	80019a0 <TIM_Base_SetConfig+0x20>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199e:	d108      	bne.n	80019b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <TIM_Base_SetConfig+0xbc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00b      	beq.n	80019d2 <TIM_Base_SetConfig+0x52>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c0:	d007      	beq.n	80019d2 <TIM_Base_SetConfig+0x52>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <TIM_Base_SetConfig+0xc0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d003      	beq.n	80019d2 <TIM_Base_SetConfig+0x52>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <TIM_Base_SetConfig+0xc4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d108      	bne.n	80019e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <TIM_Base_SetConfig+0xbc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <TIM_Base_SetConfig+0xa0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <TIM_Base_SetConfig+0xc0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d003      	beq.n	8001a20 <TIM_Base_SetConfig+0xa0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <TIM_Base_SetConfig+0xc4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d103      	bne.n	8001a28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	615a      	str	r2, [r3, #20]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40014000 	.word	0x40014000
 8001a44:	40014400 	.word	0x40014400

08001a48 <main>:

#include "main.h"



int main(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  hwInit();
 8001a4c:	f7fe fd9b 	bl	8000586 <hwInit>
  apInit();
 8001a50:	f7fe fbc0 	bl	80001d4 <apInit>

  apMain();
 8001a54:	f7fe fbc5 	bl	80001e2 <apMain>

  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <memset>:
 8001a5e:	4402      	add	r2, r0
 8001a60:	4603      	mov	r3, r0
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d100      	bne.n	8001a68 <memset+0xa>
 8001a66:	4770      	bx	lr
 8001a68:	f803 1b01 	strb.w	r1, [r3], #1
 8001a6c:	e7f9      	b.n	8001a62 <memset+0x4>
	...

08001a70 <__libc_init_array>:
 8001a70:	b570      	push	{r4, r5, r6, lr}
 8001a72:	4d0d      	ldr	r5, [pc, #52]	; (8001aa8 <__libc_init_array+0x38>)
 8001a74:	4c0d      	ldr	r4, [pc, #52]	; (8001aac <__libc_init_array+0x3c>)
 8001a76:	1b64      	subs	r4, r4, r5
 8001a78:	10a4      	asrs	r4, r4, #2
 8001a7a:	2600      	movs	r6, #0
 8001a7c:	42a6      	cmp	r6, r4
 8001a7e:	d109      	bne.n	8001a94 <__libc_init_array+0x24>
 8001a80:	4d0b      	ldr	r5, [pc, #44]	; (8001ab0 <__libc_init_array+0x40>)
 8001a82:	4c0c      	ldr	r4, [pc, #48]	; (8001ab4 <__libc_init_array+0x44>)
 8001a84:	f000 f818 	bl	8001ab8 <_init>
 8001a88:	1b64      	subs	r4, r4, r5
 8001a8a:	10a4      	asrs	r4, r4, #2
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	42a6      	cmp	r6, r4
 8001a90:	d105      	bne.n	8001a9e <__libc_init_array+0x2e>
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
 8001a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a98:	4798      	blx	r3
 8001a9a:	3601      	adds	r6, #1
 8001a9c:	e7ee      	b.n	8001a7c <__libc_init_array+0xc>
 8001a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aa2:	4798      	blx	r3
 8001aa4:	3601      	adds	r6, #1
 8001aa6:	e7f2      	b.n	8001a8e <__libc_init_array+0x1e>
 8001aa8:	08001b18 	.word	0x08001b18
 8001aac:	08001b18 	.word	0x08001b18
 8001ab0:	08001b18 	.word	0x08001b18
 8001ab4:	08001b1c 	.word	0x08001b1c

08001ab8 <_init>:
 8001ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aba:	bf00      	nop
 8001abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001abe:	bc08      	pop	{r3}
 8001ac0:	469e      	mov	lr, r3
 8001ac2:	4770      	bx	lr

08001ac4 <_fini>:
 8001ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac6:	bf00      	nop
 8001ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aca:	bc08      	pop	{r3}
 8001acc:	469e      	mov	lr, r3
 8001ace:	4770      	bx	lr
