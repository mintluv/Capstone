
Cube_L432k.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009934  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b50  08009b50  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b58  08009b58  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08009b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000138c  2000010c  08009c6c  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  08009c6c  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b3e  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003703  00000000  00000000  00035cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  000393c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d29  00000000  00000000  0003a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230f0  00000000  00000000  0003b251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ab8  00000000  00000000  0005e341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5d5d  00000000  00000000  00075df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000461c  00000000  00000000  0013bb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00140174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000010c 	.word	0x2000010c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009aa8 	.word	0x08009aa8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000110 	.word	0x20000110
 80001c8:	08009aa8 	.word	0x08009aa8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b2e      	ldr	r3, [pc, #184]	; (8000598 <MX_GPIO_Init+0xd0>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a2d      	ldr	r2, [pc, #180]	; (8000598 <MX_GPIO_Init+0xd0>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b2b      	ldr	r3, [pc, #172]	; (8000598 <MX_GPIO_Init+0xd0>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <MX_GPIO_Init+0xd0>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a27      	ldr	r2, [pc, #156]	; (8000598 <MX_GPIO_Init+0xd0>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <MX_GPIO_Init+0xd0>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <MX_GPIO_Init+0xd0>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a21      	ldr	r2, [pc, #132]	; (8000598 <MX_GPIO_Init+0xd0>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_GPIO_Init+0xd0>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800052c:	481b      	ldr	r0, [pc, #108]	; (800059c <MX_GPIO_Init+0xd4>)
 800052e:	f000 fdcd 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2103      	movs	r1, #3
 8000536:	481a      	ldr	r0, [pc, #104]	; (80005a0 <MX_GPIO_Init+0xd8>)
 8000538:	f000 fdc8 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800053c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	4811      	ldr	r0, [pc, #68]	; (800059c <MX_GPIO_Init+0xd4>)
 8000556:	f000 fc4f 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800055a:	2310      	movs	r3, #16
 800055c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4619      	mov	r1, r3
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f000 fc42 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000574:	2303      	movs	r3, #3
 8000576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_GPIO_Init+0xd8>)
 800058c:	f000 fc34 	bl	8000df8 <HAL_GPIO_Init>

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000
 800059c:	48000800 	.word	0x48000800
 80005a0:	48000400 	.word	0x48000400

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fa9f 	bl	8000aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f80b 	bl	80005c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f7ff ff8a 	bl	80004c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f996 	bl	80008e4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005b8:	f000 f85c 	bl	8000674 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005bc:	f000 f962 	bl	8000884 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005c0:	f008 fcbe 	bl	8008f40 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x20>

080005c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b096      	sub	sp, #88	; 0x58
 80005ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2244      	movs	r2, #68	; 0x44
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f009 fa3b 	bl	8009a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ec:	f002 fb12 	bl	8002c14 <HAL_PWREx_ControlVoltageScaling>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f6:	f000 f838 	bl	800066a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fa:	2310      	movs	r3, #16
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fe:	2301      	movs	r3, #1
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000606:	2360      	movs	r3, #96	; 0x60
 8000608:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800060e:	2301      	movs	r3, #1
 8000610:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000616:	2328      	movs	r3, #40	; 0x28
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fb58 	bl	8002ce0 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000636:	f000 f818 	bl	800066a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f002 ff58 	bl	8003508 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800065e:	f000 f804 	bl	800066a <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3758      	adds	r7, #88	; 0x58
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066e:	b672      	cpsid	i
}
 8000670:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000672:	e7fe      	b.n	8000672 <Error_Handler+0x8>

08000674 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_SPI1_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_SPI1_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_SPI1_Init+0x74>)
 800068e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000692:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_SPI1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006c2:	2207      	movs	r2, #7
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006ce:	2208      	movs	r2, #8
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006d4:	f003 fc24 	bl	8003f20 <HAL_SPI_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006de:	f7ff ffc4 	bl	800066a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000128 	.word	0x20000128
 80006ec:	40013000 	.word	0x40013000

080006f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <HAL_SPI_MspInit+0xb4>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d144      	bne.n	800079c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 8000718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800071c:	6613      	str	r3, [r2, #96]	; 0x60
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_SPI_MspInit+0xb8>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800076a:	2305      	movs	r3, #5
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 fb3e 	bl	8000df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800077c:	2310      	movs	r3, #16
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800078c:	2305      	movs	r3, #5
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <HAL_SPI_MspInit+0xbc>)
 8000798:	f000 fb2e 	bl	8000df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40013000 	.word	0x40013000
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000400 	.word	0x48000400

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_MspInit+0x44>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6613      	str	r3, [r2, #96]	; 0x60
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x44>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6593      	str	r3, [r2, #88]	; 0x58
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f9a6 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <USB_IRQHandler+0x10>)
 8000852:	f000 fd7b 	bl	800134c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000f80 	.word	0x20000f80

08000860 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART1_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c8:	f003 fbcd 	bl	8004066 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f7ff feca 	bl	800066a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000018c 	.word	0x2000018c
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_USART2_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000928:	f003 fb9d 	bl	8004066 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f7ff fe9a 	bl	800066a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000214 	.word	0x20000214
 8000940:	40004400 	.word	0x40004400

08000944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0a0      	sub	sp, #128	; 0x80
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	2254      	movs	r2, #84	; 0x54
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f009 f873 	bl	8009a50 <memset>
  if(uartHandle->Instance==USART1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a47      	ldr	r2, [pc, #284]	; (8000a8c <HAL_UART_MspInit+0x148>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d138      	bne.n	80009e6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000978:	2300      	movs	r3, #0
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	4618      	mov	r0, r3
 8000982:	f002 ffe5 	bl	8003950 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800098c:	f7ff fe6d 	bl	800066a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000990:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000994:	4a3e      	ldr	r2, [pc, #248]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6613      	str	r3, [r2, #96]	; 0x60
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b39      	ldr	r3, [pc, #228]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	4a38      	ldr	r2, [pc, #224]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d2:	2307      	movs	r3, #7
 80009d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 fa0a 	bl	8000df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009e4:	e04d      	b.n	8000a82 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <HAL_UART_MspInit+0x150>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d148      	bne.n	8000a82 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 ffa7 	bl	8003950 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000a08:	f7ff fe2f 	bl	800066a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a10:	4a1f      	ldr	r2, [pc, #124]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a16:	6593      	str	r3, [r2, #88]	; 0x58
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0x14c>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 f9cd 	bl	8000df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a70:	2303      	movs	r3, #3
 8000a72:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f000 f9bb 	bl	8000df8 <HAL_GPIO_Init>
}
 8000a82:	bf00      	nop
 8000a84:	3780      	adds	r7, #128	; 0x80
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40013800 	.word	0x40013800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40004400 	.word	0x40004400

08000a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff fee0 	bl	8000860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f008 ffcb 	bl	8009a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aca:	f7ff fd6b 	bl	80005a4 <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000adc:	08009b60 	.word	0x08009b60
  ldr r2, =_sbss
 8000ae0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000ae4:	20001498 	.word	0x20001498

08000ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_IRQHandler>

08000aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f93d 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f80e 	bl	8000b1c <HAL_InitTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	e001      	b.n	8000b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0c:	f7ff fe50 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d023      	beq.n	8000b78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_InitTick+0x70>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f949 	bl	8000dde <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10f      	bne.n	8000b72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d809      	bhi.n	8000b6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f913 	bl	8000d8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_InitTick+0x74>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e007      	b.n	8000b7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e004      	b.n	8000b7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e001      	b.n	8000b7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	2000029c 	.word	0x2000029c

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000029c 	.word	0x2000029c

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e148      	b.n	800109a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 813a 	beq.w	8001094 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d017      	beq.n	8000ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0203 	and.w	r2, r3, #3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8094 	beq.w	8001094 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x2c0>)
 8000f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f70:	4a51      	ldr	r2, [pc, #324]	; (80010b8 <HAL_GPIO_Init+0x2c0>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6613      	str	r3, [r2, #96]	; 0x60
 8000f78:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <HAL_GPIO_Init+0x2c0>)
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f84:	4a4d      	ldr	r2, [pc, #308]	; (80010bc <HAL_GPIO_Init+0x2c4>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fae:	d00d      	beq.n	8000fcc <HAL_GPIO_Init+0x1d4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <HAL_GPIO_Init+0x2c8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d007      	beq.n	8000fc8 <HAL_GPIO_Init+0x1d0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a42      	ldr	r2, [pc, #264]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_GPIO_Init+0x1cc>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e004      	b.n	8000fce <HAL_GPIO_Init+0x1d6>
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_Init+0x1d6>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <HAL_GPIO_Init+0x1d6>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	f002 0203 	and.w	r2, r2, #3
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fde:	4937      	ldr	r1, [pc, #220]	; (80010bc <HAL_GPIO_Init+0x2c4>)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001010:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f47f aeaf 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	48000400 	.word	0x48000400
 80010c4:	48000800 	.word	0x48000800
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fe:	b08b      	sub	sp, #44	; 0x2c
 8001100:	af06      	add	r7, sp, #24
 8001102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0f8      	b.n	8001300 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f008 f8ee 	bl	8009304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2203      	movs	r2, #3
 800112c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fc4e 	bl	80049d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	687e      	ldr	r6, [r7, #4]
 8001142:	466d      	mov	r5, sp
 8001144:	f106 0410 	add.w	r4, r6, #16
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	602b      	str	r3, [r5, #0]
 8001150:	1d33      	adds	r3, r6, #4
 8001152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f003 fc16 	bl	8004986 <USB_CoreInit>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2202      	movs	r2, #2
 8001164:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0c9      	b.n	8001300 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fc4a 	bl	8004a0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e040      	b.n	8001200 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	3301      	adds	r3, #1
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	440b      	add	r3, r1
 80011b8:	3303      	adds	r3, #3
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3338      	adds	r3, #56	; 0x38
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	333c      	adds	r3, #60	; 0x3c
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	3340      	adds	r3, #64	; 0x40
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	d3b9      	bcc.n	800117e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e044      	b.n	800129a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	440b      	add	r3, r1
 8001260:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	440b      	add	r3, r1
 800128c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	3301      	adds	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d3b5      	bcc.n	8001210 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	687e      	ldr	r6, [r7, #4]
 80012ac:	466d      	mov	r5, sp
 80012ae:	f106 0410 	add.w	r4, r6, #16
 80012b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	602b      	str	r3, [r5, #0]
 80012ba:	1d33      	adds	r3, r6, #4
 80012bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	f003 fbb1 	bl	8004a26 <USB_DevInit>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2202      	movs	r2, #2
 80012ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e014      	b.n	8001300 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 fc58 	bl	8002ba4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f005 fe41 	bl	8006f80 <USB_DevDisconnect>

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001308 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_PCD_Start+0x16>
 800131a:	2302      	movs	r3, #2
 800131c:	e012      	b.n	8001344 <HAL_PCD_Start+0x3c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fb3c 	bl	80049a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f005 fe0c 	bl	8006f52 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f005 fe26 	bl	8006faa <USB_ReadInterrupts>
 800135e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fb13 	bl	8001996 <PCD_EP_ISR_Handler>

    return;
 8001370:	e110      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800138e:	b292      	uxth	r2, r2
 8001390:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f008 f856 	bl	8009446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800139a:	2100      	movs	r1, #0
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f8fc 	bl	800159a <HAL_PCD_SetAddress>

    return;
 80013a2:	e0f7      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00c      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013c0:	b292      	uxth	r2, r2
 80013c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013c6:	e0e5      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00c      	beq.n	80013ec <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013e4:	b292      	uxth	r2, r2
 80013e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013ea:	e0d3      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d034      	beq.n	8001460 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0204 	bic.w	r2, r2, #4
 8001408:	b292      	uxth	r2, r2
 800140a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001416:	b29a      	uxth	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0208 	bic.w	r2, r2, #8
 8001420:	b292      	uxth	r2, r2
 8001422:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001438:	2100      	movs	r1, #0
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f008 fab4 	bl	80099a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f008 f839 	bl	80094b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001458:	b292      	uxth	r2, r2
 800145a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800145e:	e099      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001466:	2b00      	cmp	r3, #0
 8001468:	d027      	beq.n	80014ba <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001472:	b29a      	uxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0208 	orr.w	r2, r2, #8
 800147c:	b292      	uxth	r2, r2
 800147e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001494:	b292      	uxth	r2, r2
 8001496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0204 	orr.w	r2, r2, #4
 80014ac:	b292      	uxth	r2, r2
 80014ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f007 ffe6 	bl	8009484 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014b8:	e06c      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d040      	beq.n	8001546 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d6:	b292      	uxth	r2, r2
 80014d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d12b      	bne.n	800153e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0204 	orr.w	r2, r2, #4
 80014f8:	b292      	uxth	r2, r2
 80014fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0208 	orr.w	r2, r2, #8
 8001510:	b292      	uxth	r2, r2
 8001512:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001526:	b29b      	uxth	r3, r3
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001534:	2101      	movs	r1, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f008 fa36 	bl	80099a8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800153c:	e02a      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f007 ffa0 	bl	8009484 <HAL_PCD_SuspendCallback>
    return;
 8001544:	e026      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00f      	beq.n	8001570 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001562:	b292      	uxth	r2, r2
 8001564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f007 ff5e 	bl	800942a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800156e:	e011      	b.n	8001594 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00c      	beq.n	8001594 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001582:	b29a      	uxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800158c:	b292      	uxth	r2, r2
 800158e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001592:	bf00      	nop
  }
}
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_PCD_SetAddress+0x1a>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e013      	b.n	80015dc <HAL_PCD_SetAddress+0x42>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 fcac 	bl	8006f2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	70fb      	strb	r3, [r7, #3]
 80015f6:	460b      	mov	r3, r1
 80015f8:	803b      	strh	r3, [r7, #0]
 80015fa:	4613      	mov	r3, r2
 80015fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001606:	2b00      	cmp	r3, #0
 8001608:	da0e      	bge.n	8001628 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2201      	movs	r2, #1
 8001624:	705a      	strb	r2, [r3, #1]
 8001626:	e00e      	b.n	8001646 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 0207 	and.w	r2, r3, #7
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	b2da      	uxtb	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001652:	883a      	ldrh	r2, [r7, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	78ba      	ldrb	r2, [r7, #2]
 800165c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d102      	bne.n	800166a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_PCD_EP_Open+0x94>
 8001674:	2302      	movs	r3, #2
 8001676:	e00e      	b.n	8001696 <HAL_PCD_EP_Open+0xb2>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 f9ee 	bl	8004a68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001694:	7afb      	ldrb	r3, [r7, #11]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da0e      	bge.n	80016d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2201      	movs	r2, #1
 80016cc:	705a      	strb	r2, [r3, #1]
 80016ce:	e00e      	b.n	80016ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	f003 0207 	and.w	r2, r3, #7
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_PCD_EP_Close+0x6a>
 8001704:	2302      	movs	r3, #2
 8001706:	e00e      	b.n	8001726 <HAL_PCD_EP_Close+0x88>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68f9      	ldr	r1, [r7, #12]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fd6a 	bl	80051f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	460b      	mov	r3, r1
 800173c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800173e:	7afb      	ldrb	r3, [r7, #11]
 8001740:	f003 0207 	and.w	r2, r3, #7
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2200      	movs	r2, #0
 800176c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	b2da      	uxtb	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6979      	ldr	r1, [r7, #20]
 8001780:	4618      	mov	r0, r3
 8001782:	f003 ff22 	bl	80055ca <USB_EPStartXfer>

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	f003 0207 	and.w	r2, r3, #7
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	460b      	mov	r3, r1
 80017ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2201      	movs	r2, #1
 800180a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	b2da      	uxtb	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6979      	ldr	r1, [r7, #20]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fed3 	bl	80055ca <USB_EPStartXfer>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	f003 0207 	and.w	r2, r3, #7
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	d901      	bls.n	800184c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e04c      	b.n	80018e6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800184c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da0e      	bge.n	8001872 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	705a      	strb	r2, [r3, #1]
 8001870:	e00c      	b.n	800188c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	b2da      	uxtb	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_PCD_EP_SetStall+0x7e>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e01c      	b.n	80018e6 <HAL_PCD_EP_SetStall+0xb8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68f9      	ldr	r1, [r7, #12]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 fa36 	bl	8006d2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f005 fb77 	bl	8006fca <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	f003 020f 	and.w	r2, r3, #15
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	d901      	bls.n	800190c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e040      	b.n	800198e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800190c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da0e      	bge.n	8001932 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	705a      	strb	r2, [r3, #1]
 8001930:	e00e      	b.n	8001950 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 0207 	and.w	r2, r3, #7
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_PCD_EP_ClrStall+0x82>
 800196c:	2302      	movs	r3, #2
 800196e:	e00e      	b.n	800198e <HAL_PCD_EP_ClrStall+0xa0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	4618      	mov	r0, r3
 8001980:	f005 fa25 	bl	8006dce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b096      	sub	sp, #88	; 0x58
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800199e:	e3b1      	b.n	8002104 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80019ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 8173 	bne.w	8001caa <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d150      	bne.n	8001a72 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e0:	81fb      	strh	r3, [r7, #14]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3328      	adds	r3, #40	; 0x28
 80019f8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	441a      	add	r2, r3
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f007 fcdf 	bl	80093f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 835f 	beq.w	8002104 <PCD_EP_ISR_Handler+0x76e>
 8001a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 835a 	bne.w	8002104 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b292      	uxth	r2, r2
 8001a64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a70:	e348      	b.n	8002104 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a78:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d032      	beq.n	8001af6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f005 facb 	bl	8007066 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001adc:	4013      	ands	r3, r2
 8001ade:	823b      	strh	r3, [r7, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	8a3a      	ldrh	r2, [r7, #16]
 8001ae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aea:	b292      	uxth	r2, r2
 8001aec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f007 fc54 	bl	800939c <HAL_PCD_SetupStageCallback>
 8001af4:	e306      	b.n	8002104 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001af6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f280 8302 	bge.w	8002104 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	83fb      	strh	r3, [r7, #30]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	8bfa      	ldrh	r2, [r7, #30]
 8001b16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b44:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d019      	beq.n	8001b82 <PCD_EP_ISR_Handler+0x1ec>
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d015      	beq.n	8001b82 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5c:	6959      	ldr	r1, [r3, #20]
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b60:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b64:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	f005 fa7d 	bl	8007066 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	441a      	add	r2, r3
 8001b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b78:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f007 fc1f 	bl	80093c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 82b5 	bne.w	8002104 <PCD_EP_ISR_Handler+0x76e>
 8001b9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001ba2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ba6:	f000 82ad 	beq.w	8002104 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b3e      	cmp	r3, #62	; 0x3e
 8001be0:	d91d      	bls.n	8001c1e <PCD_EP_ISR_Handler+0x288>
 8001be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	647b      	str	r3, [r7, #68]	; 0x44
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <PCD_EP_ISR_Handler+0x266>
 8001bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	029b      	lsls	r3, r3, #10
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	e026      	b.n	8001c6c <PCD_EP_ISR_Handler+0x2d6>
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10a      	bne.n	8001c3c <PCD_EP_ISR_Handler+0x2a6>
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	e017      	b.n	8001c6c <PCD_EP_ISR_Handler+0x2d6>
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	647b      	str	r3, [r7, #68]	; 0x44
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <PCD_EP_ISR_Handler+0x2c0>
 8001c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c52:	3301      	adds	r3, #1
 8001c54:	647b      	str	r3, [r7, #68]	; 0x44
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7c:	827b      	strh	r3, [r7, #18]
 8001c7e:	8a7b      	ldrh	r3, [r7, #18]
 8001c80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c84:	827b      	strh	r3, [r7, #18]
 8001c86:	8a7b      	ldrh	r3, [r7, #18]
 8001c88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c8c:	827b      	strh	r3, [r7, #18]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	8a7b      	ldrh	r3, [r7, #18]
 8001c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	8013      	strh	r3, [r2, #0]
 8001ca8:	e22c      	b.n	8002104 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cbe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f280 80f6 	bge.w	8001eb4 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cde:	4013      	ands	r3, r2
 8001ce0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cfe:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d16:	7b1b      	ldrb	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d123      	bne.n	8001d64 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d40:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001d44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 808e 	beq.w	8001e6a <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d54:	6959      	ldr	r1, [r3, #20]
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	88da      	ldrh	r2, [r3, #6]
 8001d5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d5e:	f005 f982 	bl	8007066 <USB_ReadPMA>
 8001d62:	e082      	b.n	8001e6a <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	78db      	ldrb	r3, [r3, #3]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d10a      	bne.n	8001d82 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d70:	461a      	mov	r2, r3
 8001d72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f9d3 	bl	8002120 <HAL_PCD_EP_DB_Receive>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001d80:	e073      	b.n	8001e6a <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	441a      	add	r2, r3
 8001dae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d022      	beq.n	8001e26 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e04:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d02c      	beq.n	8001e6a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	6959      	ldr	r1, [r3, #20]
 8001e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1a:	891a      	ldrh	r2, [r3, #8]
 8001e1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e20:	f005 f921 	bl	8007066 <USB_ReadPMA>
 8001e24:	e021      	b.n	8001e6a <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	6959      	ldr	r1, [r3, #20]
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e60:	895a      	ldrh	r2, [r3, #10]
 8001e62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e66:	f005 f8fe 	bl	8007066 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e72:	441a      	add	r2, r3
 8001e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e80:	441a      	add	r2, r3
 8001e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e84:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <PCD_EP_ISR_Handler+0x504>
 8001e8e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d206      	bcs.n	8001ea8 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f007 fa8d 	bl	80093c0 <HAL_PCD_DataOutStageCallback>
 8001ea6:	e005      	b.n	8001eb4 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fb8b 	bl	80055ca <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 8121 	beq.w	8002104 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ec2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	441a      	add	r2, r3
 8001f02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f14:	78db      	ldrb	r3, [r3, #3]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	f040 80a2 	bne.w	8002060 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f24:	7b1b      	ldrb	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8093 	beq.w	8002052 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d046      	beq.n	8001fc6 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d126      	bne.n	8001f8e <PCD_EP_ISR_Handler+0x5f8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	4413      	add	r3, r2
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	00da      	lsls	r2, r3, #3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	4413      	add	r3, r2
 8001f62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	e061      	b.n	8002052 <PCD_EP_ISR_Handler+0x6bc>
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d15d      	bne.n	8002052 <PCD_EP_ISR_Handler+0x6bc>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001faa:	4413      	add	r3, r2
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	00da      	lsls	r2, r3, #3
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	e045      	b.n	8002052 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d126      	bne.n	8002022 <PCD_EP_ISR_Handler+0x68c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	4413      	add	r3, r2
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	00da      	lsls	r2, r3, #3
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002006:	b29a      	uxth	r2, r3
 8002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201a:	b29a      	uxth	r2, r3
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	801a      	strh	r2, [r3, #0]
 8002020:	e017      	b.n	8002052 <PCD_EP_ISR_Handler+0x6bc>
 8002022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d113      	bne.n	8002052 <PCD_EP_ISR_Handler+0x6bc>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002038:	4413      	add	r3, r2
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00da      	lsls	r2, r3, #3
 8002042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002044:	4413      	add	r3, r2
 8002046:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f007 f9cc 	bl	80093f6 <HAL_PCD_DataInStageCallback>
 800205e:	e051      	b.n	8002104 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002060:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d144      	bne.n	80020f6 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	4413      	add	r3, r2
 8002086:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002090:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800209c:	429a      	cmp	r2, r3
 800209e:	d907      	bls.n	80020b0 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80020a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020a8:	1ad2      	subs	r2, r2, r3
 80020aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ac:	619a      	str	r2, [r3, #24]
 80020ae:	e002      	b.n	80020b6 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80020b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f007 f996 	bl	80093f6 <HAL_PCD_DataInStageCallback>
 80020ca:	e01b      	b.n	8002104 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80020cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020d4:	441a      	add	r2, r3
 80020d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80020da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020e2:	441a      	add	r2, r3
 80020e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fa6b 	bl	80055ca <USB_EPStartXfer>
 80020f4:	e006      	b.n	8002104 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020fa:	461a      	mov	r2, r3
 80020fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f917 	bl	8002332 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800210c:	b29b      	uxth	r3, r3
 800210e:	b21b      	sxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	f6ff ac45 	blt.w	80019a0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3758      	adds	r7, #88	; 0x58
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	4613      	mov	r3, r2
 800212c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d07c      	beq.n	8002232 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002140:	b29b      	uxth	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	4413      	add	r3, r2
 8002152:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	8b7b      	ldrh	r3, [r7, #26]
 8002164:	429a      	cmp	r2, r3
 8002166:	d306      	bcc.n	8002176 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	8b7b      	ldrh	r3, [r7, #26]
 800216e:	1ad2      	subs	r2, r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	619a      	str	r2, [r3, #24]
 8002174:	e002      	b.n	800217c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d123      	bne.n	80021cc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	833b      	strh	r3, [r7, #24]
 80021a0:	8b3b      	ldrh	r3, [r7, #24]
 80021a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021a6:	833b      	strh	r3, [r7, #24]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	441a      	add	r2, r3
 80021b6:	8b3b      	ldrh	r3, [r7, #24]
 80021b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01f      	beq.n	8002216 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f0:	82fb      	strh	r3, [r7, #22]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	441a      	add	r2, r3
 8002200:	8afb      	ldrh	r3, [r7, #22]
 8002202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800220a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002212:	b29b      	uxth	r3, r3
 8002214:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002216:	8b7b      	ldrh	r3, [r7, #26]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8085 	beq.w	8002328 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6959      	ldr	r1, [r3, #20]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	891a      	ldrh	r2, [r3, #8]
 800222a:	8b7b      	ldrh	r3, [r7, #26]
 800222c:	f004 ff1b 	bl	8007066 <USB_ReadPMA>
 8002230:	e07a      	b.n	8002328 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	4413      	add	r3, r2
 800224c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002256:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	8b7b      	ldrh	r3, [r7, #26]
 800225e:	429a      	cmp	r2, r3
 8002260:	d306      	bcc.n	8002270 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	8b7b      	ldrh	r3, [r7, #26]
 8002268:	1ad2      	subs	r2, r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	619a      	str	r2, [r3, #24]
 800226e:	e002      	b.n	8002276 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d123      	bne.n	80022c6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002298:	83fb      	strh	r3, [r7, #30]
 800229a:	8bfb      	ldrh	r3, [r7, #30]
 800229c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022a0:	83fb      	strh	r3, [r7, #30]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	441a      	add	r2, r3
 80022b0:	8bfb      	ldrh	r3, [r7, #30]
 80022b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d11f      	bne.n	8002310 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	83bb      	strh	r3, [r7, #28]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	8bbb      	ldrh	r3, [r7, #28]
 80022fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800230c:	b29b      	uxth	r3, r3
 800230e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002310:	8b7b      	ldrh	r3, [r7, #26]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	6959      	ldr	r1, [r3, #20]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	895a      	ldrh	r2, [r3, #10]
 8002322:	8b7b      	ldrh	r3, [r7, #26]
 8002324:	f004 fe9f 	bl	8007066 <USB_ReadPMA>
    }
  }

  return count;
 8002328:	8b7b      	ldrh	r3, [r7, #26]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b0a4      	sub	sp, #144	; 0x90
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	4613      	mov	r3, r2
 800233e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 81db 	beq.w	8002702 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002354:	b29b      	uxth	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	4413      	add	r3, r2
 8002366:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002370:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800237c:	429a      	cmp	r2, r3
 800237e:	d907      	bls.n	8002390 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002388:	1ad2      	subs	r2, r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	619a      	str	r2, [r3, #24]
 800238e:	e002      	b.n	8002396 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 80b9 	bne.w	8002512 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	785b      	ldrb	r3, [r3, #1]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d126      	bne.n	80023f6 <HAL_PCD_EP_DB_Transmit+0xc4>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	4413      	add	r3, r2
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	00da      	lsls	r2, r3, #3
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	4413      	add	r3, r2
 80023ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023da:	b29a      	uxth	r2, r3
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	801a      	strh	r2, [r3, #0]
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	e01a      	b.n	800242c <HAL_PCD_EP_DB_Transmit+0xfa>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d116      	bne.n	800242c <HAL_PCD_EP_DB_Transmit+0xfa>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	4413      	add	r3, r2
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00da      	lsls	r2, r3, #3
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	4413      	add	r3, r2
 8002420:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	2200      	movs	r2, #0
 800242a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d126      	bne.n	8002488 <HAL_PCD_EP_DB_Transmit+0x156>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002448:	b29b      	uxth	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	00da      	lsls	r2, r3, #3
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246c:	b29a      	uxth	r2, r3
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002480:	b29a      	uxth	r2, r3
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	801a      	strh	r2, [r3, #0]
 8002486:	e017      	b.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x186>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d113      	bne.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x186>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	4413      	add	r3, r2
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	00da      	lsls	r2, r3, #3
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	4413      	add	r3, r2
 80024ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	2200      	movs	r2, #0
 80024b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f006 ff99 	bl	80093f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 82fa 	beq.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ea:	82fb      	strh	r3, [r7, #22]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	8afb      	ldrh	r3, [r7, #22]
 80024fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250c:	b29b      	uxth	r3, r3
 800250e:	8013      	strh	r3, [r2, #0]
 8002510:	e2d8      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d021      	beq.n	8002560 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002536:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	441a      	add	r2, r3
 8002548:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800254c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255c:	b29b      	uxth	r3, r3
 800255e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002566:	2b01      	cmp	r3, #1
 8002568:	f040 82ac 	bne.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002574:	441a      	add	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002582:	441a      	add	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d30b      	bcc.n	80025ac <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6a1a      	ldr	r2, [r3, #32]
 80025a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a4:	1ad2      	subs	r2, r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	621a      	str	r2, [r3, #32]
 80025aa:	e017      	b.n	80025dc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d108      	bne.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80025b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025c4:	e00a      	b.n	80025dc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d165      	bne.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x37e>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f8:	4413      	add	r3, r2
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	00da      	lsls	r2, r3, #3
 8002602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002604:	4413      	add	r3, r2
 8002606:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002616:	b29a      	uxth	r2, r3
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261a:	801a      	strh	r2, [r3, #0]
 800261c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002620:	2b3e      	cmp	r3, #62	; 0x3e
 8002622:	d91d      	bls.n	8002660 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	64bb      	str	r3, [r7, #72]	; 0x48
 800262c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <HAL_PCD_EP_DB_Transmit+0x30c>
 8002638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263a:	3b01      	subs	r3, #1
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29a      	uxth	r2, r3
 8002644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002646:	b29b      	uxth	r3, r3
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	b29b      	uxth	r3, r3
 800264c:	4313      	orrs	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002658:	b29a      	uxth	r2, r3
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	e044      	b.n	80026ea <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_PCD_EP_DB_Transmit+0x34c>
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002676:	b29a      	uxth	r2, r3
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	e035      	b.n	80026ea <HAL_PCD_EP_DB_Transmit+0x3b8>
 800267e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	64bb      	str	r3, [r7, #72]	; 0x48
 8002686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_PCD_EP_DB_Transmit+0x366>
 8002692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002694:	3301      	adds	r3, #1
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29a      	uxth	r2, r3
 800269e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	029b      	lsls	r3, r3, #10
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	801a      	strh	r2, [r3, #0]
 80026ae:	e01c      	b.n	80026ea <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d118      	bne.n	80026ea <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026cc:	4413      	add	r3, r2
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00da      	lsls	r2, r3, #3
 80026d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d8:	4413      	add	r3, r2
 80026da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
 80026e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6959      	ldr	r1, [r3, #20]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	891a      	ldrh	r2, [r3, #8]
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f004 fc71 	bl	8006fe2 <USB_WritePMA>
 8002700:	e1e0      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	4413      	add	r3, r2
 800271c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002726:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002732:	429a      	cmp	r2, r3
 8002734:	d307      	bcc.n	8002746 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800273e:	1ad2      	subs	r2, r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	619a      	str	r2, [r3, #24]
 8002744:	e002      	b.n	800274c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 80c0 	bne.w	80028d6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	785b      	ldrb	r3, [r3, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d126      	bne.n	80027ac <HAL_PCD_EP_DB_Transmit+0x47a>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002772:	4413      	add	r3, r2
 8002774:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	00da      	lsls	r2, r3, #3
 800277c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800277e:	4413      	add	r3, r2
 8002780:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002784:	67bb      	str	r3, [r7, #120]	; 0x78
 8002786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002790:	b29a      	uxth	r2, r3
 8002792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	e01a      	b.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d116      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	667b      	str	r3, [r7, #100]	; 0x64
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c8:	4413      	add	r3, r2
 80027ca:	667b      	str	r3, [r7, #100]	; 0x64
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	00da      	lsls	r2, r3, #3
 80027d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d4:	4413      	add	r3, r2
 80027d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027da:	663b      	str	r3, [r7, #96]	; 0x60
 80027dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027de:	2200      	movs	r2, #0
 80027e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	677b      	str	r3, [r7, #116]	; 0x74
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d12b      	bne.n	8002848 <HAL_PCD_EP_DB_Transmit+0x516>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002804:	4413      	add	r3, r2
 8002806:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	00da      	lsls	r2, r3, #3
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	4413      	add	r3, r2
 8002812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800281a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002826:	b29a      	uxth	r2, r3
 8002828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800282c:	801a      	strh	r2, [r3, #0]
 800282e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283e:	b29a      	uxth	r2, r3
 8002840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	e017      	b.n	8002878 <HAL_PCD_EP_DB_Transmit+0x546>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	785b      	ldrb	r3, [r3, #1]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d113      	bne.n	8002878 <HAL_PCD_EP_DB_Transmit+0x546>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285e:	4413      	add	r3, r2
 8002860:	677b      	str	r3, [r7, #116]	; 0x74
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	00da      	lsls	r2, r3, #3
 8002868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286a:	4413      	add	r3, r2
 800286c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002870:	673b      	str	r3, [r7, #112]	; 0x70
 8002872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002874:	2200      	movs	r2, #0
 8002876:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	4619      	mov	r1, r3
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f006 fdb9 	bl	80093f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 811a 	bne.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	441a      	add	r2, r3
 80028bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80028c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	8013      	strh	r3, [r2, #0]
 80028d4:	e0f6      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d121      	bne.n	8002924 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	441a      	add	r2, r3
 800290c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	b29b      	uxth	r3, r3
 8002922:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800292a:	2b01      	cmp	r3, #1
 800292c:	f040 80ca 	bne.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002938:	441a      	add	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002946:	441a      	add	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d30b      	bcc.n	8002970 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002968:	1ad2      	subs	r2, r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	621a      	str	r2, [r3, #32]
 800296e:	e017      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002978:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800297c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002988:	e00a      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2200      	movs	r2, #0
 8002996:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	657b      	str	r3, [r7, #84]	; 0x54
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d165      	bne.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x748>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c2:	4413      	add	r3, r2
 80029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	00da      	lsls	r2, r3, #3
 80029cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ce:	4413      	add	r3, r2
 80029d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80029d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ea:	2b3e      	cmp	r3, #62	; 0x3e
 80029ec:	d91d      	bls.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x6f8>
 80029ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80029f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002a02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a04:	3b01      	subs	r3, #1
 8002a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	029b      	lsls	r3, r3, #10
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4313      	orrs	r3, r2
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a26:	801a      	strh	r2, [r3, #0]
 8002a28:	e041      	b.n	8002aae <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_PCD_EP_DB_Transmit+0x716>
 8002a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	e032      	b.n	8002aae <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x730>
 8002a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5e:	3301      	adds	r3, #1
 8002a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	e019      	b.n	8002aae <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d115      	bne.n	8002aae <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	4413      	add	r3, r2
 8002a92:	657b      	str	r3, [r7, #84]	; 0x54
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	00da      	lsls	r2, r3, #3
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8002aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6959      	ldr	r1, [r3, #20]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	895a      	ldrh	r2, [r3, #10]
 8002aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f004 fa8f 	bl	8006fe2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ade:	82bb      	strh	r3, [r7, #20]
 8002ae0:	8abb      	ldrh	r3, [r7, #20]
 8002ae2:	f083 0310 	eor.w	r3, r3, #16
 8002ae6:	82bb      	strh	r3, [r7, #20]
 8002ae8:	8abb      	ldrh	r3, [r7, #20]
 8002aea:	f083 0320 	eor.w	r3, r3, #32
 8002aee:	82bb      	strh	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	8abb      	ldrh	r3, [r7, #20]
 8002b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3790      	adds	r7, #144	; 0x90
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b087      	sub	sp, #28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	817b      	strh	r3, [r7, #10]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	897b      	ldrh	r3, [r7, #10]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e009      	b.n	8002b68 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b54:	897a      	ldrh	r2, [r7, #10]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	80da      	strh	r2, [r3, #6]
 8002b7c:	e00b      	b.n	8002b96 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2201      	movs	r2, #1
 8002b82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40007000 	.word	0x40007000

08002c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c22:	d130      	bne.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c30:	d038      	beq.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c3a:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2232      	movs	r2, #50	; 0x32
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	4a1b      	ldr	r2, [pc, #108]	; (8002cbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0c9b      	lsrs	r3, r3, #18
 8002c54:	3301      	adds	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c58:	e002      	b.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d102      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f2      	bne.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c80:	d110      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e00f      	b.n	8002ca6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d007      	beq.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c9c:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	431bde83 	.word	0x431bde83

08002cc0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cce:	6053      	str	r3, [r2, #4]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f000 bc02 	b.w	80034f8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf4:	4b96      	ldr	r3, [pc, #600]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cfe:	4b94      	ldr	r3, [pc, #592]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80e4 	beq.w	8002ede <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_RCC_OscConfig+0x4c>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	f040 808b 	bne.w	8002e3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	f040 8087 	bne.w	8002e3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d2c:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_OscConfig+0x64>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e3d9      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_RCC_OscConfig+0x7e>
 8002d54:	4b7e      	ldr	r3, [pc, #504]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5c:	e005      	b.n	8002d6a <HAL_RCC_OscConfig+0x8a>
 8002d5e:	4b7c      	ldr	r3, [pc, #496]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d223      	bcs.n	8002db6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fd8c 	bl	8003890 <RCC_SetFlashLatencyFromMSIRange>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e3ba      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d82:	4b73      	ldr	r3, [pc, #460]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a72      	ldr	r2, [pc, #456]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	496d      	ldr	r1, [pc, #436]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da0:	4b6b      	ldr	r3, [pc, #428]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	4968      	ldr	r1, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
 8002db4:	e025      	b.n	8002e02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db6:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	f043 0308 	orr.w	r3, r3, #8
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4960      	ldr	r1, [pc, #384]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	495b      	ldr	r1, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fd4c 	bl	8003890 <RCC_SetFlashLatencyFromMSIRange>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e37a      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e02:	f000 fc81 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b51      	ldr	r3, [pc, #324]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	4950      	ldr	r1, [pc, #320]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002e14:	5ccb      	ldrb	r3, [r1, r3]
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1e:	4a4e      	ldr	r2, [pc, #312]	; (8002f58 <HAL_RCC_OscConfig+0x278>)
 8002e20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e22:	4b4e      	ldr	r3, [pc, #312]	; (8002f5c <HAL_RCC_OscConfig+0x27c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fe78 	bl	8000b1c <HAL_InitTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d052      	beq.n	8002edc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	e35e      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d032      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e42:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a42      	ldr	r2, [pc, #264]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e4e:	f7fd feb5 	bl	8000bbc <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e56:	f7fd feb1 	bl	8000bbc <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e347      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e74:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a35      	ldr	r2, [pc, #212]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4930      	ldr	r1, [pc, #192]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e92:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	492b      	ldr	r1, [pc, #172]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
 8002ea6:	e01a      	b.n	8002ede <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a28      	ldr	r2, [pc, #160]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb4:	f7fd fe82 	bl	8000bbc <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ebc:	f7fd fe7e 	bl	8000bbc <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e314      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1dc>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d073      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_OscConfig+0x21c>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d10e      	bne.n	8002f14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d063      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x2f0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d15f      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e2f1      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x24c>
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e025      	b.n	8002f78 <HAL_RCC_OscConfig+0x298>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f34:	d114      	bne.n	8002f60 <HAL_RCC_OscConfig+0x280>
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a02      	ldr	r2, [pc, #8]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e013      	b.n	8002f78 <HAL_RCC_OscConfig+0x298>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	08009b08 	.word	0x08009b08
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	20000004 	.word	0x20000004
 8002f60:	4ba0      	ldr	r3, [pc, #640]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a9f      	ldr	r2, [pc, #636]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b9d      	ldr	r3, [pc, #628]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a9c      	ldr	r2, [pc, #624]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fd fe1c 	bl	8000bbc <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fd fe18 	bl	8000bbc <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e2ae      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9a:	4b92      	ldr	r3, [pc, #584]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2a8>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fe08 	bl	8000bbc <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fd fe04 	bl	8000bbc <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e29a      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x2d0>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d060      	beq.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x310>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d116      	bne.n	800301e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff0:	4b7c      	ldr	r3, [pc, #496]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_OscConfig+0x328>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e277      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	4973      	ldr	r1, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301c:	e040      	b.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d023      	beq.n	800306e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003026:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6e      	ldr	r2, [pc, #440]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fd fdc3 	bl	8000bbc <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303a:	f7fd fdbf 	bl	8000bbc <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e255      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304c:	4b65      	ldr	r3, [pc, #404]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b62      	ldr	r3, [pc, #392]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	495f      	ldr	r1, [pc, #380]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	e018      	b.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b5d      	ldr	r3, [pc, #372]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5c      	ldr	r2, [pc, #368]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fd fd9f 	bl	8000bbc <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7fd fd9b 	bl	8000bbc <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e231      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003094:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d03c      	beq.n	8003126 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01c      	beq.n	80030ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ba:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fd fd7a 	bl	8000bbc <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fd fd76 	bl	8000bbc <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e20c      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ef      	beq.n	80030cc <HAL_RCC_OscConfig+0x3ec>
 80030ec:	e01b      	b.n	8003126 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ee:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f4:	4a3b      	ldr	r2, [pc, #236]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fd fd5d 	bl	8000bbc <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003106:	f7fd fd59 	bl	8000bbc <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1ef      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ef      	bne.n	8003106 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80a6 	beq.w	8003280 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10d      	bne.n	8003160 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 800314a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314e:	6593      	str	r3, [r2, #88]	; 0x58
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315c:	2301      	movs	r3, #1
 800315e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003160:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_RCC_OscConfig+0x508>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d118      	bne.n	800319e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316c:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <HAL_RCC_OscConfig+0x508>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <HAL_RCC_OscConfig+0x508>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003176:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003178:	f7fd fd20 	bl	8000bbc <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7fd fd1c 	bl	8000bbc <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1b2      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_RCC_OscConfig+0x508>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_RCC_OscConfig+0x4d8>
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b6:	e029      	b.n	800320c <HAL_RCC_OscConfig+0x52c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d115      	bne.n	80031ec <HAL_RCC_OscConfig+0x50c>
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	4a03      	ldr	r2, [pc, #12]	; (80031e4 <HAL_RCC_OscConfig+0x504>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031e0:	e014      	b.n	800320c <HAL_RCC_OscConfig+0x52c>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
 80031ec:	4b9a      	ldr	r3, [pc, #616]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	4a99      	ldr	r2, [pc, #612]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031fc:	4b96      	ldr	r3, [pc, #600]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	4a95      	ldr	r2, [pc, #596]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d016      	beq.n	8003242 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fd fcd2 	bl	8000bbc <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321a:	e00a      	b.n	8003232 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fd fcce 	bl	8000bbc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e162      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	4b89      	ldr	r3, [pc, #548]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ed      	beq.n	800321c <HAL_RCC_OscConfig+0x53c>
 8003240:	e015      	b.n	800326e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003242:	f7fd fcbb 	bl	8000bbc <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fcb7 	bl	8000bbc <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e14b      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003260:	4b7d      	ldr	r3, [pc, #500]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ed      	bne.n	800324a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800326e:	7ffb      	ldrb	r3, [r7, #31]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003274:	4b78      	ldr	r3, [pc, #480]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	4a77      	ldr	r2, [pc, #476]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 800327a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d03c      	beq.n	8003306 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01c      	beq.n	80032ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003294:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800329a:	4a6f      	ldr	r2, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fd fc8a 	bl	8000bbc <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ac:	f7fd fc86 	bl	8000bbc <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e11c      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032be:	4b66      	ldr	r3, [pc, #408]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80032c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ef      	beq.n	80032ac <HAL_RCC_OscConfig+0x5cc>
 80032cc:	e01b      	b.n	8003306 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80032d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032d4:	4a60      	ldr	r2, [pc, #384]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fd fc6d 	bl	8000bbc <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e6:	f7fd fc69 	bl	8000bbc <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0ff      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032f8:	4b57      	ldr	r3, [pc, #348]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80032fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ef      	bne.n	80032e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80f3 	beq.w	80034f6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	2b02      	cmp	r3, #2
 8003316:	f040 80c9 	bne.w	80034ac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800331a:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0203 	and.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	429a      	cmp	r2, r3
 800332c:	d12c      	bne.n	8003388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	3b01      	subs	r3, #1
 800333a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d123      	bne.n	8003388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d11b      	bne.n	8003388 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d113      	bne.n	8003388 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	3b01      	subs	r3, #1
 800336e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d109      	bne.n	8003388 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d06b      	beq.n	8003460 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d062      	beq.n	8003454 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800338e:	4b32      	ldr	r3, [pc, #200]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0ac      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800339e:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80033a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033aa:	f7fd fc07 	bl	8000bbc <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b2:	f7fd fc03 	bl	8000bbc <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e099      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f0      	bne.n	80033b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCC_OscConfig+0x77c>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ea:	0212      	lsls	r2, r2, #8
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	3a01      	subs	r2, #1
 80033f6:	0552      	lsls	r2, r2, #21
 80033f8:	4311      	orrs	r1, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033fe:	0852      	lsrs	r2, r2, #1
 8003400:	3a01      	subs	r2, #1
 8003402:	0652      	lsls	r2, r2, #25
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800340a:	06d2      	lsls	r2, r2, #27
 800340c:	430a      	orrs	r2, r1
 800340e:	4912      	ldr	r1, [pc, #72]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003410:	4313      	orrs	r3, r2
 8003412:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 800341a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800342c:	f7fd fbc6 	bl	8000bbc <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd fbc2 	bl	8000bbc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e058      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_RCC_OscConfig+0x778>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003452:	e050      	b.n	80034f6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e04f      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
 8003458:	40021000 	.word	0x40021000
 800345c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003460:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d144      	bne.n	80034f6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003478:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a20      	ldr	r2, [pc, #128]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003484:	f7fd fb9a 	bl	8000bbc <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fd fb96 	bl	8000bbc <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e02c      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x7ac>
 80034aa:	e024      	b.n	80034f6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d01f      	beq.n	80034f2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 80034b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd fb7d 	bl	8000bbc <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fd fb79 	bl	8000bbc <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e00f      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f0      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	4905      	ldr	r1, [pc, #20]	; (8003500 <HAL_RCC_OscConfig+0x820>)
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_OscConfig+0x824>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	60cb      	str	r3, [r1, #12]
 80034f0:	e001      	b.n	80034f6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	feeefffc 	.word	0xfeeefffc

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0e7      	b.n	80036ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b75      	ldr	r3, [pc, #468]	; (80036f4 <HAL_RCC_ClockConfig+0x1ec>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d910      	bls.n	800354c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b72      	ldr	r3, [pc, #456]	; (80036f4 <HAL_RCC_ClockConfig+0x1ec>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0207 	bic.w	r2, r3, #7
 8003532:	4970      	ldr	r1, [pc, #448]	; (80036f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b6e      	ldr	r3, [pc, #440]	; (80036f4 <HAL_RCC_ClockConfig+0x1ec>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0cf      	b.n	80036ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003564:	429a      	cmp	r2, r3
 8003566:	d908      	bls.n	800357a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4960      	ldr	r1, [pc, #384]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d04c      	beq.n	8003620 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358e:	4b5a      	ldr	r3, [pc, #360]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d121      	bne.n	80035de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0a6      	b.n	80036ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a6:	4b54      	ldr	r3, [pc, #336]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e09a      	b.n	80036ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035be:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e08e      	b.n	80036ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ce:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e086      	b.n	80036ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035de:	4b46      	ldr	r3, [pc, #280]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4943      	ldr	r1, [pc, #268]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f0:	f7fd fae4 	bl	8000bbc <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f6:	e00a      	b.n	800360e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f8:	f7fd fae0 	bl	8000bbc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e06e      	b.n	80036ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 020c 	and.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	429a      	cmp	r2, r3
 800361e:	d1eb      	bne.n	80035f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d010      	beq.n	800364e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003638:	429a      	cmp	r2, r3
 800363a:	d208      	bcs.n	800364e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	492b      	ldr	r1, [pc, #172]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d210      	bcs.n	800367e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_RCC_ClockConfig+0x1ec>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 0207 	bic.w	r2, r3, #7
 8003664:	4923      	ldr	r1, [pc, #140]	; (80036f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	4313      	orrs	r3, r2
 800366a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d001      	beq.n	800367e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e036      	b.n	80036ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4918      	ldr	r1, [pc, #96]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4910      	ldr	r1, [pc, #64]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036bc:	f000 f824 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	490b      	ldr	r1, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1f4>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1f8>)
 80036da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1fc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fd fa1b 	bl	8000b1c <HAL_InitTick>
 80036e6:	4603      	mov	r3, r0
 80036e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036ea:	7afb      	ldrb	r3, [r7, #11]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40022000 	.word	0x40022000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08009b08 	.word	0x08009b08
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004

08003708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003716:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003720:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x34>
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d121      	bne.n	800377a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d11e      	bne.n	800377a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d107      	bne.n	8003758 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003748:	4b31      	ldr	r3, [pc, #196]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e005      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003758:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10d      	bne.n	8003790 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d102      	bne.n	8003786 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_RCC_GetSysClockFreq+0x110>)
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	e004      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d101      	bne.n	8003790 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <HAL_RCC_GetSysClockFreq+0x114>)
 800378e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d134      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003796:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0xa6>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d003      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0xac>
 80037ac:	e005      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <HAL_RCC_GetSysClockFreq+0x110>)
 80037b0:	617b      	str	r3, [r7, #20]
      break;
 80037b2:	e005      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_RCC_GetSysClockFreq+0x114>)
 80037b6:	617b      	str	r3, [r7, #20]
      break;
 80037b8:	e002      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	617b      	str	r3, [r7, #20]
      break;
 80037be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c0:	4b13      	ldr	r3, [pc, #76]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	3301      	adds	r3, #1
 80037cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	fb03 f202 	mul.w	r2, r3, r2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	0e5b      	lsrs	r3, r3, #25
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	3301      	adds	r3, #1
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003800:	69bb      	ldr	r3, [r7, #24]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
 8003814:	08009b20 	.word	0x08009b20
 8003818:	00f42400 	.word	0x00f42400
 800381c:	007a1200 	.word	0x007a1200

08003820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCC_GetHCLKFreq+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000000 	.word	0x20000000

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800383c:	f7ff fff0 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4904      	ldr	r1, [pc, #16]	; (8003860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000
 8003860:	08009b18 	.word	0x08009b18

08003864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003868:	f7ff ffda 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0adb      	lsrs	r3, r3, #11
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4904      	ldr	r1, [pc, #16]	; (800388c <HAL_RCC_GetPCLK2Freq+0x28>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	08009b18 	.word	0x08009b18

08003890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038a8:	f7ff f9a6 	bl	8002bf8 <HAL_PWREx_GetVoltageRange>
 80038ac:	6178      	str	r0, [r7, #20]
 80038ae:	e014      	b.n	80038da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	4a24      	ldr	r2, [pc, #144]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6593      	str	r3, [r2, #88]	; 0x58
 80038bc:	4b22      	ldr	r3, [pc, #136]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038c8:	f7ff f996 	bl	8002bf8 <HAL_PWREx_GetVoltageRange>
 80038cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ce:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e0:	d10b      	bne.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b80      	cmp	r3, #128	; 0x80
 80038e6:	d919      	bls.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2ba0      	cmp	r3, #160	; 0xa0
 80038ec:	d902      	bls.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ee:	2302      	movs	r3, #2
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	e013      	b.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f4:	2301      	movs	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	e010      	b.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d902      	bls.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003900:	2303      	movs	r3, #3
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	e00a      	b.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d102      	bne.n	8003912 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800390c:	2302      	movs	r3, #2
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e004      	b.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b70      	cmp	r3, #112	; 0x70
 8003916:	d101      	bne.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003918:	2301      	movs	r3, #1
 800391a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 0207 	bic.w	r2, r3, #7
 8003924:	4909      	ldr	r1, [pc, #36]	; (800394c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	d001      	beq.n	800393e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000
 800394c:	40022000 	.word	0x40022000

08003950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003958:	2300      	movs	r3, #0
 800395a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800395c:	2300      	movs	r3, #0
 800395e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003968:	2b00      	cmp	r3, #0
 800396a:	d031      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003974:	d01a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003976:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800397a:	d814      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003984:	d10f      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4a5c      	ldr	r2, [pc, #368]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003992:	e00c      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f9ce 	bl	8003d3c <RCCEx_PLLSAI1_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	74fb      	strb	r3, [r7, #19]
      break;
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80039ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b4:	4b51      	ldr	r3, [pc, #324]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	494e      	ldr	r1, [pc, #312]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ca:	e001      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 809e 	beq.w	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039de:	2300      	movs	r3, #0
 80039e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039e2:	4b46      	ldr	r3, [pc, #280]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039f2:	2300      	movs	r3, #0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f8:	4b40      	ldr	r3, [pc, #256]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	4a3f      	ldr	r2, [pc, #252]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a02:	6593      	str	r3, [r2, #88]	; 0x58
 8003a04:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a10:	2301      	movs	r3, #1
 8003a12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a20:	f7fd f8cc 	bl	8000bbc <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a26:	e009      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a28:	f7fd f8c8 	bl	8000bbc <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d902      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	74fb      	strb	r3, [r7, #19]
        break;
 8003a3a:	e005      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a3c:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d15a      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01e      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d019      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a96:	4a19      	ldr	r2, [pc, #100]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d016      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd f888 	bl	8000bbc <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fd f884 	bl	8000bbc <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d902      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	74fb      	strb	r3, [r7, #19]
            break;
 8003ac6:	e006      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ec      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003adc:	4b07      	ldr	r3, [pc, #28]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	4904      	ldr	r1, [pc, #16]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003af2:	e009      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b08:	7c7b      	ldrb	r3, [r7, #17]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b8a      	ldr	r3, [pc, #552]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	4a89      	ldr	r2, [pc, #548]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b26:	4b84      	ldr	r3, [pc, #528]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f023 0203 	bic.w	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4980      	ldr	r1, [pc, #512]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b48:	4b7b      	ldr	r3, [pc, #492]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	f023 020c 	bic.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	4978      	ldr	r1, [pc, #480]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b6a:	4b73      	ldr	r3, [pc, #460]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	496f      	ldr	r1, [pc, #444]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b8c:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	4967      	ldr	r1, [pc, #412]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bae:	4b62      	ldr	r3, [pc, #392]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	495e      	ldr	r1, [pc, #376]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	4956      	ldr	r1, [pc, #344]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	494d      	ldr	r1, [pc, #308]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d028      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c14:	4b48      	ldr	r3, [pc, #288]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	4945      	ldr	r1, [pc, #276]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c32:	d106      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c34:	4b40      	ldr	r3, [pc, #256]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a3f      	ldr	r2, [pc, #252]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3e:	60d3      	str	r3, [r2, #12]
 8003c40:	e011      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f872 	bl	8003d3c <RCCEx_PLLSAI1_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d028      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c72:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	492d      	ldr	r1, [pc, #180]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c92:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9c:	60d3      	str	r3, [r2, #12]
 8003c9e:	e011      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f843 	bl	8003d3c <RCCEx_PLLSAI1_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01c      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	4916      	ldr	r1, [pc, #88]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f820 	bl	8003d3c <RCCEx_PLLSAI1_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d24:	4904      	ldr	r1, [pc, #16]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000

08003d3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d4a:	4b74      	ldr	r3, [pc, #464]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d018      	beq.n	8003d88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d56:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0203 	and.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d10d      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
       ||
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d6e:	4b6b      	ldr	r3, [pc, #428]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d047      	beq.n	8003e12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
 8003d86:	e044      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d018      	beq.n	8003dc2 <RCCEx_PLLSAI1_Config+0x86>
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d825      	bhi.n	8003de0 <RCCEx_PLLSAI1_Config+0xa4>
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d002      	beq.n	8003d9e <RCCEx_PLLSAI1_Config+0x62>
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d009      	beq.n	8003db0 <RCCEx_PLLSAI1_Config+0x74>
 8003d9c:	e020      	b.n	8003de0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d9e:	4b5f      	ldr	r3, [pc, #380]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11d      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dae:	e01a      	b.n	8003de6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db0:	4b5a      	ldr	r3, [pc, #360]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d116      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc0:	e013      	b.n	8003dea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc2:	4b56      	ldr	r3, [pc, #344]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dce:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dde:	e006      	b.n	8003dee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      break;
 8003de4:	e004      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10d      	bne.n	8003e12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003df6:	4b49      	ldr	r3, [pc, #292]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6819      	ldr	r1, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	4943      	ldr	r1, [pc, #268]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d17c      	bne.n	8003f12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e18:	4b40      	ldr	r3, [pc, #256]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a3f      	ldr	r2, [pc, #252]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e24:	f7fc feca 	bl	8000bbc <HAL_GetTick>
 8003e28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e2a:	e009      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e2c:	f7fc fec6 	bl	8000bbc <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d902      	bls.n	8003e40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3e:	e005      	b.n	8003e4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e40:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ef      	bne.n	8003e2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d15f      	bne.n	8003f12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d110      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e58:	4b30      	ldr	r3, [pc, #192]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6892      	ldr	r2, [r2, #8]
 8003e68:	0211      	lsls	r1, r2, #8
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68d2      	ldr	r2, [r2, #12]
 8003e6e:	06d2      	lsls	r2, r2, #27
 8003e70:	430a      	orrs	r2, r1
 8003e72:	492a      	ldr	r1, [pc, #168]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	610b      	str	r3, [r1, #16]
 8003e78:	e027      	b.n	8003eca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d112      	bne.n	8003ea6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	0211      	lsls	r1, r2, #8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6912      	ldr	r2, [r2, #16]
 8003e96:	0852      	lsrs	r2, r2, #1
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0552      	lsls	r2, r2, #21
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	491f      	ldr	r1, [pc, #124]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	610b      	str	r3, [r1, #16]
 8003ea4:	e011      	b.n	8003eca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6892      	ldr	r2, [r2, #8]
 8003eb6:	0211      	lsls	r1, r2, #8
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6952      	ldr	r2, [r2, #20]
 8003ebc:	0852      	lsrs	r2, r2, #1
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	0652      	lsls	r2, r2, #25
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	4915      	ldr	r1, [pc, #84]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fc fe71 	bl	8000bbc <HAL_GetTick>
 8003eda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003edc:	e009      	b.n	8003ef2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ede:	f7fc fe6d 	bl	8000bbc <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d902      	bls.n	8003ef2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	73fb      	strb	r3, [r7, #15]
          break;
 8003ef0:	e005      	b.n	8003efe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0ef      	beq.n	8003ede <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	4903      	ldr	r1, [pc, #12]	; (8003f1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000

08003f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e095      	b.n	800405e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d108      	bne.n	8003f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f42:	d009      	beq.n	8003f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	61da      	str	r2, [r3, #28]
 8003f4a:	e005      	b.n	8003f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fc fbbc 	bl	80006f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f98:	d902      	bls.n	8003fa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e002      	b.n	8003fa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003fae:	d007      	beq.n	8003fc0 <HAL_SPI_Init+0xa0>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fb8:	d002      	beq.n	8003fc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	ea42 0103 	orr.w	r1, r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	0c1b      	lsrs	r3, r3, #16
 800401c:	f003 0204 	and.w	r2, r3, #4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800403c:	ea42 0103 	orr.w	r1, r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e040      	b.n	80040fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fc fc5b 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2224      	movs	r2, #36	; 0x24
 8004092:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fa55 	bl	800455c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f826 	bl	8004104 <UART_SetConfig>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e01b      	b.n	80040fa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fad4 	bl	80046a0 <UART_CheckIdleState>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004108:	b08a      	sub	sp, #40	; 0x28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4313      	orrs	r3, r2
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4bb4      	ldr	r3, [pc, #720]	; (8004404 <UART_SetConfig+0x300>)
 8004134:	4013      	ands	r3, r2
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800413c:	430b      	orrs	r3, r1
 800413e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4aa9      	ldr	r2, [pc, #676]	; (8004408 <UART_SetConfig+0x304>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	4313      	orrs	r3, r2
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4aa0      	ldr	r2, [pc, #640]	; (800440c <UART_SetConfig+0x308>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d126      	bne.n	80041dc <UART_SetConfig+0xd8>
 800418e:	4ba0      	ldr	r3, [pc, #640]	; (8004410 <UART_SetConfig+0x30c>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b03      	cmp	r3, #3
 800419a:	d81b      	bhi.n	80041d4 <UART_SetConfig+0xd0>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <UART_SetConfig+0xa0>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041c5 	.word	0x080041c5
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ba:	e080      	b.n	80042be <UART_SetConfig+0x1ba>
 80041bc:	2302      	movs	r3, #2
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c2:	e07c      	b.n	80042be <UART_SetConfig+0x1ba>
 80041c4:	2304      	movs	r3, #4
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e078      	b.n	80042be <UART_SetConfig+0x1ba>
 80041cc:	2308      	movs	r3, #8
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e074      	b.n	80042be <UART_SetConfig+0x1ba>
 80041d4:	2310      	movs	r3, #16
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e070      	b.n	80042be <UART_SetConfig+0x1ba>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a8c      	ldr	r2, [pc, #560]	; (8004414 <UART_SetConfig+0x310>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d138      	bne.n	8004258 <UART_SetConfig+0x154>
 80041e6:	4b8a      	ldr	r3, [pc, #552]	; (8004410 <UART_SetConfig+0x30c>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d82d      	bhi.n	8004250 <UART_SetConfig+0x14c>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0xf8>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004231 	.word	0x08004231
 8004200:	08004251 	.word	0x08004251
 8004204:	08004251 	.word	0x08004251
 8004208:	08004251 	.word	0x08004251
 800420c:	08004241 	.word	0x08004241
 8004210:	08004251 	.word	0x08004251
 8004214:	08004251 	.word	0x08004251
 8004218:	08004251 	.word	0x08004251
 800421c:	08004239 	.word	0x08004239
 8004220:	08004251 	.word	0x08004251
 8004224:	08004251 	.word	0x08004251
 8004228:	08004251 	.word	0x08004251
 800422c:	08004249 	.word	0x08004249
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004236:	e042      	b.n	80042be <UART_SetConfig+0x1ba>
 8004238:	2302      	movs	r3, #2
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423e:	e03e      	b.n	80042be <UART_SetConfig+0x1ba>
 8004240:	2304      	movs	r3, #4
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e03a      	b.n	80042be <UART_SetConfig+0x1ba>
 8004248:	2308      	movs	r3, #8
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e036      	b.n	80042be <UART_SetConfig+0x1ba>
 8004250:	2310      	movs	r3, #16
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e032      	b.n	80042be <UART_SetConfig+0x1ba>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6a      	ldr	r2, [pc, #424]	; (8004408 <UART_SetConfig+0x304>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d12a      	bne.n	80042b8 <UART_SetConfig+0x1b4>
 8004262:	4b6b      	ldr	r3, [pc, #428]	; (8004410 <UART_SetConfig+0x30c>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800426c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004270:	d01a      	beq.n	80042a8 <UART_SetConfig+0x1a4>
 8004272:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004276:	d81b      	bhi.n	80042b0 <UART_SetConfig+0x1ac>
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427c:	d00c      	beq.n	8004298 <UART_SetConfig+0x194>
 800427e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004282:	d815      	bhi.n	80042b0 <UART_SetConfig+0x1ac>
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <UART_SetConfig+0x18c>
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d008      	beq.n	80042a0 <UART_SetConfig+0x19c>
 800428e:	e00f      	b.n	80042b0 <UART_SetConfig+0x1ac>
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e012      	b.n	80042be <UART_SetConfig+0x1ba>
 8004298:	2302      	movs	r3, #2
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e00e      	b.n	80042be <UART_SetConfig+0x1ba>
 80042a0:	2304      	movs	r3, #4
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e00a      	b.n	80042be <UART_SetConfig+0x1ba>
 80042a8:	2308      	movs	r3, #8
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e006      	b.n	80042be <UART_SetConfig+0x1ba>
 80042b0:	2310      	movs	r3, #16
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e002      	b.n	80042be <UART_SetConfig+0x1ba>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a51      	ldr	r2, [pc, #324]	; (8004408 <UART_SetConfig+0x304>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d17a      	bne.n	80043be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d824      	bhi.n	800431a <UART_SetConfig+0x216>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <UART_SetConfig+0x1d4>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	0800431b 	.word	0x0800431b
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800431b 	.word	0x0800431b
 80042e8:	0800430b 	.word	0x0800430b
 80042ec:	0800431b 	.word	0x0800431b
 80042f0:	0800431b 	.word	0x0800431b
 80042f4:	0800431b 	.word	0x0800431b
 80042f8:	08004313 	.word	0x08004313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042fc:	f7ff fa9c 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8004300:	61f8      	str	r0, [r7, #28]
        break;
 8004302:	e010      	b.n	8004326 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004304:	4b44      	ldr	r3, [pc, #272]	; (8004418 <UART_SetConfig+0x314>)
 8004306:	61fb      	str	r3, [r7, #28]
        break;
 8004308:	e00d      	b.n	8004326 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430a:	f7ff f9fd 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 800430e:	61f8      	str	r0, [r7, #28]
        break;
 8004310:	e009      	b.n	8004326 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004316:	61fb      	str	r3, [r7, #28]
        break;
 8004318:	e005      	b.n	8004326 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8107 	beq.w	800453c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	429a      	cmp	r2, r3
 800433c:	d305      	bcc.n	800434a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	429a      	cmp	r2, r3
 8004348:	d903      	bls.n	8004352 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004350:	e0f4      	b.n	800453c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2200      	movs	r2, #0
 8004356:	461c      	mov	r4, r3
 8004358:	4615      	mov	r5, r2
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	022b      	lsls	r3, r5, #8
 8004364:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004368:	0222      	lsls	r2, r4, #8
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	6849      	ldr	r1, [r1, #4]
 800436e:	0849      	lsrs	r1, r1, #1
 8004370:	2000      	movs	r0, #0
 8004372:	4688      	mov	r8, r1
 8004374:	4681      	mov	r9, r0
 8004376:	eb12 0a08 	adds.w	sl, r2, r8
 800437a:	eb43 0b09 	adc.w	fp, r3, r9
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800438c:	4650      	mov	r0, sl
 800438e:	4659      	mov	r1, fp
 8004390:	f7fb ff1c 	bl	80001cc <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4613      	mov	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a2:	d308      	bcc.n	80043b6 <UART_SetConfig+0x2b2>
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043aa:	d204      	bcs.n	80043b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	e0c2      	b.n	800453c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043bc:	e0be      	b.n	800453c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c6:	d16a      	bne.n	800449e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80043c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d834      	bhi.n	800443a <UART_SetConfig+0x336>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x2d4>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	08004425 	.word	0x08004425
 80043e4:	0800443b 	.word	0x0800443b
 80043e8:	0800442b 	.word	0x0800442b
 80043ec:	0800443b 	.word	0x0800443b
 80043f0:	0800443b 	.word	0x0800443b
 80043f4:	0800443b 	.word	0x0800443b
 80043f8:	08004433 	.word	0x08004433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7ff fa1c 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 8004400:	61f8      	str	r0, [r7, #28]
        break;
 8004402:	e020      	b.n	8004446 <UART_SetConfig+0x342>
 8004404:	efff69f3 	.word	0xefff69f3
 8004408:	40008000 	.word	0x40008000
 800440c:	40013800 	.word	0x40013800
 8004410:	40021000 	.word	0x40021000
 8004414:	40004400 	.word	0x40004400
 8004418:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800441c:	f7ff fa22 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 8004420:	61f8      	str	r0, [r7, #28]
        break;
 8004422:	e010      	b.n	8004446 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004424:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <UART_SetConfig+0x454>)
 8004426:	61fb      	str	r3, [r7, #28]
        break;
 8004428:	e00d      	b.n	8004446 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800442a:	f7ff f96d 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 800442e:	61f8      	str	r0, [r7, #28]
        break;
 8004430:	e009      	b.n	8004446 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004436:	61fb      	str	r3, [r7, #28]
        break;
 8004438:	e005      	b.n	8004446 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d077      	beq.n	800453c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	005a      	lsls	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	441a      	add	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d916      	bls.n	8004496 <UART_SetConfig+0x392>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d212      	bcs.n	8004496 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f023 030f 	bic.w	r3, r3, #15
 8004478:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	b29b      	uxth	r3, r3
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	b29a      	uxth	r2, r3
 8004486:	8afb      	ldrh	r3, [r7, #22]
 8004488:	4313      	orrs	r3, r2
 800448a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	8afa      	ldrh	r2, [r7, #22]
 8004492:	60da      	str	r2, [r3, #12]
 8004494:	e052      	b.n	800453c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800449c:	e04e      	b.n	800453c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800449e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d827      	bhi.n	80044f6 <UART_SetConfig+0x3f2>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x3a8>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7ff f9b2 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61f8      	str	r0, [r7, #28]
        break;
 80044d6:	e014      	b.n	8004502 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7ff f9c4 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 80044dc:	61f8      	str	r0, [r7, #28]
        break;
 80044de:	e010      	b.n	8004502 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <UART_SetConfig+0x454>)
 80044e2:	61fb      	str	r3, [r7, #28]
        break;
 80044e4:	e00d      	b.n	8004502 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7ff f90f 	bl	8003708 <HAL_RCC_GetSysClockFreq>
 80044ea:	61f8      	str	r0, [r7, #28]
        break;
 80044ec:	e009      	b.n	8004502 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61fb      	str	r3, [r7, #28]
        break;
 80044f4:	e005      	b.n	8004502 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004500:	bf00      	nop
    }

    if (pclk != 0U)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d019      	beq.n	800453c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	085a      	lsrs	r2, r3, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d909      	bls.n	8004536 <UART_SetConfig+0x432>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d205      	bcs.n	8004536 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	e002      	b.n	800453c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004548:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800454c:	4618      	mov	r0, r3
 800454e:	3728      	adds	r7, #40	; 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	00f42400 	.word	0x00f42400

0800455c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01a      	beq.n	8004672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465a:	d10a      	bne.n	8004672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	605a      	str	r2, [r3, #4]
  }
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b098      	sub	sp, #96	; 0x60
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b0:	f7fc fa84 	bl	8000bbc <HAL_GetTick>
 80046b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d12e      	bne.n	8004722 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046cc:	2200      	movs	r2, #0
 80046ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f88c 	bl	80047f0 <UART_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d021      	beq.n	8004722 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f2:	653b      	str	r3, [r7, #80]	; 0x50
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	647b      	str	r3, [r7, #68]	; 0x44
 80046fe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e6      	bne.n	80046de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e062      	b.n	80047e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d149      	bne.n	80047c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004738:	2200      	movs	r2, #0
 800473a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f856 	bl	80047f0 <UART_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d03c      	beq.n	80047c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	623b      	str	r3, [r7, #32]
   return(result);
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800475e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
 800476a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800476e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e6      	bne.n	800474a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	60fb      	str	r3, [r7, #12]
   return(result);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	64bb      	str	r3, [r7, #72]	; 0x48
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800479c:	61fa      	str	r2, [r7, #28]
 800479e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	617b      	str	r3, [r7, #20]
   return(result);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e011      	b.n	80047e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3758      	adds	r7, #88	; 0x58
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004800:	e049      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d045      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fc f9d7 	bl	8000bbc <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <UART_WaitOnFlagUntilTimeout+0x30>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e048      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d031      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b08      	cmp	r3, #8
 800483e:	d110      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2208      	movs	r2, #8
 8004846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f838 	bl	80048be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2208      	movs	r2, #8
 8004852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e029      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004870:	d111      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800487a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f81e 	bl	80048be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e00f      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d0a6      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048be:	b480      	push	{r7}
 80048c0:	b095      	sub	sp, #84	; 0x54
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	643b      	str	r3, [r7, #64]	; 0x40
 80048e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3308      	adds	r3, #8
 80048fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	61fb      	str	r3, [r7, #28]
   return(result);
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800491e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004930:	2b01      	cmp	r3, #1
 8004932:	d118      	bne.n	8004966 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	60bb      	str	r3, [r7, #8]
   return(result);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 0310 	bic.w	r3, r3, #16
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	613b      	str	r3, [r7, #16]
   return(result);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e6      	bne.n	8004934 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	669a      	str	r2, [r3, #104]	; 0x68
}
 800497a:	bf00      	nop
 800497c:	3754      	adds	r7, #84	; 0x54
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004986:	b084      	sub	sp, #16
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	f107 0014 	add.w	r0, r7, #20
 8004994:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	b004      	add	sp, #16
 80049a6:	4770      	bx	lr

080049a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049de:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4013      	ands	r3, r2
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a26:	b084      	sub	sp, #16
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	f107 0014 	add.w	r0, r7, #20
 8004a34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	b004      	add	sp, #16
 8004a66:	4770      	bx	lr

08004a68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b09d      	sub	sp, #116	; 0x74
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	78db      	ldrb	r3, [r3, #3]
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d81f      	bhi.n	8004ada <USB_ActivateEndpoint+0x72>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <USB_ActivateEndpoint+0x38>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004ae3 	.word	0x08004ae3
 8004aac:	08004abf 	.word	0x08004abf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ab0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ab8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004abc:	e012      	b.n	8004ae4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004abe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ac2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004ac6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004aca:	e00b      	b.n	8004ae4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004acc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ad4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004ad8:	e004      	b.n	8004ae4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004ae0:	e000      	b.n	8004ae4 <USB_ActivateEndpoint+0x7c>
      break;
 8004ae2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	b21b      	sxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	b21a      	sxth	r2, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b21b      	sxth	r3, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	7b1b      	ldrb	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f040 8178 	bne.w	8004e4a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8084 	beq.w	8004c6c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	4413      	add	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	00da      	lsls	r2, r3, #3
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	88db      	ldrh	r3, [r3, #6]
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	827b      	strh	r3, [r7, #18]
 8004ba6:	8a7b      	ldrh	r3, [r7, #18]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <USB_ActivateEndpoint+0x180>
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	823b      	strh	r3, [r7, #16]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	8a3b      	ldrh	r3, [r7, #16]
 8004bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	78db      	ldrb	r3, [r3, #3]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d020      	beq.n	8004c32 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c06:	81bb      	strh	r3, [r7, #12]
 8004c08:	89bb      	ldrh	r3, [r7, #12]
 8004c0a:	f083 0320 	eor.w	r3, r3, #32
 8004c0e:	81bb      	strh	r3, [r7, #12]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	89bb      	ldrh	r3, [r7, #12]
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
 8004c30:	e2d5      	b.n	80051de <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c48:	81fb      	strh	r3, [r7, #14]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
 8004c6a:	e2b8      	b.n	80051de <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	4413      	add	r3, r2
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	00da      	lsls	r2, r3, #3
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	4413      	add	r3, r2
 8004c8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	88db      	ldrh	r3, [r3, #6]
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	4413      	add	r3, r2
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	00da      	lsls	r2, r3, #3
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8004cda:	d91d      	bls.n	8004d18 <USB_ActivateEndpoint+0x2b0>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <USB_ActivateEndpoint+0x28e>
 8004cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	029b      	lsls	r3, r3, #10
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	4313      	orrs	r3, r2
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	e026      	b.n	8004d66 <USB_ActivateEndpoint+0x2fe>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <USB_ActivateEndpoint+0x2ce>
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	801a      	strh	r2, [r3, #0]
 8004d34:	e017      	b.n	8004d66 <USB_ActivateEndpoint+0x2fe>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <USB_ActivateEndpoint+0x2e8>
 8004d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	029b      	lsls	r3, r3, #10
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01b      	beq.n	8004db6 <USB_ActivateEndpoint+0x34e>
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d94:	843b      	strh	r3, [r7, #32]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	8c3b      	ldrh	r3, [r7, #32]
 8004da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d124      	bne.n	8004e08 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd4:	83bb      	strh	r3, [r7, #28]
 8004dd6:	8bbb      	ldrh	r3, [r7, #28]
 8004dd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ddc:	83bb      	strh	r3, [r7, #28]
 8004dde:	8bbb      	ldrh	r3, [r7, #28]
 8004de0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004de4:	83bb      	strh	r3, [r7, #28]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	441a      	add	r2, r3
 8004df0:	8bbb      	ldrh	r3, [r7, #28]
 8004df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]
 8004e06:	e1ea      	b.n	80051de <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	83fb      	strh	r3, [r7, #30]
 8004e20:	8bfb      	ldrh	r3, [r7, #30]
 8004e22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e26:	83fb      	strh	r3, [r7, #30]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	8bfb      	ldrh	r3, [r7, #30]
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]
 8004e48:	e1c9      	b.n	80051de <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	78db      	ldrb	r3, [r3, #3]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d11e      	bne.n	8004e90 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e82:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
 8004e8e:	e01d      	b.n	8004ecc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004edc:	4413      	add	r3, r2
 8004ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	00da      	lsls	r2, r3, #3
 8004ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	891b      	ldrh	r3, [r3, #8]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	657b      	str	r3, [r7, #84]	; 0x54
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f10:	4413      	add	r3, r2
 8004f12:	657b      	str	r3, [r7, #84]	; 0x54
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	00da      	lsls	r2, r3, #3
 8004f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f22:	653b      	str	r3, [r7, #80]	; 0x50
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	895b      	ldrh	r3, [r3, #10]
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 8093 	bne.w	8005064 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01b      	beq.n	8004f92 <USB_ActivateEndpoint+0x52a>
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f70:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fa0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01b      	beq.n	8004fe2 <USB_ActivateEndpoint+0x57a>
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	441a      	add	r2, r3
 8004fcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ffa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ffc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005000:	873b      	strh	r3, [r7, #56]	; 0x38
 8005002:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005004:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005008:	873b      	strh	r3, [r7, #56]	; 0x38
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005040:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
 8005062:	e0bc      	b.n	80051de <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01d      	beq.n	80050bc <USB_ActivateEndpoint+0x654>
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01d      	beq.n	8005114 <USB_ActivateEndpoint+0x6ac>
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	78db      	ldrb	r3, [r3, #3]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d024      	beq.n	8005166 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005132:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005136:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800513a:	f083 0320 	eor.w	r3, r3, #32
 800513e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005160:	b29b      	uxth	r3, r3
 8005162:	8013      	strh	r3, [r2, #0]
 8005164:	e01d      	b.n	80051a2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	441a      	add	r2, r3
 800518a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	441a      	add	r2, r3
 80051c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80051ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051da:	b29b      	uxth	r3, r3
 80051dc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80051de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3774      	adds	r7, #116	; 0x74
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop

080051f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b08d      	sub	sp, #52	; 0x34
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	7b1b      	ldrb	r3, [r3, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f040 808e 	bne.w	8005320 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d044      	beq.n	8005296 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	81bb      	strh	r3, [r7, #12]
 800521a:	89bb      	ldrh	r3, [r7, #12]
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <USB_DeactivateEndpoint+0x6c>
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	817b      	strh	r3, [r7, #10]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005258:	b29b      	uxth	r3, r3
 800525a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005272:	813b      	strh	r3, [r7, #8]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	441a      	add	r2, r3
 800527e:	893b      	ldrh	r3, [r7, #8]
 8005280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005290:	b29b      	uxth	r3, r3
 8005292:	8013      	strh	r3, [r2, #0]
 8005294:	e192      	b.n	80055bc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	827b      	strh	r3, [r7, #18]
 80052a4:	8a7b      	ldrh	r3, [r7, #18]
 80052a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01b      	beq.n	80052e6 <USB_DeactivateEndpoint+0xf6>
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	823b      	strh	r3, [r7, #16]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	8a3b      	ldrh	r3, [r7, #16]
 80052d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fc:	81fb      	strh	r3, [r7, #14]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	441a      	add	r2, r3
 8005308:	89fb      	ldrh	r3, [r7, #14]
 800530a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531a:	b29b      	uxth	r3, r3
 800531c:	8013      	strh	r3, [r2, #0]
 800531e:	e14d      	b.n	80055bc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f040 80a5 	bne.w	8005474 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	843b      	strh	r3, [r7, #32]
 8005338:	8c3b      	ldrh	r3, [r7, #32]
 800533a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01b      	beq.n	800537a <USB_DeactivateEndpoint+0x18a>
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005358:	83fb      	strh	r3, [r7, #30]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	8bfb      	ldrh	r3, [r7, #30]
 8005366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005376:	b29b      	uxth	r3, r3
 8005378:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	83bb      	strh	r3, [r7, #28]
 8005388:	8bbb      	ldrh	r3, [r7, #28]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01b      	beq.n	80053ca <USB_DeactivateEndpoint+0x1da>
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a8:	837b      	strh	r3, [r7, #26]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	8b7b      	ldrh	r3, [r7, #26]
 80053b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e0:	833b      	strh	r3, [r7, #24]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	8b3b      	ldrh	r3, [r7, #24]
 80053ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005418:	82fb      	strh	r3, [r7, #22]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	441a      	add	r2, r3
 8005424:	8afb      	ldrh	r3, [r7, #22]
 8005426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005436:	b29b      	uxth	r3, r3
 8005438:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005450:	82bb      	strh	r3, [r7, #20]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	8abb      	ldrh	r3, [r7, #20]
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
 8005472:	e0a3      	b.n	80055bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005482:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01b      	beq.n	80054c4 <USB_DeactivateEndpoint+0x2d4>
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	441a      	add	r2, r3
 80054ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <USB_DeactivateEndpoint+0x324>
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	853b      	strh	r3, [r7, #40]	; 0x28
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	441a      	add	r2, r3
 80054fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005510:	b29b      	uxth	r3, r3
 8005512:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005548:	b29b      	uxth	r3, r3
 800554a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005562:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005580:	b29b      	uxth	r3, r3
 8005582:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	847b      	strh	r3, [r7, #34]	; 0x22
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	441a      	add	r2, r3
 80055a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3734      	adds	r7, #52	; 0x34
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b0c2      	sub	sp, #264	; 0x108
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d8:	6018      	str	r0, [r3, #0]
 80055da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 86b7 	bne.w	8006364 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	d908      	bls.n	8005624 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005622:	e007      	b.n	8005634 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	7b1b      	ldrb	r3, [r3, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d13a      	bne.n	80056ba <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6959      	ldr	r1, [r3, #20]
 8005650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	88da      	ldrh	r2, [r3, #6]
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005660:	b29b      	uxth	r3, r3
 8005662:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005666:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	f001 fcb9 	bl	8006fe2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568a:	b29b      	uxth	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4413      	add	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	00da      	lsls	r2, r3, #3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4413      	add	r3, r2
 80056a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	f000 be1f 	b.w	80062f8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80056ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	78db      	ldrb	r3, [r3, #3]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	f040 8462 	bne.w	8005f90 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	f240 83df 	bls.w	8005ea8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005710:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800573e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005742:	b29b      	uxth	r3, r3
 8005744:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 81c7 	beq.w	8005b1a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	633b      	str	r3, [r7, #48]	; 0x30
 8005798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d177      	bne.n	8005898 <USB_EPStartXfer+0x2ce>
 80057a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	4413      	add	r3, r2
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80057cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	00da      	lsls	r2, r3, #3
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	4413      	add	r3, r2
 80057de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f8:	2b3e      	cmp	r3, #62	; 0x3e
 80057fa:	d921      	bls.n	8005840 <USB_EPStartXfer+0x276>
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <USB_EPStartXfer+0x252>
 8005812:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005816:	3b01      	subs	r3, #1
 8005818:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29a      	uxth	r2, r3
 8005822:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005826:	b29b      	uxth	r3, r3
 8005828:	029b      	lsls	r3, r3, #10
 800582a:	b29b      	uxth	r3, r3
 800582c:	4313      	orrs	r3, r2
 800582e:	b29b      	uxth	r3, r3
 8005830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005838:	b29a      	uxth	r2, r3
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	e050      	b.n	80058e2 <USB_EPStartXfer+0x318>
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <USB_EPStartXfer+0x294>
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005856:	b29a      	uxth	r2, r3
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	801a      	strh	r2, [r3, #0]
 800585c:	e041      	b.n	80058e2 <USB_EPStartXfer+0x318>
 800585e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d004      	beq.n	800587e <USB_EPStartXfer+0x2b4>
 8005874:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005878:	3301      	adds	r3, #1
 800587a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29a      	uxth	r2, r3
 8005884:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005888:	b29b      	uxth	r3, r3
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	b29b      	uxth	r3, r3
 800588e:	4313      	orrs	r3, r2
 8005890:	b29a      	uxth	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	e024      	b.n	80058e2 <USB_EPStartXfer+0x318>
 8005898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d11c      	bne.n	80058e2 <USB_EPStartXfer+0x318>
 80058a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	4413      	add	r3, r2
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
 80058c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	00da      	lsls	r2, r3, #3
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	4413      	add	r3, r2
 80058d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058dc:	b29a      	uxth	r2, r3
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	895b      	ldrh	r3, [r3, #10]
 80058ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6959      	ldr	r1, [r3, #20]
 80058fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005902:	b29b      	uxth	r3, r3
 8005904:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005908:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800590c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005910:	6800      	ldr	r0, [r0, #0]
 8005912:	f001 fb66 	bl	8006fe2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005926:	441a      	add	r2, r3
 8005928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	429a      	cmp	r2, r3
 800594e:	d90f      	bls.n	8005970 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6a1a      	ldr	r2, [r3, #32]
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005960:	1ad2      	subs	r2, r2, r3
 8005962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	621a      	str	r2, [r3, #32]
 800596e:	e00e      	b.n	800598e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800598e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d177      	bne.n	8005a8e <USB_EPStartXfer+0x4c4>
 800599e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	4413      	add	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	00da      	lsls	r2, r3, #3
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	4413      	add	r3, r2
 80059d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	801a      	strh	r2, [r3, #0]
 80059ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ee:	2b3e      	cmp	r3, #62	; 0x3e
 80059f0:	d921      	bls.n	8005a36 <USB_EPStartXfer+0x46c>
 80059f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <USB_EPStartXfer+0x448>
 8005a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e056      	b.n	8005ae4 <USB_EPStartXfer+0x51a>
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <USB_EPStartXfer+0x48a>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	e047      	b.n	8005ae4 <USB_EPStartXfer+0x51a>
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <USB_EPStartXfer+0x4aa>
 8005a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	029b      	lsls	r3, r3, #10
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4313      	orrs	r3, r2
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	e02a      	b.n	8005ae4 <USB_EPStartXfer+0x51a>
 8005a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d122      	bne.n	8005ae4 <USB_EPStartXfer+0x51a>
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	4413      	add	r3, r2
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	00da      	lsls	r2, r3, #3
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	891b      	ldrh	r3, [r3, #8]
 8005af0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6959      	ldr	r1, [r3, #20]
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b12:	6800      	ldr	r0, [r0, #0]
 8005b14:	f001 fa65 	bl	8006fe2 <USB_WritePMA>
 8005b18:	e3ee      	b.n	80062f8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d177      	bne.n	8005c1a <USB_EPStartXfer+0x650>
 8005b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4a:	4413      	add	r3, r2
 8005b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	00da      	lsls	r2, r3, #3
 8005b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b64:	647b      	str	r3, [r7, #68]	; 0x44
 8005b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b7c:	d921      	bls.n	8005bc2 <USB_EPStartXfer+0x5f8>
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <USB_EPStartXfer+0x5d4>
 8005b94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e056      	b.n	8005c70 <USB_EPStartXfer+0x6a6>
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <USB_EPStartXfer+0x616>
 8005bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	e047      	b.n	8005c70 <USB_EPStartXfer+0x6a6>
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <USB_EPStartXfer+0x636>
 8005bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	029b      	lsls	r3, r3, #10
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4313      	orrs	r3, r2
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e02a      	b.n	8005c70 <USB_EPStartXfer+0x6a6>
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d122      	bne.n	8005c70 <USB_EPStartXfer+0x6a6>
 8005c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	653b      	str	r3, [r7, #80]	; 0x50
 8005c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4a:	4413      	add	r3, r2
 8005c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	00da      	lsls	r2, r3, #3
 8005c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5e:	4413      	add	r3, r2
 8005c60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	891b      	ldrh	r3, [r3, #8]
 8005c7c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6959      	ldr	r1, [r3, #20]
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c96:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c9a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	f001 f99f 	bl	8006fe2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb4:	441a      	add	r2, r3
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d90f      	bls.n	8005cfe <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6a1a      	ldr	r2, [r3, #32]
 8005cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	621a      	str	r2, [r3, #32]
 8005cfc:	e00e      	b.n	8005d1c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	643b      	str	r3, [r7, #64]	; 0x40
 8005d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d177      	bne.n	8005e28 <USB_EPStartXfer+0x85e>
 8005d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	4413      	add	r3, r2
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	00da      	lsls	r2, r3, #3
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d88:	2b3e      	cmp	r3, #62	; 0x3e
 8005d8a:	d921      	bls.n	8005dd0 <USB_EPStartXfer+0x806>
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <USB_EPStartXfer+0x7e2>
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	3b01      	subs	r3, #1
 8005da8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	029b      	lsls	r3, r3, #10
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e050      	b.n	8005e72 <USB_EPStartXfer+0x8a8>
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <USB_EPStartXfer+0x824>
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e041      	b.n	8005e72 <USB_EPStartXfer+0x8a8>
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <USB_EPStartXfer+0x844>
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	3301      	adds	r3, #1
 8005e0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	029b      	lsls	r3, r3, #10
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	e024      	b.n	8005e72 <USB_EPStartXfer+0x8a8>
 8005e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d11c      	bne.n	8005e72 <USB_EPStartXfer+0x8a8>
 8005e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4c:	4413      	add	r3, r2
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	00da      	lsls	r2, r3, #3
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	895b      	ldrh	r3, [r3, #10]
 8005e7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6959      	ldr	r1, [r3, #20]
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e98:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e9c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ea0:	6800      	ldr	r0, [r0, #0]
 8005ea2:	f001 f89e 	bl	8006fe2 <USB_WritePMA>
 8005ea6:	e227      	b.n	80062f8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ede:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f34:	4413      	add	r3, r2
 8005f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	00da      	lsls	r2, r3, #3
 8005f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	891b      	ldrh	r3, [r3, #8]
 8005f66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6959      	ldr	r1, [r3, #20]
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f88:	6800      	ldr	r0, [r0, #0]
 8005f8a:	f001 f82a 	bl	8006fe2 <USB_WritePMA>
 8005f8e:	e1b3      	b.n	80062f8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a1a      	ldr	r2, [r3, #32]
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa0:	1ad2      	subs	r2, r2, r3
 8005fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80c6 	beq.w	8006162 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	673b      	str	r3, [r7, #112]	; 0x70
 8005fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d177      	bne.n	80060e2 <USB_EPStartXfer+0xb18>
 8005ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800600c:	b29b      	uxth	r3, r3
 800600e:	461a      	mov	r2, r3
 8006010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006012:	4413      	add	r3, r2
 8006014:	66bb      	str	r3, [r7, #104]	; 0x68
 8006016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	00da      	lsls	r2, r3, #3
 8006024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006026:	4413      	add	r3, r2
 8006028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800602c:	667b      	str	r3, [r7, #100]	; 0x64
 800602e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006038:	b29a      	uxth	r2, r3
 800603a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006042:	2b3e      	cmp	r3, #62	; 0x3e
 8006044:	d921      	bls.n	800608a <USB_EPStartXfer+0xac0>
 8006046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <USB_EPStartXfer+0xa9c>
 800605c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006060:	3b01      	subs	r3, #1
 8006062:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006070:	b29b      	uxth	r3, r3
 8006072:	029b      	lsls	r3, r3, #10
 8006074:	b29b      	uxth	r3, r3
 8006076:	4313      	orrs	r3, r2
 8006078:	b29b      	uxth	r3, r3
 800607a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006082:	b29a      	uxth	r2, r3
 8006084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	e050      	b.n	800612c <USB_EPStartXfer+0xb62>
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <USB_EPStartXfer+0xade>
 8006092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e041      	b.n	800612c <USB_EPStartXfer+0xb62>
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <USB_EPStartXfer+0xafe>
 80060be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060c2:	3301      	adds	r3, #1
 80060c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	029b      	lsls	r3, r3, #10
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	4313      	orrs	r3, r2
 80060da:	b29a      	uxth	r2, r3
 80060dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	e024      	b.n	800612c <USB_EPStartXfer+0xb62>
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d11c      	bne.n	800612c <USB_EPStartXfer+0xb62>
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006100:	b29b      	uxth	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006106:	4413      	add	r3, r2
 8006108:	673b      	str	r3, [r7, #112]	; 0x70
 800610a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	00da      	lsls	r2, r3, #3
 8006118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800611a:	4413      	add	r3, r2
 800611c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006126:	b29a      	uxth	r2, r3
 8006128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	895b      	ldrh	r3, [r3, #10]
 8006138:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6959      	ldr	r1, [r3, #20]
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614c:	b29b      	uxth	r3, r3
 800614e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006152:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006156:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	f000 ff41 	bl	8006fe2 <USB_WritePMA>
 8006160:	e0ca      	b.n	80062f8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d177      	bne.n	8006262 <USB_EPStartXfer+0xc98>
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006192:	4413      	add	r3, r2
 8006194:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	00da      	lsls	r2, r3, #3
 80061a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061a6:	4413      	add	r3, r2
 80061a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c2:	2b3e      	cmp	r3, #62	; 0x3e
 80061c4:	d921      	bls.n	800620a <USB_EPStartXfer+0xc40>
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <USB_EPStartXfer+0xc1c>
 80061dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061e0:	3b01      	subs	r3, #1
 80061e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	029b      	lsls	r3, r3, #10
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006202:	b29a      	uxth	r2, r3
 8006204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	e05c      	b.n	80062c4 <USB_EPStartXfer+0xcfa>
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <USB_EPStartXfer+0xc5e>
 8006212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006220:	b29a      	uxth	r2, r3
 8006222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	e04d      	b.n	80062c4 <USB_EPStartXfer+0xcfa>
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <USB_EPStartXfer+0xc7e>
 800623e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006242:	3301      	adds	r3, #1
 8006244:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29a      	uxth	r2, r3
 800624e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006252:	b29b      	uxth	r3, r3
 8006254:	029b      	lsls	r3, r3, #10
 8006256:	b29b      	uxth	r3, r3
 8006258:	4313      	orrs	r3, r2
 800625a:	b29a      	uxth	r2, r3
 800625c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e030      	b.n	80062c4 <USB_EPStartXfer+0xcfa>
 8006262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d128      	bne.n	80062c4 <USB_EPStartXfer+0xcfa>
 8006272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628e:	b29b      	uxth	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006296:	4413      	add	r3, r2
 8006298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	00da      	lsls	r2, r3, #3
 80062aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062ae:	4413      	add	r3, r2
 80062b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	891b      	ldrh	r3, [r3, #8]
 80062d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6959      	ldr	r1, [r3, #20]
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062f2:	6800      	ldr	r0, [r0, #0]
 80062f4:	f000 fe75 	bl	8006fe2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631e:	817b      	strh	r3, [r7, #10]
 8006320:	897b      	ldrh	r3, [r7, #10]
 8006322:	f083 0310 	eor.w	r3, r3, #16
 8006326:	817b      	strh	r3, [r7, #10]
 8006328:	897b      	ldrh	r3, [r7, #10]
 800632a:	f083 0320 	eor.w	r3, r3, #32
 800632e:	817b      	strh	r3, [r7, #10]
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635c:	b29b      	uxth	r3, r3
 800635e:	8013      	strh	r3, [r2, #0]
 8006360:	f000 bcde 	b.w	8006d20 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	7b1b      	ldrb	r3, [r3, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 80bb 	bne.w	80064ec <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	d917      	bls.n	80063c2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80063a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b2:	1ad2      	subs	r2, r2, r3
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	619a      	str	r2, [r3, #24]
 80063c0:	e00e      	b.n	80063e0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2200      	movs	r2, #0
 80063de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006404:	4413      	add	r3, r2
 8006406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	00da      	lsls	r2, r3, #3
 8006418:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800641c:	4413      	add	r3, r2
 800641e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643e:	2b3e      	cmp	r3, #62	; 0x3e
 8006440:	d924      	bls.n	800648c <USB_EPStartXfer+0xec2>
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <USB_EPStartXfer+0xe98>
 8006458:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800645c:	3b01      	subs	r3, #1
 800645e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800646e:	b29b      	uxth	r3, r3
 8006470:	029b      	lsls	r3, r3, #10
 8006472:	b29b      	uxth	r3, r3
 8006474:	4313      	orrs	r3, r2
 8006476:	b29b      	uxth	r3, r3
 8006478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006480:	b29a      	uxth	r2, r3
 8006482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	f000 bc10 	b.w	8006cac <USB_EPStartXfer+0x16e2>
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10c      	bne.n	80064ae <USB_EPStartXfer+0xee4>
 8006494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	e3fe      	b.n	8006cac <USB_EPStartXfer+0x16e2>
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <USB_EPStartXfer+0xf04>
 80064c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064c8:	3301      	adds	r3, #1
 80064ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064da:	b29b      	uxth	r3, r3
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	e3df      	b.n	8006cac <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80064ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	78db      	ldrb	r3, [r3, #3]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	f040 8218 	bne.w	800692e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80064fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 809d 	bne.w	800664a <USB_EPStartXfer+0x1080>
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652c:	b29b      	uxth	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006534:	4413      	add	r3, r2
 8006536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800653a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	00da      	lsls	r2, r3, #3
 8006548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800654c:	4413      	add	r3, r2
 800654e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006562:	b29a      	uxth	r2, r3
 8006564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b3e      	cmp	r3, #62	; 0x3e
 8006578:	d92b      	bls.n	80065d2 <USB_EPStartXfer+0x1008>
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800658c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <USB_EPStartXfer+0xfe0>
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a4:	3b01      	subs	r3, #1
 80065a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4313      	orrs	r3, r2
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	e070      	b.n	80066b4 <USB_EPStartXfer+0x10ea>
 80065d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10c      	bne.n	80065fc <USB_EPStartXfer+0x1032>
 80065e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e05b      	b.n	80066b4 <USB_EPStartXfer+0x10ea>
 80065fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800660e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <USB_EPStartXfer+0x1062>
 8006622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006626:	3301      	adds	r3, #1
 8006628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800662c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29a      	uxth	r2, r3
 8006634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006638:	b29b      	uxth	r3, r3
 800663a:	029b      	lsls	r3, r3, #10
 800663c:	b29b      	uxth	r3, r3
 800663e:	4313      	orrs	r3, r2
 8006640:	b29a      	uxth	r2, r3
 8006642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e034      	b.n	80066b4 <USB_EPStartXfer+0x10ea>
 800664a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d12c      	bne.n	80066b4 <USB_EPStartXfer+0x10ea>
 800665a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006676:	b29b      	uxth	r3, r3
 8006678:	461a      	mov	r2, r3
 800667a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800667e:	4413      	add	r3, r2
 8006680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	00da      	lsls	r2, r3, #3
 8006692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006696:	4413      	add	r3, r2
 8006698:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800669c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 809d 	bne.w	800680e <USB_EPStartXfer+0x1244>
 80066d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066f8:	4413      	add	r3, r2
 80066fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	00da      	lsls	r2, r3, #3
 800670c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006710:	4413      	add	r3, r2
 8006712:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800671a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b3e      	cmp	r3, #62	; 0x3e
 800673c:	d92b      	bls.n	8006796 <USB_EPStartXfer+0x11cc>
 800673e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <USB_EPStartXfer+0x11a4>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	3b01      	subs	r3, #1
 800676a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800676e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677a:	b29b      	uxth	r3, r3
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	b29b      	uxth	r3, r3
 8006780:	4313      	orrs	r3, r2
 8006782:	b29b      	uxth	r3, r3
 8006784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678c:	b29a      	uxth	r2, r3
 800678e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e069      	b.n	800686a <USB_EPStartXfer+0x12a0>
 8006796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <USB_EPStartXfer+0x11f6>
 80067a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067bc:	801a      	strh	r2, [r3, #0]
 80067be:	e054      	b.n	800686a <USB_EPStartXfer+0x12a0>
 80067c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <USB_EPStartXfer+0x1226>
 80067e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ea:	3301      	adds	r3, #1
 80067ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	029b      	lsls	r3, r3, #10
 8006800:	b29b      	uxth	r3, r3
 8006802:	4313      	orrs	r3, r2
 8006804:	b29a      	uxth	r2, r3
 8006806:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	e02d      	b.n	800686a <USB_EPStartXfer+0x12a0>
 800680e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	785b      	ldrb	r3, [r3, #1]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d125      	bne.n	800686a <USB_EPStartXfer+0x12a0>
 800681e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800682c:	b29b      	uxth	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006834:	4413      	add	r3, r2
 8006836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800683a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	00da      	lsls	r2, r3, #3
 8006848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800684c:	4413      	add	r3, r2
 800684e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006868:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8218 	beq.w	8006cac <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800687c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800689c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <USB_EPStartXfer+0x12ea>
 80068a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10d      	bne.n	80068d0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f040 81f5 	bne.w	8006cac <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 81ee 	bne.w	8006cac <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]
 800692c:	e1be      	b.n	8006cac <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	78db      	ldrb	r3, [r3, #3]
 800693a:	2b01      	cmp	r3, #1
 800693c:	f040 81b4 	bne.w	8006ca8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699a      	ldr	r2, [r3, #24]
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	429a      	cmp	r2, r3
 800695a:	d917      	bls.n	800698c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800695c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800696c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	619a      	str	r2, [r3, #24]
 800698a:	e00e      	b.n	80069aa <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800698c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800699c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f040 8085 	bne.w	8006ac6 <USB_EPStartXfer+0x14fc>
 80069bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d8:	b29b      	uxth	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069e0:	4413      	add	r3, r2
 80069e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	00da      	lsls	r2, r3, #3
 80069f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069f8:	4413      	add	r3, r2
 80069fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a1c:	d923      	bls.n	8006a66 <USB_EPStartXfer+0x149c>
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2c:	f003 031f 	and.w	r3, r3, #31
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d104      	bne.n	8006a3e <USB_EPStartXfer+0x1474>
 8006a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	029b      	lsls	r3, r3, #10
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e060      	b.n	8006b28 <USB_EPStartXfer+0x155e>
 8006a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10c      	bne.n	8006a88 <USB_EPStartXfer+0x14be>
 8006a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	e04f      	b.n	8006b28 <USB_EPStartXfer+0x155e>
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <USB_EPStartXfer+0x14de>
 8006a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	029b      	lsls	r3, r3, #10
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	4313      	orrs	r3, r2
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	e030      	b.n	8006b28 <USB_EPStartXfer+0x155e>
 8006ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d128      	bne.n	8006b28 <USB_EPStartXfer+0x155e>
 8006ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006afa:	4413      	add	r3, r2
 8006afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00da      	lsls	r2, r3, #3
 8006b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b12:	4413      	add	r3, r2
 8006b14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 8085 	bne.w	8006c52 <USB_EPStartXfer+0x1688>
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	00da      	lsls	r2, r3, #3
 8006b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ba8:	d923      	bls.n	8006bf2 <USB_EPStartXfer+0x1628>
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <USB_EPStartXfer+0x1600>
 8006bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e05c      	b.n	8006cac <USB_EPStartXfer+0x16e2>
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10c      	bne.n	8006c14 <USB_EPStartXfer+0x164a>
 8006bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e04b      	b.n	8006cac <USB_EPStartXfer+0x16e2>
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	085b      	lsrs	r3, r3, #1
 8006c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <USB_EPStartXfer+0x166a>
 8006c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c2e:	3301      	adds	r3, #1
 8006c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	029b      	lsls	r3, r3, #10
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	e02c      	b.n	8006cac <USB_EPStartXfer+0x16e2>
 8006c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d124      	bne.n	8006cac <USB_EPStartXfer+0x16e2>
 8006c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c78:	4413      	add	r3, r2
 8006c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	00da      	lsls	r2, r3, #3
 8006c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c90:	4413      	add	r3, r2
 8006c92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	e001      	b.n	8006cac <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e03a      	b.n	8006d22 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006cd6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006cda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cde:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006ce2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ce6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d020      	beq.n	8006d80 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	81bb      	strh	r3, [r7, #12]
 8006d56:	89bb      	ldrh	r3, [r7, #12]
 8006d58:	f083 0310 	eor.w	r3, r3, #16
 8006d5c:	81bb      	strh	r3, [r7, #12]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	441a      	add	r2, r3
 8006d68:	89bb      	ldrh	r3, [r7, #12]
 8006d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]
 8006d7e:	e01f      	b.n	8006dc0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	81fb      	strh	r3, [r7, #14]
 8006d98:	89fb      	ldrh	r3, [r7, #14]
 8006d9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d9e:	81fb      	strh	r3, [r7, #14]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	441a      	add	r2, r3
 8006daa:	89fb      	ldrh	r3, [r7, #14]
 8006dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b087      	sub	sp, #28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	7b1b      	ldrb	r3, [r3, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 809d 	bne.w	8006f1c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d04c      	beq.n	8006e84 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	823b      	strh	r3, [r7, #16]
 8006df8:	8a3b      	ldrh	r3, [r7, #16]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01b      	beq.n	8006e3a <USB_EPClearStall+0x6c>
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	81fb      	strh	r3, [r7, #14]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	89fb      	ldrh	r3, [r7, #14]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	78db      	ldrb	r3, [r3, #3]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d06c      	beq.n	8006f1c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e58:	81bb      	strh	r3, [r7, #12]
 8006e5a:	89bb      	ldrh	r3, [r7, #12]
 8006e5c:	f083 0320 	eor.w	r3, r3, #32
 8006e60:	81bb      	strh	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	441a      	add	r2, r3
 8006e6c:	89bb      	ldrh	r3, [r7, #12]
 8006e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	8013      	strh	r3, [r2, #0]
 8006e82:	e04b      	b.n	8006f1c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	82fb      	strh	r3, [r7, #22]
 8006e92:	8afb      	ldrh	r3, [r7, #22]
 8006e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <USB_EPClearStall+0x106>
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb2:	82bb      	strh	r3, [r7, #20]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	8abb      	ldrh	r3, [r7, #20]
 8006ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eea:	827b      	strh	r3, [r7, #18]
 8006eec:	8a7b      	ldrh	r3, [r7, #18]
 8006eee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ef2:	827b      	strh	r3, [r7, #18]
 8006ef4:	8a7b      	ldrh	r3, [r7, #18]
 8006ef6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006efa:	827b      	strh	r3, [r7, #18]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	441a      	add	r2, r3
 8006f06:	8a7b      	ldrh	r3, [r7, #18]
 8006f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2280      	movs	r2, #128	; 0x80
 8006f40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b08b      	sub	sp, #44	; 0x2c
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	4611      	mov	r1, r2
 8006fee:	461a      	mov	r2, r3
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	80fb      	strh	r3, [r7, #6]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ff8:	88bb      	ldrh	r3, [r7, #4]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007008:	88fa      	ldrh	r2, [r7, #6]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007012:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
 8007018:	e01b      	b.n	8007052 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	b21a      	sxth	r2, r3
 800702a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800702e:	4313      	orrs	r3, r2
 8007030:	b21b      	sxth	r3, r3
 8007032:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	8a7a      	ldrh	r2, [r7, #18]
 8007038:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	3302      	adds	r3, #2
 800703e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	3301      	adds	r3, #1
 8007044:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	3301      	adds	r3, #1
 800704a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	3b01      	subs	r3, #1
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e0      	bne.n	800701a <USB_WritePMA+0x38>
  }
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	372c      	adds	r7, #44	; 0x2c
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007066:	b480      	push	{r7}
 8007068:	b08b      	sub	sp, #44	; 0x2c
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	4611      	mov	r1, r2
 8007072:	461a      	mov	r2, r3
 8007074:	460b      	mov	r3, r1
 8007076:	80fb      	strh	r3, [r7, #6]
 8007078:	4613      	mov	r3, r2
 800707a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800707c:	88bb      	ldrh	r3, [r7, #4]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800708c:	88fa      	ldrh	r2, [r7, #6]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007096:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
 800709c:	e018      	b.n	80070d0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	3302      	adds	r3, #2
 80070aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	3301      	adds	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	3301      	adds	r3, #1
 80070c8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	3b01      	subs	r3, #1
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e3      	bne.n	800709e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80070d6:	88bb      	ldrh	r3, [r7, #4]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	701a      	strb	r2, [r3, #0]
  }
}
 80070f2:	bf00      	nop
 80070f4:	372c      	adds	r7, #44	; 0x2c
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800710c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007110:	f002 fc80 	bl	8009a14 <USBD_static_malloc>
 8007114:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d109      	bne.n	8007130 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	32b0      	adds	r2, #176	; 0xb0
 8007126:	2100      	movs	r1, #0
 8007128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800712c:	2302      	movs	r3, #2
 800712e:	e0d4      	b.n	80072da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007130:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007134:	2100      	movs	r1, #0
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f002 fc8a 	bl	8009a50 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	32b0      	adds	r2, #176	; 0xb0
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	32b0      	adds	r2, #176	; 0xb0
 8007156:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7c1b      	ldrb	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d138      	bne.n	80071da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007168:	4b5e      	ldr	r3, [pc, #376]	; (80072e4 <USBD_CDC_Init+0x1e4>)
 800716a:	7819      	ldrb	r1, [r3, #0]
 800716c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007170:	2202      	movs	r2, #2
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f002 fa50 	bl	8009618 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007178:	4b5a      	ldr	r3, [pc, #360]	; (80072e4 <USBD_CDC_Init+0x1e4>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 020f 	and.w	r2, r3, #15
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	4613      	mov	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	440b      	add	r3, r1
 800718c:	3324      	adds	r3, #36	; 0x24
 800718e:	2201      	movs	r2, #1
 8007190:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007192:	4b55      	ldr	r3, [pc, #340]	; (80072e8 <USBD_CDC_Init+0x1e8>)
 8007194:	7819      	ldrb	r1, [r3, #0]
 8007196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800719a:	2202      	movs	r2, #2
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f002 fa3b 	bl	8009618 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071a2:	4b51      	ldr	r3, [pc, #324]	; (80072e8 <USBD_CDC_Init+0x1e8>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f003 020f 	and.w	r2, r3, #15
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	440b      	add	r3, r1
 80071b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071ba:	2201      	movs	r2, #1
 80071bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071be:	4b4b      	ldr	r3, [pc, #300]	; (80072ec <USBD_CDC_Init+0x1ec>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	f003 020f 	and.w	r2, r3, #15
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	3326      	adds	r3, #38	; 0x26
 80071d4:	2210      	movs	r2, #16
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e035      	b.n	8007246 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071da:	4b42      	ldr	r3, [pc, #264]	; (80072e4 <USBD_CDC_Init+0x1e4>)
 80071dc:	7819      	ldrb	r1, [r3, #0]
 80071de:	2340      	movs	r3, #64	; 0x40
 80071e0:	2202      	movs	r2, #2
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f002 fa18 	bl	8009618 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071e8:	4b3e      	ldr	r3, [pc, #248]	; (80072e4 <USBD_CDC_Init+0x1e4>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 020f 	and.w	r2, r3, #15
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	440b      	add	r3, r1
 80071fc:	3324      	adds	r3, #36	; 0x24
 80071fe:	2201      	movs	r2, #1
 8007200:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007202:	4b39      	ldr	r3, [pc, #228]	; (80072e8 <USBD_CDC_Init+0x1e8>)
 8007204:	7819      	ldrb	r1, [r3, #0]
 8007206:	2340      	movs	r3, #64	; 0x40
 8007208:	2202      	movs	r2, #2
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f002 fa04 	bl	8009618 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007210:	4b35      	ldr	r3, [pc, #212]	; (80072e8 <USBD_CDC_Init+0x1e8>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 020f 	and.w	r2, r3, #15
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007228:	2201      	movs	r2, #1
 800722a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800722c:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <USBD_CDC_Init+0x1ec>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 020f 	and.w	r2, r3, #15
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	440b      	add	r3, r1
 8007240:	3326      	adds	r3, #38	; 0x26
 8007242:	2210      	movs	r2, #16
 8007244:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007246:	4b29      	ldr	r3, [pc, #164]	; (80072ec <USBD_CDC_Init+0x1ec>)
 8007248:	7819      	ldrb	r1, [r3, #0]
 800724a:	2308      	movs	r3, #8
 800724c:	2203      	movs	r2, #3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f002 f9e2 	bl	8009618 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <USBD_CDC_Init+0x1ec>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	f003 020f 	and.w	r2, r3, #15
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	3324      	adds	r3, #36	; 0x24
 800726a:	2201      	movs	r2, #1
 800726c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	33b0      	adds	r3, #176	; 0xb0
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80072a4:	2302      	movs	r3, #2
 80072a6:	e018      	b.n	80072da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7c1b      	ldrb	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <USBD_CDC_Init+0x1e8>)
 80072b2:	7819      	ldrb	r1, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f002 fb26 	bl	8009910 <USBD_LL_PrepareReceive>
 80072c4:	e008      	b.n	80072d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <USBD_CDC_Init+0x1e8>)
 80072c8:	7819      	ldrb	r1, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072d0:	2340      	movs	r3, #64	; 0x40
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f002 fb1c 	bl	8009910 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000093 	.word	0x20000093
 80072e8:	20000094 	.word	0x20000094
 80072ec:	20000095 	.word	0x20000095

080072f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80072fc:	4b3a      	ldr	r3, [pc, #232]	; (80073e8 <USBD_CDC_DeInit+0xf8>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f002 f9c6 	bl	8009694 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007308:	4b37      	ldr	r3, [pc, #220]	; (80073e8 <USBD_CDC_DeInit+0xf8>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	f003 020f 	and.w	r2, r3, #15
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	3324      	adds	r3, #36	; 0x24
 800731e:	2200      	movs	r2, #0
 8007320:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007322:	4b32      	ldr	r3, [pc, #200]	; (80073ec <USBD_CDC_DeInit+0xfc>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f002 f9b3 	bl	8009694 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800732e:	4b2f      	ldr	r3, [pc, #188]	; (80073ec <USBD_CDC_DeInit+0xfc>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	f003 020f 	and.w	r2, r3, #15
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4613      	mov	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007346:	2200      	movs	r2, #0
 8007348:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800734a:	4b29      	ldr	r3, [pc, #164]	; (80073f0 <USBD_CDC_DeInit+0x100>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f002 f99f 	bl	8009694 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007356:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <USBD_CDC_DeInit+0x100>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f003 020f 	and.w	r2, r3, #15
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	440b      	add	r3, r1
 800736a:	3324      	adds	r3, #36	; 0x24
 800736c:	2200      	movs	r2, #0
 800736e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007370:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <USBD_CDC_DeInit+0x100>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	3326      	adds	r3, #38	; 0x26
 8007386:	2200      	movs	r2, #0
 8007388:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	32b0      	adds	r2, #176	; 0xb0
 8007394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01f      	beq.n	80073dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	33b0      	adds	r3, #176	; 0xb0
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	32b0      	adds	r2, #176	; 0xb0
 80073ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073be:	4618      	mov	r0, r3
 80073c0:	f002 fb36 	bl	8009a30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32b0      	adds	r2, #176	; 0xb0
 80073ce:	2100      	movs	r1, #0
 80073d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000093 	.word	0x20000093
 80073ec:	20000094 	.word	0x20000094
 80073f0:	20000095 	.word	0x20000095

080073f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	32b0      	adds	r2, #176	; 0xb0
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007420:	2303      	movs	r3, #3
 8007422:	e0bf      	b.n	80075a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800742c:	2b00      	cmp	r3, #0
 800742e:	d050      	beq.n	80074d2 <USBD_CDC_Setup+0xde>
 8007430:	2b20      	cmp	r3, #32
 8007432:	f040 80af 	bne.w	8007594 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	88db      	ldrh	r3, [r3, #6]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d03a      	beq.n	80074b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b25b      	sxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	da1b      	bge.n	8007480 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	33b0      	adds	r3, #176	; 0xb0
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800745e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	88d2      	ldrh	r2, [r2, #6]
 8007464:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	88db      	ldrh	r3, [r3, #6]
 800746a:	2b07      	cmp	r3, #7
 800746c:	bf28      	it	cs
 800746e:	2307      	movcs	r3, #7
 8007470:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	89fa      	ldrh	r2, [r7, #14]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 fce1 	bl	8008e40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800747e:	e090      	b.n	80075a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	785a      	ldrb	r2, [r3, #1]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	88db      	ldrh	r3, [r3, #6]
 800748e:	2b3f      	cmp	r3, #63	; 0x3f
 8007490:	d803      	bhi.n	800749a <USBD_CDC_Setup+0xa6>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	88db      	ldrh	r3, [r3, #6]
 8007496:	b2da      	uxtb	r2, r3
 8007498:	e000      	b.n	800749c <USBD_CDC_Setup+0xa8>
 800749a:	2240      	movs	r2, #64	; 0x40
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80074a2:	6939      	ldr	r1, [r7, #16]
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80074aa:	461a      	mov	r2, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fcf3 	bl	8008e98 <USBD_CtlPrepareRx>
      break;
 80074b2:	e076      	b.n	80075a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	33b0      	adds	r3, #176	; 0xb0
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	7850      	ldrb	r0, [r2, #1]
 80074ca:	2200      	movs	r2, #0
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	4798      	blx	r3
      break;
 80074d0:	e067      	b.n	80075a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	2b0b      	cmp	r3, #11
 80074d8:	d851      	bhi.n	800757e <USBD_CDC_Setup+0x18a>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBD_CDC_Setup+0xec>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007511 	.word	0x08007511
 80074e4:	0800758d 	.word	0x0800758d
 80074e8:	0800757f 	.word	0x0800757f
 80074ec:	0800757f 	.word	0x0800757f
 80074f0:	0800757f 	.word	0x0800757f
 80074f4:	0800757f 	.word	0x0800757f
 80074f8:	0800757f 	.word	0x0800757f
 80074fc:	0800757f 	.word	0x0800757f
 8007500:	0800757f 	.word	0x0800757f
 8007504:	0800757f 	.word	0x0800757f
 8007508:	0800753b 	.word	0x0800753b
 800750c:	08007565 	.word	0x08007565
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b03      	cmp	r3, #3
 800751a:	d107      	bne.n	800752c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800751c:	f107 030a 	add.w	r3, r7, #10
 8007520:	2202      	movs	r2, #2
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 fc8b 	bl	8008e40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800752a:	e032      	b.n	8007592 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 fc15 	bl	8008d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8007534:	2303      	movs	r3, #3
 8007536:	75fb      	strb	r3, [r7, #23]
          break;
 8007538:	e02b      	b.n	8007592 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b03      	cmp	r3, #3
 8007544:	d107      	bne.n	8007556 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007546:	f107 030d 	add.w	r3, r7, #13
 800754a:	2201      	movs	r2, #1
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fc76 	bl	8008e40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007554:	e01d      	b.n	8007592 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fc00 	bl	8008d5e <USBD_CtlError>
            ret = USBD_FAIL;
 800755e:	2303      	movs	r3, #3
 8007560:	75fb      	strb	r3, [r7, #23]
          break;
 8007562:	e016      	b.n	8007592 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b03      	cmp	r3, #3
 800756e:	d00f      	beq.n	8007590 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fbf3 	bl	8008d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8007578:	2303      	movs	r3, #3
 800757a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800757c:	e008      	b.n	8007590 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fbec 	bl	8008d5e <USBD_CtlError>
          ret = USBD_FAIL;
 8007586:	2303      	movs	r3, #3
 8007588:	75fb      	strb	r3, [r7, #23]
          break;
 800758a:	e002      	b.n	8007592 <USBD_CDC_Setup+0x19e>
          break;
 800758c:	bf00      	nop
 800758e:	e008      	b.n	80075a2 <USBD_CDC_Setup+0x1ae>
          break;
 8007590:	bf00      	nop
      }
      break;
 8007592:	e006      	b.n	80075a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fbe1 	bl	8008d5e <USBD_CtlError>
      ret = USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	75fb      	strb	r3, [r7, #23]
      break;
 80075a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	32b0      	adds	r2, #176	; 0xb0
 80075ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e065      	b.n	80076a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	32b0      	adds	r2, #176	; 0xb0
 80075e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075e6:	78fb      	ldrb	r3, [r7, #3]
 80075e8:	f003 020f 	and.w	r2, r3, #15
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	3318      	adds	r3, #24
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d02f      	beq.n	8007660 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	3318      	adds	r3, #24
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	f003 010f 	and.w	r1, r3, #15
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	460b      	mov	r3, r1
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	440b      	add	r3, r1
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	4403      	add	r3, r0
 8007628:	3338      	adds	r3, #56	; 0x38
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007630:	fb01 f303 	mul.w	r3, r1, r3
 8007634:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007636:	2b00      	cmp	r3, #0
 8007638:	d112      	bne.n	8007660 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	f003 020f 	and.w	r2, r3, #15
 8007640:	6879      	ldr	r1, [r7, #4]
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	440b      	add	r3, r1
 800764c:	3318      	adds	r3, #24
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007652:	78f9      	ldrb	r1, [r7, #3]
 8007654:	2300      	movs	r3, #0
 8007656:	2200      	movs	r2, #0
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f002 f921 	bl	80098a0 <USBD_LL_Transmit>
 800765e:	e01f      	b.n	80076a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	33b0      	adds	r3, #176	; 0xb0
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d010      	beq.n	80076a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	33b0      	adds	r3, #176	; 0xb0
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800769c:	78fa      	ldrb	r2, [r7, #3]
 800769e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	32b0      	adds	r2, #176	; 0xb0
 80076c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32b0      	adds	r2, #176	; 0xb0
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e01a      	b.n	8007712 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f002 f94d 	bl	8009980 <USBD_LL_GetRxDataSize>
 80076e6:	4602      	mov	r2, r0
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	33b0      	adds	r3, #176	; 0xb0
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800770c:	4611      	mov	r1, r2
 800770e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	32b0      	adds	r2, #176	; 0xb0
 800772c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007730:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007738:	2303      	movs	r3, #3
 800773a:	e025      	b.n	8007788 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	33b0      	adds	r3, #176	; 0xb0
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01a      	beq.n	8007786 <USBD_CDC_EP0_RxReady+0x6c>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007756:	2bff      	cmp	r3, #255	; 0xff
 8007758:	d015      	beq.n	8007786 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	33b0      	adds	r3, #176	; 0xb0
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007772:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800777a:	b292      	uxth	r2, r2
 800777c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	22ff      	movs	r2, #255	; 0xff
 8007782:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007798:	2182      	movs	r1, #130	; 0x82
 800779a:	4818      	ldr	r0, [pc, #96]	; (80077fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800779c:	f000 fc7d 	bl	800809a <USBD_GetEpDesc>
 80077a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077a2:	2101      	movs	r1, #1
 80077a4:	4815      	ldr	r0, [pc, #84]	; (80077fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077a6:	f000 fc78 	bl	800809a <USBD_GetEpDesc>
 80077aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077ac:	2181      	movs	r1, #129	; 0x81
 80077ae:	4813      	ldr	r0, [pc, #76]	; (80077fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077b0:	f000 fc73 	bl	800809a <USBD_GetEpDesc>
 80077b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2210      	movs	r2, #16
 80077c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d006      	beq.n	80077d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077d0:	711a      	strb	r2, [r3, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d006      	beq.n	80077ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077e4:	711a      	strb	r2, [r3, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2243      	movs	r2, #67	; 0x43
 80077ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077f0:	4b02      	ldr	r3, [pc, #8]	; (80077fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000050 	.word	0x20000050

08007800 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007808:	2182      	movs	r1, #130	; 0x82
 800780a:	4818      	ldr	r0, [pc, #96]	; (800786c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800780c:	f000 fc45 	bl	800809a <USBD_GetEpDesc>
 8007810:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007812:	2101      	movs	r1, #1
 8007814:	4815      	ldr	r0, [pc, #84]	; (800786c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007816:	f000 fc40 	bl	800809a <USBD_GetEpDesc>
 800781a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800781c:	2181      	movs	r1, #129	; 0x81
 800781e:	4813      	ldr	r0, [pc, #76]	; (800786c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007820:	f000 fc3b 	bl	800809a <USBD_GetEpDesc>
 8007824:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2210      	movs	r2, #16
 8007830:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d006      	beq.n	8007846 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2200      	movs	r2, #0
 800783c:	711a      	strb	r2, [r3, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f042 0202 	orr.w	r2, r2, #2
 8007844:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d006      	beq.n	800785a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	711a      	strb	r2, [r3, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f042 0202 	orr.w	r2, r2, #2
 8007858:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2243      	movs	r2, #67	; 0x43
 800785e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007860:	4b02      	ldr	r3, [pc, #8]	; (800786c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000050 	.word	0x20000050

08007870 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007878:	2182      	movs	r1, #130	; 0x82
 800787a:	4818      	ldr	r0, [pc, #96]	; (80078dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800787c:	f000 fc0d 	bl	800809a <USBD_GetEpDesc>
 8007880:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007882:	2101      	movs	r1, #1
 8007884:	4815      	ldr	r0, [pc, #84]	; (80078dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007886:	f000 fc08 	bl	800809a <USBD_GetEpDesc>
 800788a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800788c:	2181      	movs	r1, #129	; 0x81
 800788e:	4813      	ldr	r0, [pc, #76]	; (80078dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007890:	f000 fc03 	bl	800809a <USBD_GetEpDesc>
 8007894:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2210      	movs	r2, #16
 80078a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d006      	beq.n	80078b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078b0:	711a      	strb	r2, [r3, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d006      	beq.n	80078ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078c4:	711a      	strb	r2, [r3, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2243      	movs	r2, #67	; 0x43
 80078ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078d0:	4b02      	ldr	r3, [pc, #8]	; (80078dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000050 	.word	0x20000050

080078e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	220a      	movs	r2, #10
 80078ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078ee:	4b03      	ldr	r3, [pc, #12]	; (80078fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	2000000c 	.word	0x2000000c

08007900 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	e009      	b.n	8007928 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	33b0      	adds	r3, #176	; 0xb0
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	32b0      	adds	r2, #176	; 0xb0
 800794a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007956:	2303      	movs	r3, #3
 8007958:	e008      	b.n	800796c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	32b0      	adds	r2, #176	; 0xb0
 800798c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007990:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007998:	2303      	movs	r3, #3
 800799a:	e004      	b.n	80079a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	32b0      	adds	r2, #176	; 0xb0
 80079c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	32b0      	adds	r2, #176	; 0xb0
 80079d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80079de:	2303      	movs	r3, #3
 80079e0:	e018      	b.n	8007a14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7c1b      	ldrb	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079ea:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <USBD_CDC_ReceivePacket+0x68>)
 80079ec:	7819      	ldrb	r1, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 ff89 	bl	8009910 <USBD_LL_PrepareReceive>
 80079fe:	e008      	b.n	8007a12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a00:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <USBD_CDC_ReceivePacket+0x68>)
 8007a02:	7819      	ldrb	r1, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a0a:	2340      	movs	r3, #64	; 0x40
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 ff7f 	bl	8009910 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000094 	.word	0x20000094

08007a20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e01f      	b.n	8007a78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	79fa      	ldrb	r2, [r7, #7]
 8007a6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f001 fd3f 	bl	80094f0 <USBD_LL_Init>
 8007a72:	4603      	mov	r3, r0
 8007a74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e025      	b.n	8007ae4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	32ae      	adds	r2, #174	; 0xae
 8007aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00f      	beq.n	8007ad4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	32ae      	adds	r2, #174	; 0xae
 8007abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	f107 020e 	add.w	r2, r7, #14
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	4602      	mov	r2, r0
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 fd5d 	bl	80095b4 <USBD_LL_Start>
 8007afa:	4603      	mov	r3, r0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d009      	beq.n	8007b48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	78fa      	ldrb	r2, [r7, #3]
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	4798      	blx	r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 f8a6 	bl	8008cea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d01a      	beq.n	8007bf8 <USBD_LL_SetupStage+0x72>
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d822      	bhi.n	8007c0c <USBD_LL_SetupStage+0x86>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <USBD_LL_SetupStage+0x4a>
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d00a      	beq.n	8007be4 <USBD_LL_SetupStage+0x5e>
 8007bce:	e01d      	b.n	8007c0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fad3 	bl	8008184 <USBD_StdDevReq>
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
      break;
 8007be2:	e020      	b.n	8007c26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb3b 	bl	8008268 <USBD_StdItfReq>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf6:	e016      	b.n	8007c26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fb9d 	bl	8008340 <USBD_StdEPReq>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0a:	e00c      	b.n	8007c26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 fd70 	bl	8009700 <USBD_LL_StallEP>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
      break;
 8007c24:	bf00      	nop
  }

  return ret;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d16e      	bne.n	8007d26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	f040 8098 	bne.w	8007d8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d913      	bls.n	8007c90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	1ad2      	subs	r2, r2, r3
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	bf28      	it	cs
 8007c82:	4613      	movcs	r3, r2
 8007c84:	461a      	mov	r2, r3
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f001 f922 	bl	8008ed2 <USBD_CtlContinueRx>
 8007c8e:	e07d      	b.n	8007d8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c96:	f003 031f 	and.w	r3, r3, #31
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d014      	beq.n	8007cc8 <USBD_LL_DataOutStage+0x98>
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d81d      	bhi.n	8007cde <USBD_LL_DataOutStage+0xae>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <USBD_LL_DataOutStage+0x7c>
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d003      	beq.n	8007cb2 <USBD_LL_DataOutStage+0x82>
 8007caa:	e018      	b.n	8007cde <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	75bb      	strb	r3, [r7, #22]
            break;
 8007cb0:	e018      	b.n	8007ce4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 f9d2 	bl	8008066 <USBD_CoreFindIF>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	75bb      	strb	r3, [r7, #22]
            break;
 8007cc6:	e00d      	b.n	8007ce4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f9d4 	bl	8008080 <USBD_CoreFindEP>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75bb      	strb	r3, [r7, #22]
            break;
 8007cdc:	e002      	b.n	8007ce4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75bb      	strb	r3, [r7, #22]
            break;
 8007ce2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ce4:	7dbb      	ldrb	r3, [r7, #22]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d119      	bne.n	8007d1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d113      	bne.n	8007d1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007cf6:	7dba      	ldrb	r2, [r7, #22]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	32ae      	adds	r2, #174	; 0xae
 8007cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d06:	7dba      	ldrb	r2, [r7, #22]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d0e:	7dba      	ldrb	r2, [r7, #22]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	32ae      	adds	r2, #174	; 0xae
 8007d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f001 f8e8 	bl	8008ef4 <USBD_CtlSendStatus>
 8007d24:	e032      	b.n	8007d8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f9a5 	bl	8008080 <USBD_CoreFindEP>
 8007d36:	4603      	mov	r3, r0
 8007d38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d3a:	7dbb      	ldrb	r3, [r7, #22]
 8007d3c:	2bff      	cmp	r3, #255	; 0xff
 8007d3e:	d025      	beq.n	8007d8c <USBD_LL_DataOutStage+0x15c>
 8007d40:	7dbb      	ldrb	r3, [r7, #22]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d122      	bne.n	8007d8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d117      	bne.n	8007d82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d52:	7dba      	ldrb	r2, [r7, #22]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	32ae      	adds	r2, #174	; 0xae
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00f      	beq.n	8007d82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d62:	7dba      	ldrb	r2, [r7, #22]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d6a:	7dba      	ldrb	r2, [r7, #22]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	32ae      	adds	r2, #174	; 0xae
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	7afa      	ldrb	r2, [r7, #11]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	4798      	blx	r3
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	e000      	b.n	8007d8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b086      	sub	sp, #24
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	60f8      	str	r0, [r7, #12]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	607a      	str	r2, [r7, #4]
 8007da2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d16f      	bne.n	8007e8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3314      	adds	r3, #20
 8007dae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d15a      	bne.n	8007e70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d914      	bls.n	8007df0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	1ad2      	subs	r2, r2, r3
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f001 f84a 	bl	8008e76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007de2:	2300      	movs	r3, #0
 8007de4:	2200      	movs	r2, #0
 8007de6:	2100      	movs	r1, #0
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f001 fd91 	bl	8009910 <USBD_LL_PrepareReceive>
 8007dee:	e03f      	b.n	8007e70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d11c      	bne.n	8007e36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d316      	bcc.n	8007e36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d20f      	bcs.n	8007e36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2100      	movs	r1, #0
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f001 f82b 	bl	8008e76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f001 fd6e 	bl	8009910 <USBD_LL_PrepareReceive>
 8007e34:	e01c      	b.n	8007e70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d10f      	bne.n	8007e62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d009      	beq.n	8007e62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f001 fc4b 	bl	8009700 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f001 f855 	bl	8008f1a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d03a      	beq.n	8007ef0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f7ff fe42 	bl	8007b04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e88:	e032      	b.n	8007ef0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	4619      	mov	r1, r3
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 f8f3 	bl	8008080 <USBD_CoreFindEP>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	2bff      	cmp	r3, #255	; 0xff
 8007ea2:	d025      	beq.n	8007ef0 <USBD_LL_DataInStage+0x15a>
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d122      	bne.n	8007ef0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d11c      	bne.n	8007ef0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007eb6:	7dfa      	ldrb	r2, [r7, #23]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	32ae      	adds	r2, #174	; 0xae
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d014      	beq.n	8007ef0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007ec6:	7dfa      	ldrb	r2, [r7, #23]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007ece:	7dfa      	ldrb	r2, [r7, #23]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	32ae      	adds	r2, #174	; 0xae
 8007ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	7afa      	ldrb	r2, [r7, #11]
 8007edc:	4611      	mov	r1, r2
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	4798      	blx	r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007ee6:	7dbb      	ldrb	r3, [r7, #22]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007eec:	7dbb      	ldrb	r3, [r7, #22]
 8007eee:	e000      	b.n	8007ef2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d014      	beq.n	8007f60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00e      	beq.n	8007f60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6852      	ldr	r2, [r2, #4]
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	4611      	mov	r1, r2
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f60:	2340      	movs	r3, #64	; 0x40
 8007f62:	2200      	movs	r2, #0
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fb56 	bl	8009618 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2240      	movs	r2, #64	; 0x40
 8007f78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2180      	movs	r1, #128	; 0x80
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 fb48 	bl	8009618 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2240      	movs	r2, #64	; 0x40
 8007f92:	621a      	str	r2, [r3, #32]

  return ret;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d006      	beq.n	8007fe0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b04      	cmp	r3, #4
 8008008:	d106      	bne.n	8008018 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008010:	b2da      	uxtb	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b03      	cmp	r3, #3
 8008038:	d110      	bne.n	800805c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008072:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800808c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b086      	sub	sp, #24
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	429a      	cmp	r2, r3
 80080c0:	d920      	bls.n	8008104 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80080ca:	e013      	b.n	80080f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80080cc:	f107 030a 	add.w	r3, r7, #10
 80080d0:	4619      	mov	r1, r3
 80080d2:	6978      	ldr	r0, [r7, #20]
 80080d4:	f000 f81b 	bl	800810e <USBD_GetNextDesc>
 80080d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	2b05      	cmp	r3, #5
 80080e0:	d108      	bne.n	80080f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	789b      	ldrb	r3, [r3, #2]
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d008      	beq.n	8008102 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	885b      	ldrh	r3, [r3, #2]
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	897b      	ldrh	r3, [r7, #10]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d8e5      	bhi.n	80080cc <USBD_GetEpDesc+0x32>
 8008100:	e000      	b.n	8008104 <USBD_GetEpDesc+0x6a>
          break;
 8008102:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008104:	693b      	ldr	r3, [r7, #16]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800810e:	b480      	push	{r7}
 8008110:	b085      	sub	sp, #20
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	881a      	ldrh	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	b29b      	uxth	r3, r3
 8008126:	4413      	add	r3, r2
 8008128:	b29a      	uxth	r2, r3
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	461a      	mov	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800813a:	68fb      	ldr	r3, [r7, #12]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	3301      	adds	r3, #1
 800815e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008166:	8a3b      	ldrh	r3, [r7, #16]
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	b21a      	sxth	r2, r3
 800816c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008170:	4313      	orrs	r3, r2
 8008172:	b21b      	sxth	r3, r3
 8008174:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008176:	89fb      	ldrh	r3, [r7, #14]
}
 8008178:	4618      	mov	r0, r3
 800817a:	371c      	adds	r7, #28
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800819a:	2b40      	cmp	r3, #64	; 0x40
 800819c:	d005      	beq.n	80081aa <USBD_StdDevReq+0x26>
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	d857      	bhi.n	8008252 <USBD_StdDevReq+0xce>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00f      	beq.n	80081c6 <USBD_StdDevReq+0x42>
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d153      	bne.n	8008252 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	32ae      	adds	r2, #174	; 0xae
 80081b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	4798      	blx	r3
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
      break;
 80081c4:	e04a      	b.n	800825c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b09      	cmp	r3, #9
 80081cc:	d83b      	bhi.n	8008246 <USBD_StdDevReq+0xc2>
 80081ce:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <USBD_StdDevReq+0x50>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	08008229 	.word	0x08008229
 80081d8:	0800823d 	.word	0x0800823d
 80081dc:	08008247 	.word	0x08008247
 80081e0:	08008233 	.word	0x08008233
 80081e4:	08008247 	.word	0x08008247
 80081e8:	08008207 	.word	0x08008207
 80081ec:	080081fd 	.word	0x080081fd
 80081f0:	08008247 	.word	0x08008247
 80081f4:	0800821f 	.word	0x0800821f
 80081f8:	08008211 	.word	0x08008211
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa3c 	bl	800867c <USBD_GetDescriptor>
          break;
 8008204:	e024      	b.n	8008250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fbcb 	bl	80089a4 <USBD_SetAddress>
          break;
 800820e:	e01f      	b.n	8008250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fc0a 	bl	8008a2c <USBD_SetConfig>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]
          break;
 800821c:	e018      	b.n	8008250 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fcad 	bl	8008b80 <USBD_GetConfig>
          break;
 8008226:	e013      	b.n	8008250 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fcde 	bl	8008bec <USBD_GetStatus>
          break;
 8008230:	e00e      	b.n	8008250 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fd0d 	bl	8008c54 <USBD_SetFeature>
          break;
 800823a:	e009      	b.n	8008250 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fd31 	bl	8008ca6 <USBD_ClrFeature>
          break;
 8008244:	e004      	b.n	8008250 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fd88 	bl	8008d5e <USBD_CtlError>
          break;
 800824e:	bf00      	nop
      }
      break;
 8008250:	e004      	b.n	800825c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fd82 	bl	8008d5e <USBD_CtlError>
      break;
 800825a:	bf00      	nop
  }

  return ret;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop

08008268 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800827e:	2b40      	cmp	r3, #64	; 0x40
 8008280:	d005      	beq.n	800828e <USBD_StdItfReq+0x26>
 8008282:	2b40      	cmp	r3, #64	; 0x40
 8008284:	d852      	bhi.n	800832c <USBD_StdItfReq+0xc4>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <USBD_StdItfReq+0x26>
 800828a:	2b20      	cmp	r3, #32
 800828c:	d14e      	bne.n	800832c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008294:	b2db      	uxtb	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	2b02      	cmp	r3, #2
 800829a:	d840      	bhi.n	800831e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	889b      	ldrh	r3, [r3, #4]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d836      	bhi.n	8008314 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	889b      	ldrh	r3, [r3, #4]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fed9 	bl	8008066 <USBD_CoreFindIF>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2bff      	cmp	r3, #255	; 0xff
 80082bc:	d01d      	beq.n	80082fa <USBD_StdItfReq+0x92>
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d11a      	bne.n	80082fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80082c4:	7bba      	ldrb	r2, [r7, #14]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32ae      	adds	r2, #174	; 0xae
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00f      	beq.n	80082f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80082d4:	7bba      	ldrb	r2, [r7, #14]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082dc:	7bba      	ldrb	r2, [r7, #14]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	32ae      	adds	r2, #174	; 0xae
 80082e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082f2:	e004      	b.n	80082fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80082f8:	e001      	b.n	80082fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80082fa:	2303      	movs	r3, #3
 80082fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	88db      	ldrh	r3, [r3, #6]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d110      	bne.n	8008328 <USBD_StdItfReq+0xc0>
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10d      	bne.n	8008328 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fdf1 	bl	8008ef4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008312:	e009      	b.n	8008328 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fd21 	bl	8008d5e <USBD_CtlError>
          break;
 800831c:	e004      	b.n	8008328 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fd1c 	bl	8008d5e <USBD_CtlError>
          break;
 8008326:	e000      	b.n	800832a <USBD_StdItfReq+0xc2>
          break;
 8008328:	bf00      	nop
      }
      break;
 800832a:	e004      	b.n	8008336 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fd15 	bl	8008d5e <USBD_CtlError>
      break;
 8008334:	bf00      	nop
  }

  return ret;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	889b      	ldrh	r3, [r3, #4]
 8008352:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800835c:	2b40      	cmp	r3, #64	; 0x40
 800835e:	d007      	beq.n	8008370 <USBD_StdEPReq+0x30>
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	f200 817f 	bhi.w	8008664 <USBD_StdEPReq+0x324>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d02a      	beq.n	80083c0 <USBD_StdEPReq+0x80>
 800836a:	2b20      	cmp	r3, #32
 800836c:	f040 817a 	bne.w	8008664 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff fe83 	bl	8008080 <USBD_CoreFindEP>
 800837a:	4603      	mov	r3, r0
 800837c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800837e:	7b7b      	ldrb	r3, [r7, #13]
 8008380:	2bff      	cmp	r3, #255	; 0xff
 8008382:	f000 8174 	beq.w	800866e <USBD_StdEPReq+0x32e>
 8008386:	7b7b      	ldrb	r3, [r7, #13]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f040 8170 	bne.w	800866e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800838e:	7b7a      	ldrb	r2, [r7, #13]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008396:	7b7a      	ldrb	r2, [r7, #13]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	32ae      	adds	r2, #174	; 0xae
 800839c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 8163 	beq.w	800866e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083a8:	7b7a      	ldrb	r2, [r7, #13]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	32ae      	adds	r2, #174	; 0xae
 80083ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083be:	e156      	b.n	800866e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d008      	beq.n	80083da <USBD_StdEPReq+0x9a>
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	f300 8145 	bgt.w	8008658 <USBD_StdEPReq+0x318>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 809b 	beq.w	800850a <USBD_StdEPReq+0x1ca>
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d03c      	beq.n	8008452 <USBD_StdEPReq+0x112>
 80083d8:	e13e      	b.n	8008658 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d002      	beq.n	80083ec <USBD_StdEPReq+0xac>
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d016      	beq.n	8008418 <USBD_StdEPReq+0xd8>
 80083ea:	e02c      	b.n	8008446 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00d      	beq.n	800840e <USBD_StdEPReq+0xce>
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b80      	cmp	r3, #128	; 0x80
 80083f6:	d00a      	beq.n	800840e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 f97f 	bl	8009700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008402:	2180      	movs	r1, #128	; 0x80
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f97b 	bl	8009700 <USBD_LL_StallEP>
 800840a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800840c:	e020      	b.n	8008450 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fca4 	bl	8008d5e <USBD_CtlError>
              break;
 8008416:	e01b      	b.n	8008450 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	885b      	ldrh	r3, [r3, #2]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10e      	bne.n	800843e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <USBD_StdEPReq+0xfe>
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b80      	cmp	r3, #128	; 0x80
 800842a:	d008      	beq.n	800843e <USBD_StdEPReq+0xfe>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	88db      	ldrh	r3, [r3, #6]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 f961 	bl	8009700 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fd58 	bl	8008ef4 <USBD_CtlSendStatus>

              break;
 8008444:	e004      	b.n	8008450 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc88 	bl	8008d5e <USBD_CtlError>
              break;
 800844e:	bf00      	nop
          }
          break;
 8008450:	e107      	b.n	8008662 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d002      	beq.n	8008464 <USBD_StdEPReq+0x124>
 800845e:	2b03      	cmp	r3, #3
 8008460:	d016      	beq.n	8008490 <USBD_StdEPReq+0x150>
 8008462:	e04b      	b.n	80084fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00d      	beq.n	8008486 <USBD_StdEPReq+0x146>
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b80      	cmp	r3, #128	; 0x80
 800846e:	d00a      	beq.n	8008486 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 f943 	bl	8009700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800847a:	2180      	movs	r1, #128	; 0x80
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 f93f 	bl	8009700 <USBD_LL_StallEP>
 8008482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008484:	e040      	b.n	8008508 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fc68 	bl	8008d5e <USBD_CtlError>
              break;
 800848e:	e03b      	b.n	8008508 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	885b      	ldrh	r3, [r3, #2]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d136      	bne.n	8008506 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 f960 	bl	800976c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fd21 	bl	8008ef4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fde2 	bl	8008080 <USBD_CoreFindEP>
 80084bc:	4603      	mov	r3, r0
 80084be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084c0:	7b7b      	ldrb	r3, [r7, #13]
 80084c2:	2bff      	cmp	r3, #255	; 0xff
 80084c4:	d01f      	beq.n	8008506 <USBD_StdEPReq+0x1c6>
 80084c6:	7b7b      	ldrb	r3, [r7, #13]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11c      	bne.n	8008506 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80084cc:	7b7a      	ldrb	r2, [r7, #13]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80084d4:	7b7a      	ldrb	r2, [r7, #13]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	32ae      	adds	r2, #174	; 0xae
 80084da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d010      	beq.n	8008506 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084e4:	7b7a      	ldrb	r2, [r7, #13]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32ae      	adds	r2, #174	; 0xae
 80084ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80084fa:	e004      	b.n	8008506 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fc2d 	bl	8008d5e <USBD_CtlError>
              break;
 8008504:	e000      	b.n	8008508 <USBD_StdEPReq+0x1c8>
              break;
 8008506:	bf00      	nop
          }
          break;
 8008508:	e0ab      	b.n	8008662 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d002      	beq.n	800851c <USBD_StdEPReq+0x1dc>
 8008516:	2b03      	cmp	r3, #3
 8008518:	d032      	beq.n	8008580 <USBD_StdEPReq+0x240>
 800851a:	e097      	b.n	800864c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d007      	beq.n	8008532 <USBD_StdEPReq+0x1f2>
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b80      	cmp	r3, #128	; 0x80
 8008526:	d004      	beq.n	8008532 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fc17 	bl	8008d5e <USBD_CtlError>
                break;
 8008530:	e091      	b.n	8008656 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008536:	2b00      	cmp	r3, #0
 8008538:	da0b      	bge.n	8008552 <USBD_StdEPReq+0x212>
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008540:	4613      	mov	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	3310      	adds	r3, #16
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	3304      	adds	r3, #4
 8008550:	e00b      	b.n	800856a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	4413      	add	r3, r2
 8008568:	3304      	adds	r3, #4
 800856a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2202      	movs	r2, #2
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc61 	bl	8008e40 <USBD_CtlSendData>
              break;
 800857e:	e06a      	b.n	8008656 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008584:	2b00      	cmp	r3, #0
 8008586:	da11      	bge.n	80085ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	f003 020f 	and.w	r2, r3, #15
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	3324      	adds	r3, #36	; 0x24
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d117      	bne.n	80085d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fbda 	bl	8008d5e <USBD_CtlError>
                  break;
 80085aa:	e054      	b.n	8008656 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	f003 020f 	and.w	r2, r3, #15
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fbc7 	bl	8008d5e <USBD_CtlError>
                  break;
 80085d0:	e041      	b.n	8008656 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	da0b      	bge.n	80085f2 <USBD_StdEPReq+0x2b2>
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	3310      	adds	r3, #16
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	4413      	add	r3, r2
 80085ee:	3304      	adds	r3, #4
 80085f0:	e00b      	b.n	800860a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	4413      	add	r3, r2
 8008608:	3304      	adds	r3, #4
 800860a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <USBD_StdEPReq+0x2d8>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d103      	bne.n	8008620 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	e00e      	b.n	800863e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 f8d7 	bl	80097d8 <USBD_LL_IsStallEP>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2201      	movs	r2, #1
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	e002      	b.n	800863e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2202      	movs	r2, #2
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fbfb 	bl	8008e40 <USBD_CtlSendData>
              break;
 800864a:	e004      	b.n	8008656 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fb85 	bl	8008d5e <USBD_CtlError>
              break;
 8008654:	bf00      	nop
          }
          break;
 8008656:	e004      	b.n	8008662 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fb7f 	bl	8008d5e <USBD_CtlError>
          break;
 8008660:	bf00      	nop
      }
      break;
 8008662:	e005      	b.n	8008670 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fb79 	bl	8008d5e <USBD_CtlError>
      break;
 800866c:	e000      	b.n	8008670 <USBD_StdEPReq+0x330>
      break;
 800866e:	bf00      	nop
  }

  return ret;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	885b      	ldrh	r3, [r3, #2]
 8008696:	0a1b      	lsrs	r3, r3, #8
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	2b0e      	cmp	r3, #14
 800869e:	f200 8152 	bhi.w	8008946 <USBD_GetDescriptor+0x2ca>
 80086a2:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <USBD_GetDescriptor+0x2c>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	08008719 	.word	0x08008719
 80086ac:	08008731 	.word	0x08008731
 80086b0:	08008771 	.word	0x08008771
 80086b4:	08008947 	.word	0x08008947
 80086b8:	08008947 	.word	0x08008947
 80086bc:	080088e7 	.word	0x080088e7
 80086c0:	08008913 	.word	0x08008913
 80086c4:	08008947 	.word	0x08008947
 80086c8:	08008947 	.word	0x08008947
 80086cc:	08008947 	.word	0x08008947
 80086d0:	08008947 	.word	0x08008947
 80086d4:	08008947 	.word	0x08008947
 80086d8:	08008947 	.word	0x08008947
 80086dc:	08008947 	.word	0x08008947
 80086e0:	080086e5 	.word	0x080086e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	7c12      	ldrb	r2, [r2, #16]
 80086fc:	f107 0108 	add.w	r1, r7, #8
 8008700:	4610      	mov	r0, r2
 8008702:	4798      	blx	r3
 8008704:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008706:	e126      	b.n	8008956 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fb27 	bl	8008d5e <USBD_CtlError>
        err++;
 8008710:	7afb      	ldrb	r3, [r7, #11]
 8008712:	3301      	adds	r3, #1
 8008714:	72fb      	strb	r3, [r7, #11]
      break;
 8008716:	e11e      	b.n	8008956 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	7c12      	ldrb	r2, [r2, #16]
 8008724:	f107 0108 	add.w	r1, r7, #8
 8008728:	4610      	mov	r0, r2
 800872a:	4798      	blx	r3
 800872c:	60f8      	str	r0, [r7, #12]
      break;
 800872e:	e112      	b.n	8008956 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	7c1b      	ldrb	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10d      	bne.n	8008754 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008740:	f107 0208 	add.w	r2, r7, #8
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
 8008748:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	2202      	movs	r2, #2
 8008750:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008752:	e100      	b.n	8008956 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	f107 0208 	add.w	r2, r7, #8
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
 8008764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3301      	adds	r3, #1
 800876a:	2202      	movs	r2, #2
 800876c:	701a      	strb	r2, [r3, #0]
      break;
 800876e:	e0f2      	b.n	8008956 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	885b      	ldrh	r3, [r3, #2]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b05      	cmp	r3, #5
 8008778:	f200 80ac 	bhi.w	80088d4 <USBD_GetDescriptor+0x258>
 800877c:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <USBD_GetDescriptor+0x108>)
 800877e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008782:	bf00      	nop
 8008784:	0800879d 	.word	0x0800879d
 8008788:	080087d1 	.word	0x080087d1
 800878c:	08008805 	.word	0x08008805
 8008790:	08008839 	.word	0x08008839
 8008794:	0800886d 	.word	0x0800886d
 8008798:	080088a1 	.word	0x080088a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	7c12      	ldrb	r2, [r2, #16]
 80087b4:	f107 0108 	add.w	r1, r7, #8
 80087b8:	4610      	mov	r0, r2
 80087ba:	4798      	blx	r3
 80087bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087be:	e091      	b.n	80088e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 facb 	bl	8008d5e <USBD_CtlError>
            err++;
 80087c8:	7afb      	ldrb	r3, [r7, #11]
 80087ca:	3301      	adds	r3, #1
 80087cc:	72fb      	strb	r3, [r7, #11]
          break;
 80087ce:	e089      	b.n	80088e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00b      	beq.n	80087f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	7c12      	ldrb	r2, [r2, #16]
 80087e8:	f107 0108 	add.w	r1, r7, #8
 80087ec:	4610      	mov	r0, r2
 80087ee:	4798      	blx	r3
 80087f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087f2:	e077      	b.n	80088e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fab1 	bl	8008d5e <USBD_CtlError>
            err++;
 80087fc:	7afb      	ldrb	r3, [r7, #11]
 80087fe:	3301      	adds	r3, #1
 8008800:	72fb      	strb	r3, [r7, #11]
          break;
 8008802:	e06f      	b.n	80088e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	7c12      	ldrb	r2, [r2, #16]
 800881c:	f107 0108 	add.w	r1, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
 8008824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008826:	e05d      	b.n	80088e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa97 	bl	8008d5e <USBD_CtlError>
            err++;
 8008830:	7afb      	ldrb	r3, [r7, #11]
 8008832:	3301      	adds	r3, #1
 8008834:	72fb      	strb	r3, [r7, #11]
          break;
 8008836:	e055      	b.n	80088e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	7c12      	ldrb	r2, [r2, #16]
 8008850:	f107 0108 	add.w	r1, r7, #8
 8008854:	4610      	mov	r0, r2
 8008856:	4798      	blx	r3
 8008858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800885a:	e043      	b.n	80088e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fa7d 	bl	8008d5e <USBD_CtlError>
            err++;
 8008864:	7afb      	ldrb	r3, [r7, #11]
 8008866:	3301      	adds	r3, #1
 8008868:	72fb      	strb	r3, [r7, #11]
          break;
 800886a:	e03b      	b.n	80088e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	7c12      	ldrb	r2, [r2, #16]
 8008884:	f107 0108 	add.w	r1, r7, #8
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800888e:	e029      	b.n	80088e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fa63 	bl	8008d5e <USBD_CtlError>
            err++;
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	3301      	adds	r3, #1
 800889c:	72fb      	strb	r3, [r7, #11]
          break;
 800889e:	e021      	b.n	80088e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	7c12      	ldrb	r2, [r2, #16]
 80088b8:	f107 0108 	add.w	r1, r7, #8
 80088bc:	4610      	mov	r0, r2
 80088be:	4798      	blx	r3
 80088c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c2:	e00f      	b.n	80088e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa49 	bl	8008d5e <USBD_CtlError>
            err++;
 80088cc:	7afb      	ldrb	r3, [r7, #11]
 80088ce:	3301      	adds	r3, #1
 80088d0:	72fb      	strb	r3, [r7, #11]
          break;
 80088d2:	e007      	b.n	80088e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fa41 	bl	8008d5e <USBD_CtlError>
          err++;
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	3301      	adds	r3, #1
 80088e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088e2:	bf00      	nop
      }
      break;
 80088e4:	e037      	b.n	8008956 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	7c1b      	ldrb	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f6:	f107 0208 	add.w	r2, r7, #8
 80088fa:	4610      	mov	r0, r2
 80088fc:	4798      	blx	r3
 80088fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008900:	e029      	b.n	8008956 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fa2a 	bl	8008d5e <USBD_CtlError>
        err++;
 800890a:	7afb      	ldrb	r3, [r7, #11]
 800890c:	3301      	adds	r3, #1
 800890e:	72fb      	strb	r3, [r7, #11]
      break;
 8008910:	e021      	b.n	8008956 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	7c1b      	ldrb	r3, [r3, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10d      	bne.n	8008936 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	f107 0208 	add.w	r2, r7, #8
 8008926:	4610      	mov	r0, r2
 8008928:	4798      	blx	r3
 800892a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3301      	adds	r3, #1
 8008930:	2207      	movs	r2, #7
 8008932:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008934:	e00f      	b.n	8008956 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fa10 	bl	8008d5e <USBD_CtlError>
        err++;
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	3301      	adds	r3, #1
 8008942:	72fb      	strb	r3, [r7, #11]
      break;
 8008944:	e007      	b.n	8008956 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fa08 	bl	8008d5e <USBD_CtlError>
      err++;
 800894e:	7afb      	ldrb	r3, [r7, #11]
 8008950:	3301      	adds	r3, #1
 8008952:	72fb      	strb	r3, [r7, #11]
      break;
 8008954:	bf00      	nop
  }

  if (err != 0U)
 8008956:	7afb      	ldrb	r3, [r7, #11]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d11e      	bne.n	800899a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	88db      	ldrh	r3, [r3, #6]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d016      	beq.n	8008992 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008964:	893b      	ldrh	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00e      	beq.n	8008988 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	88da      	ldrh	r2, [r3, #6]
 800896e:	893b      	ldrh	r3, [r7, #8]
 8008970:	4293      	cmp	r3, r2
 8008972:	bf28      	it	cs
 8008974:	4613      	movcs	r3, r2
 8008976:	b29b      	uxth	r3, r3
 8008978:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800897a:	893b      	ldrh	r3, [r7, #8]
 800897c:	461a      	mov	r2, r3
 800897e:	68f9      	ldr	r1, [r7, #12]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fa5d 	bl	8008e40 <USBD_CtlSendData>
 8008986:	e009      	b.n	800899c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f9e7 	bl	8008d5e <USBD_CtlError>
 8008990:	e004      	b.n	800899c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 faae 	bl	8008ef4 <USBD_CtlSendStatus>
 8008998:	e000      	b.n	800899c <USBD_GetDescriptor+0x320>
    return;
 800899a:	bf00      	nop
  }
}
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop

080089a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	889b      	ldrh	r3, [r3, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d131      	bne.n	8008a1a <USBD_SetAddress+0x76>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	88db      	ldrh	r3, [r3, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d12d      	bne.n	8008a1a <USBD_SetAddress+0x76>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	2b7f      	cmp	r3, #127	; 0x7f
 80089c4:	d829      	bhi.n	8008a1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	885b      	ldrh	r3, [r3, #2]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d104      	bne.n	80089e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f9bc 	bl	8008d5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e6:	e01d      	b.n	8008a24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	7bfa      	ldrb	r2, [r7, #15]
 80089ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 ff1d 	bl	8009834 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa7a 	bl	8008ef4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0e:	e009      	b.n	8008a24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a18:	e004      	b.n	8008a24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f99e 	bl	8008d5e <USBD_CtlError>
  }
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	885b      	ldrh	r3, [r3, #2]
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	4b4e      	ldr	r3, [pc, #312]	; (8008b7c <USBD_SetConfig+0x150>)
 8008a42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a44:	4b4d      	ldr	r3, [pc, #308]	; (8008b7c <USBD_SetConfig+0x150>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d905      	bls.n	8008a58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f985 	bl	8008d5e <USBD_CtlError>
    return USBD_FAIL;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e08c      	b.n	8008b72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d002      	beq.n	8008a6a <USBD_SetConfig+0x3e>
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d029      	beq.n	8008abc <USBD_SetConfig+0x90>
 8008a68:	e075      	b.n	8008b56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a6a:	4b44      	ldr	r3, [pc, #272]	; (8008b7c <USBD_SetConfig+0x150>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d020      	beq.n	8008ab4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a72:	4b42      	ldr	r3, [pc, #264]	; (8008b7c <USBD_SetConfig+0x150>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a7c:	4b3f      	ldr	r3, [pc, #252]	; (8008b7c <USBD_SetConfig+0x150>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff f849 	bl	8007b1a <USBD_SetClassConfig>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d008      	beq.n	8008aa4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f962 	bl	8008d5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008aa2:	e065      	b.n	8008b70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fa25 	bl	8008ef4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2203      	movs	r2, #3
 8008aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ab2:	e05d      	b.n	8008b70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa1d 	bl	8008ef4 <USBD_CtlSendStatus>
      break;
 8008aba:	e059      	b.n	8008b70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008abc:	4b2f      	ldr	r3, [pc, #188]	; (8008b7c <USBD_SetConfig+0x150>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d112      	bne.n	8008aea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008acc:	4b2b      	ldr	r3, [pc, #172]	; (8008b7c <USBD_SetConfig+0x150>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ad6:	4b29      	ldr	r3, [pc, #164]	; (8008b7c <USBD_SetConfig+0x150>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff f838 	bl	8007b52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa06 	bl	8008ef4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ae8:	e042      	b.n	8008b70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008aea:	4b24      	ldr	r3, [pc, #144]	; (8008b7c <USBD_SetConfig+0x150>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d02a      	beq.n	8008b4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff f826 	bl	8007b52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b06:	4b1d      	ldr	r3, [pc, #116]	; (8008b7c <USBD_SetConfig+0x150>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b10:	4b1a      	ldr	r3, [pc, #104]	; (8008b7c <USBD_SetConfig+0x150>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7fe ffff 	bl	8007b1a <USBD_SetClassConfig>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00f      	beq.n	8008b46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f918 	bl	8008d5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff f80b 	bl	8007b52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b44:	e014      	b.n	8008b70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f9d4 	bl	8008ef4 <USBD_CtlSendStatus>
      break;
 8008b4c:	e010      	b.n	8008b70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f9d0 	bl	8008ef4 <USBD_CtlSendStatus>
      break;
 8008b54:	e00c      	b.n	8008b70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f900 	bl	8008d5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b5e:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <USBD_SetConfig+0x150>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7fe fff4 	bl	8007b52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6e:	bf00      	nop
  }

  return ret;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200002a0 	.word	0x200002a0

08008b80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	88db      	ldrh	r3, [r3, #6]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d004      	beq.n	8008b9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f8e2 	bl	8008d5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b9a:	e023      	b.n	8008be4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	dc02      	bgt.n	8008bae <USBD_GetConfig+0x2e>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc03      	bgt.n	8008bb4 <USBD_GetConfig+0x34>
 8008bac:	e015      	b.n	8008bda <USBD_GetConfig+0x5a>
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d00b      	beq.n	8008bca <USBD_GetConfig+0x4a>
 8008bb2:	e012      	b.n	8008bda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f93c 	bl	8008e40 <USBD_CtlSendData>
        break;
 8008bc8:	e00c      	b.n	8008be4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f934 	bl	8008e40 <USBD_CtlSendData>
        break;
 8008bd8:	e004      	b.n	8008be4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f8be 	bl	8008d5e <USBD_CtlError>
        break;
 8008be2:	bf00      	nop
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d81e      	bhi.n	8008c42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	88db      	ldrh	r3, [r3, #6]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d004      	beq.n	8008c16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f8a5 	bl	8008d5e <USBD_CtlError>
        break;
 8008c14:	e01a      	b.n	8008c4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f043 0202 	orr.w	r2, r3, #2
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	330c      	adds	r3, #12
 8008c36:	2202      	movs	r2, #2
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f900 	bl	8008e40 <USBD_CtlSendData>
      break;
 8008c40:	e004      	b.n	8008c4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f88a 	bl	8008d5e <USBD_CtlError>
      break;
 8008c4a:	bf00      	nop
  }
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	885b      	ldrh	r3, [r3, #2]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d107      	bne.n	8008c76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f940 	bl	8008ef4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c74:	e013      	b.n	8008c9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d10b      	bne.n	8008c96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	889b      	ldrh	r3, [r3, #4]
 8008c82:	0a1b      	lsrs	r3, r3, #8
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f930 	bl	8008ef4 <USBD_CtlSendStatus>
}
 8008c94:	e003      	b.n	8008c9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f860 	bl	8008d5e <USBD_CtlError>
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d80b      	bhi.n	8008cd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	885b      	ldrh	r3, [r3, #2]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d10c      	bne.n	8008ce0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f910 	bl	8008ef4 <USBD_CtlSendStatus>
      }
      break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f840 	bl	8008d5e <USBD_CtlError>
      break;
 8008cde:	e000      	b.n	8008ce2 <USBD_ClrFeature+0x3c>
      break;
 8008ce0:	bf00      	nop
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3301      	adds	r3, #1
 8008d04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7ff fa17 	bl	8008148 <SWAPBYTE>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3301      	adds	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f7ff fa0a 	bl	8008148 <SWAPBYTE>
 8008d34:	4603      	mov	r3, r0
 8008d36:	461a      	mov	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff f9fd 	bl	8008148 <SWAPBYTE>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	80da      	strh	r2, [r3, #6]
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d68:	2180      	movs	r1, #128	; 0x80
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fcc8 	bl	8009700 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fcc4 	bl	8009700 <USBD_LL_StallEP>
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d036      	beq.n	8008e04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d9a:	6938      	ldr	r0, [r7, #16]
 8008d9c:	f000 f836 	bl	8008e0c <USBD_GetLen>
 8008da0:	4603      	mov	r3, r0
 8008da2:	3301      	adds	r3, #1
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	4413      	add	r3, r2
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008dd0:	e013      	b.n	8008dfa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	3301      	adds	r3, #1
 8008de2:	613b      	str	r3, [r7, #16]
    idx++;
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	3301      	adds	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	4413      	add	r3, r2
 8008df0:	2200      	movs	r2, #0
 8008df2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	3301      	adds	r3, #1
 8008df8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e7      	bne.n	8008dd2 <USBD_GetString+0x52>
 8008e02:	e000      	b.n	8008e06 <USBD_GetString+0x86>
    return;
 8008e04:	bf00      	nop
  }
}
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008e1c:	e005      	b.n	8008e2a <USBD_GetLen+0x1e>
  {
    len++;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	3301      	adds	r3, #1
 8008e22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f5      	bne.n	8008e1e <USBD_GetLen+0x12>
  }

  return len;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	2100      	movs	r1, #0
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fd1a 	bl	80098a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	2100      	movs	r1, #0
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 fd09 	bl	80098a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 fd24 	bl	8009910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 fd13 	bl	8009910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2204      	movs	r2, #4
 8008f00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f04:	2300      	movs	r3, #0
 8008f06:	2200      	movs	r2, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fcc8 	bl	80098a0 <USBD_LL_Transmit>

  return USBD_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2205      	movs	r2, #5
 8008f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2100      	movs	r1, #0
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fced 	bl	8009910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f44:	2200      	movs	r2, #0
 8008f46:	4912      	ldr	r1, [pc, #72]	; (8008f90 <MX_USB_DEVICE_Init+0x50>)
 8008f48:	4812      	ldr	r0, [pc, #72]	; (8008f94 <MX_USB_DEVICE_Init+0x54>)
 8008f4a:	f7fe fd69 	bl	8007a20 <USBD_Init>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f54:	f7f7 fb89 	bl	800066a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f58:	490f      	ldr	r1, [pc, #60]	; (8008f98 <MX_USB_DEVICE_Init+0x58>)
 8008f5a:	480e      	ldr	r0, [pc, #56]	; (8008f94 <MX_USB_DEVICE_Init+0x54>)
 8008f5c:	f7fe fd90 	bl	8007a80 <USBD_RegisterClass>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f66:	f7f7 fb80 	bl	800066a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f6a:	490c      	ldr	r1, [pc, #48]	; (8008f9c <MX_USB_DEVICE_Init+0x5c>)
 8008f6c:	4809      	ldr	r0, [pc, #36]	; (8008f94 <MX_USB_DEVICE_Init+0x54>)
 8008f6e:	f7fe fcc7 	bl	8007900 <USBD_CDC_RegisterInterface>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f78:	f7f7 fb77 	bl	800066a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f7c:	4805      	ldr	r0, [pc, #20]	; (8008f94 <MX_USB_DEVICE_Init+0x54>)
 8008f7e:	f7fe fdb5 	bl	8007aec <USBD_Start>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f88:	f7f7 fb6f 	bl	800066a <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f8c:	bf00      	nop
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	200000ac 	.word	0x200000ac
 8008f94:	200002a4 	.word	0x200002a4
 8008f98:	20000018 	.word	0x20000018
 8008f9c:	20000098 	.word	0x20000098

08008fa0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4905      	ldr	r1, [pc, #20]	; (8008fbc <CDC_Init_FS+0x1c>)
 8008fa8:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <CDC_Init_FS+0x20>)
 8008faa:	f7fe fcc3 	bl	8007934 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008fae:	4905      	ldr	r1, [pc, #20]	; (8008fc4 <CDC_Init_FS+0x24>)
 8008fb0:	4803      	ldr	r0, [pc, #12]	; (8008fc0 <CDC_Init_FS+0x20>)
 8008fb2:	f7fe fce1 	bl	8007978 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008fb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000980 	.word	0x20000980
 8008fc0:	200002a4 	.word	0x200002a4
 8008fc4:	20000580 	.word	0x20000580

08008fc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	6039      	str	r1, [r7, #0]
 8008fe2:	71fb      	strb	r3, [r7, #7]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	2b23      	cmp	r3, #35	; 0x23
 8008fec:	d84a      	bhi.n	8009084 <CDC_Control_FS+0xac>
 8008fee:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <CDC_Control_FS+0x1c>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	08009085 	.word	0x08009085
 8008ff8:	08009085 	.word	0x08009085
 8008ffc:	08009085 	.word	0x08009085
 8009000:	08009085 	.word	0x08009085
 8009004:	08009085 	.word	0x08009085
 8009008:	08009085 	.word	0x08009085
 800900c:	08009085 	.word	0x08009085
 8009010:	08009085 	.word	0x08009085
 8009014:	08009085 	.word	0x08009085
 8009018:	08009085 	.word	0x08009085
 800901c:	08009085 	.word	0x08009085
 8009020:	08009085 	.word	0x08009085
 8009024:	08009085 	.word	0x08009085
 8009028:	08009085 	.word	0x08009085
 800902c:	08009085 	.word	0x08009085
 8009030:	08009085 	.word	0x08009085
 8009034:	08009085 	.word	0x08009085
 8009038:	08009085 	.word	0x08009085
 800903c:	08009085 	.word	0x08009085
 8009040:	08009085 	.word	0x08009085
 8009044:	08009085 	.word	0x08009085
 8009048:	08009085 	.word	0x08009085
 800904c:	08009085 	.word	0x08009085
 8009050:	08009085 	.word	0x08009085
 8009054:	08009085 	.word	0x08009085
 8009058:	08009085 	.word	0x08009085
 800905c:	08009085 	.word	0x08009085
 8009060:	08009085 	.word	0x08009085
 8009064:	08009085 	.word	0x08009085
 8009068:	08009085 	.word	0x08009085
 800906c:	08009085 	.word	0x08009085
 8009070:	08009085 	.word	0x08009085
 8009074:	08009085 	.word	0x08009085
 8009078:	08009085 	.word	0x08009085
 800907c:	08009085 	.word	0x08009085
 8009080:	08009085 	.word	0x08009085
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009084:	bf00      	nop
  }

  return (USBD_OK);
 8009086:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	4805      	ldr	r0, [pc, #20]	; (80090b8 <CDC_Receive_FS+0x24>)
 80090a2:	f7fe fc69 	bl	8007978 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090a6:	4804      	ldr	r0, [pc, #16]	; (80090b8 <CDC_Receive_FS+0x24>)
 80090a8:	f7fe fc84 	bl	80079b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80090ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	200002a4 	.word	0x200002a4

080090bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	4613      	mov	r3, r2
 80090c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80090ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
	...

080090e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2212      	movs	r2, #18
 80090f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090f2:	4b03      	ldr	r3, [pc, #12]	; (8009100 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	200000cc 	.word	0x200000cc

08009104 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2204      	movs	r2, #4
 8009114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009116:	4b03      	ldr	r3, [pc, #12]	; (8009124 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	200000ec 	.word	0x200000ec

08009128 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	4907      	ldr	r1, [pc, #28]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
 800913e:	4808      	ldr	r0, [pc, #32]	; (8009160 <USBD_FS_ProductStrDescriptor+0x38>)
 8009140:	f7ff fe1e 	bl	8008d80 <USBD_GetString>
 8009144:	e004      	b.n	8009150 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	4904      	ldr	r1, [pc, #16]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
 800914a:	4805      	ldr	r0, [pc, #20]	; (8009160 <USBD_FS_ProductStrDescriptor+0x38>)
 800914c:	f7ff fe18 	bl	8008d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000d80 	.word	0x20000d80
 8009160:	08009ac0 	.word	0x08009ac0

08009164 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	4904      	ldr	r1, [pc, #16]	; (8009184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009174:	4804      	ldr	r0, [pc, #16]	; (8009188 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009176:	f7ff fe03 	bl	8008d80 <USBD_GetString>
  return USBD_StrDesc;
 800917a:	4b02      	ldr	r3, [pc, #8]	; (8009184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000d80 	.word	0x20000d80
 8009188:	08009ad8 	.word	0x08009ad8

0800918c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	221a      	movs	r2, #26
 800919c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800919e:	f000 f855 	bl	800924c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091a2:	4b02      	ldr	r3, [pc, #8]	; (80091ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	200000f0 	.word	0x200000f0

080091b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4907      	ldr	r1, [pc, #28]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091c6:	4808      	ldr	r0, [pc, #32]	; (80091e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091c8:	f7ff fdda 	bl	8008d80 <USBD_GetString>
 80091cc:	e004      	b.n	80091d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	4904      	ldr	r1, [pc, #16]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091d2:	4805      	ldr	r0, [pc, #20]	; (80091e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091d4:	f7ff fdd4 	bl	8008d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000d80 	.word	0x20000d80
 80091e8:	08009aec 	.word	0x08009aec

080091ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d105      	bne.n	800920a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	4907      	ldr	r1, [pc, #28]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009202:	4808      	ldr	r0, [pc, #32]	; (8009224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009204:	f7ff fdbc 	bl	8008d80 <USBD_GetString>
 8009208:	e004      	b.n	8009214 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	4904      	ldr	r1, [pc, #16]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800920e:	4805      	ldr	r0, [pc, #20]	; (8009224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009210:	f7ff fdb6 	bl	8008d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000d80 	.word	0x20000d80
 8009224:	08009af8 	.word	0x08009af8

08009228 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	220c      	movs	r2, #12
 8009238:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800923a:	4b03      	ldr	r3, [pc, #12]	; (8009248 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	200000e0 	.word	0x200000e0

0800924c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4413      	add	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009260:	2208      	movs	r2, #8
 8009262:	4906      	ldr	r1, [pc, #24]	; (800927c <Get_SerialNum+0x30>)
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f80d 	bl	8009284 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800926a:	2204      	movs	r2, #4
 800926c:	4904      	ldr	r1, [pc, #16]	; (8009280 <Get_SerialNum+0x34>)
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f808 	bl	8009284 <IntToUnicode>
  }
}
 8009274:	bf00      	nop
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	200000f2 	.word	0x200000f2
 8009280:	20000102 	.word	0x20000102

08009284 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
 800929a:	e027      	b.n	80092ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	0f1b      	lsrs	r3, r3, #28
 80092a0:	2b09      	cmp	r3, #9
 80092a2:	d80b      	bhi.n	80092bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	0f1b      	lsrs	r3, r3, #28
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	4619      	mov	r1, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	440b      	add	r3, r1
 80092b4:	3230      	adds	r2, #48	; 0x30
 80092b6:	b2d2      	uxtb	r2, r2
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	e00a      	b.n	80092d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	0f1b      	lsrs	r3, r3, #28
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	4619      	mov	r1, r3
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	440b      	add	r3, r1
 80092cc:	3237      	adds	r2, #55	; 0x37
 80092ce:	b2d2      	uxtb	r2, r2
 80092d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	011b      	lsls	r3, r3, #4
 80092d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	3301      	adds	r3, #1
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	4413      	add	r3, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	3301      	adds	r3, #1
 80092ea:	75fb      	strb	r3, [r7, #23]
 80092ec:	7dfa      	ldrb	r2, [r7, #23]
 80092ee:	79fb      	ldrb	r3, [r7, #7]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d3d3      	bcc.n	800929c <IntToUnicode+0x18>
  }
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b098      	sub	sp, #96	; 0x60
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800930c:	f107 030c 	add.w	r3, r7, #12
 8009310:	2254      	movs	r2, #84	; 0x54
 8009312:	2100      	movs	r1, #0
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fb9b 	bl	8009a50 <memset>
  if(pcdHandle->Instance==USB)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1d      	ldr	r2, [pc, #116]	; (8009394 <HAL_PCD_MspInit+0x90>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d132      	bne.n	800938a <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009328:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800932a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800932e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009330:	2301      	movs	r3, #1
 8009332:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009334:	2301      	movs	r3, #1
 8009336:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009338:	2318      	movs	r3, #24
 800933a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800933c:	2307      	movs	r3, #7
 800933e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009340:	2302      	movs	r3, #2
 8009342:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009344:	2302      	movs	r3, #2
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8009348:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800934c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800934e:	f107 030c 	add.w	r3, r7, #12
 8009352:	4618      	mov	r0, r3
 8009354:	f7fa fafc 	bl	8003950 <HAL_RCCEx_PeriphCLKConfig>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800935e:	f7f7 f984 	bl	800066a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009362:	4b0d      	ldr	r3, [pc, #52]	; (8009398 <HAL_PCD_MspInit+0x94>)
 8009364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009366:	4a0c      	ldr	r2, [pc, #48]	; (8009398 <HAL_PCD_MspInit+0x94>)
 8009368:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800936c:	6593      	str	r3, [r2, #88]	; 0x58
 800936e:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <HAL_PCD_MspInit+0x94>)
 8009370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009372:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009376:	60bb      	str	r3, [r7, #8]
 8009378:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800937a:	2200      	movs	r2, #0
 800937c:	2100      	movs	r1, #0
 800937e:	2043      	movs	r0, #67	; 0x43
 8009380:	f7f7 fd03 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009384:	2043      	movs	r0, #67	; 0x43
 8009386:	f7f7 fd1c 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800938a:	bf00      	nop
 800938c:	3760      	adds	r7, #96	; 0x60
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	40006800 	.word	0x40006800
 8009398:	40021000 	.word	0x40021000

0800939c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7fe fbe7 	bl	8007b86 <USBD_LL_SetupStage>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	440b      	add	r3, r1
 80093e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	4619      	mov	r1, r3
 80093ea:	f7fe fc21 	bl	8007c30 <USBD_LL_DataOutStage>
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	440b      	add	r3, r1
 8009416:	333c      	adds	r3, #60	; 0x3c
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	4619      	mov	r1, r3
 800941e:	f7fe fcba 	bl	8007d96 <USBD_LL_DataInStage>
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fdf4 	bl	8008026 <USBD_LL_SOF>
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800944e:	2301      	movs	r3, #1
 8009450:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d001      	beq.n	800945e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800945a:	f7f7 f906 	bl	800066a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009464:	7bfa      	ldrb	r2, [r7, #15]
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f7fe fd98 	bl	8007f9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fd40 	bl	8007efa <USBD_LL_Reset>
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fd93 	bl	8007fbe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094a0:	4b04      	ldr	r3, [pc, #16]	; (80094b4 <HAL_PCD_SuspendCallback+0x30>)
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	4a03      	ldr	r2, [pc, #12]	; (80094b4 <HAL_PCD_SuspendCallback+0x30>)
 80094a6:	f043 0306 	orr.w	r3, r3, #6
 80094aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	e000ed00 	.word	0xe000ed00

080094b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d007      	beq.n	80094d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <HAL_PCD_ResumeCallback+0x34>)
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	4a07      	ldr	r2, [pc, #28]	; (80094ec <HAL_PCD_ResumeCallback+0x34>)
 80094ce:	f023 0306 	bic.w	r3, r3, #6
 80094d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80094d4:	f000 fab6 	bl	8009a44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fd89 	bl	8007ff6 <USBD_LL_Resume>
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	e000ed00 	.word	0xe000ed00

080094f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80094f8:	f7f9 fbe2 	bl	8002cc0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80094fc:	4a2b      	ldr	r2, [pc, #172]	; (80095ac <USBD_LL_Init+0xbc>)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a29      	ldr	r2, [pc, #164]	; (80095ac <USBD_LL_Init+0xbc>)
 8009508:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800950c:	4b27      	ldr	r3, [pc, #156]	; (80095ac <USBD_LL_Init+0xbc>)
 800950e:	4a28      	ldr	r2, [pc, #160]	; (80095b0 <USBD_LL_Init+0xc0>)
 8009510:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009512:	4b26      	ldr	r3, [pc, #152]	; (80095ac <USBD_LL_Init+0xbc>)
 8009514:	2208      	movs	r2, #8
 8009516:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009518:	4b24      	ldr	r3, [pc, #144]	; (80095ac <USBD_LL_Init+0xbc>)
 800951a:	2202      	movs	r2, #2
 800951c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800951e:	4b23      	ldr	r3, [pc, #140]	; (80095ac <USBD_LL_Init+0xbc>)
 8009520:	2202      	movs	r2, #2
 8009522:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009524:	4b21      	ldr	r3, [pc, #132]	; (80095ac <USBD_LL_Init+0xbc>)
 8009526:	2200      	movs	r2, #0
 8009528:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800952a:	4b20      	ldr	r3, [pc, #128]	; (80095ac <USBD_LL_Init+0xbc>)
 800952c:	2200      	movs	r2, #0
 800952e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009530:	4b1e      	ldr	r3, [pc, #120]	; (80095ac <USBD_LL_Init+0xbc>)
 8009532:	2200      	movs	r2, #0
 8009534:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009536:	4b1d      	ldr	r3, [pc, #116]	; (80095ac <USBD_LL_Init+0xbc>)
 8009538:	2200      	movs	r2, #0
 800953a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800953c:	481b      	ldr	r0, [pc, #108]	; (80095ac <USBD_LL_Init+0xbc>)
 800953e:	f7f7 fddd 	bl	80010fc <HAL_PCD_Init>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009548:	f7f7 f88f 	bl	800066a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009552:	2318      	movs	r3, #24
 8009554:	2200      	movs	r2, #0
 8009556:	2100      	movs	r1, #0
 8009558:	f7f9 fae1 	bl	8002b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009562:	2358      	movs	r3, #88	; 0x58
 8009564:	2200      	movs	r2, #0
 8009566:	2180      	movs	r1, #128	; 0x80
 8009568:	f7f9 fad9 	bl	8002b1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009572:	23c0      	movs	r3, #192	; 0xc0
 8009574:	2200      	movs	r2, #0
 8009576:	2181      	movs	r1, #129	; 0x81
 8009578:	f7f9 fad1 	bl	8002b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009582:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009586:	2200      	movs	r2, #0
 8009588:	2101      	movs	r1, #1
 800958a:	f7f9 fac8 	bl	8002b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009598:	2200      	movs	r2, #0
 800959a:	2182      	movs	r1, #130	; 0x82
 800959c:	f7f9 fabf 	bl	8002b1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20000f80 	.word	0x20000f80
 80095b0:	40006800 	.word	0x40006800

080095b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f7 fe9c 	bl	8001308 <HAL_PCD_Start>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d816      	bhi.n	8009608 <USBD_LL_Start+0x54>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <USBD_LL_Start+0x2c>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	080095f1 	.word	0x080095f1
 80095e4:	080095f7 	.word	0x080095f7
 80095e8:	080095fd 	.word	0x080095fd
 80095ec:	08009603 	.word	0x08009603
    case HAL_OK :
      usb_status = USBD_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]
    break;
 80095f4:	e00b      	b.n	800960e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	73fb      	strb	r3, [r7, #15]
    break;
 80095fa:	e008      	b.n	800960e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095fc:	2301      	movs	r3, #1
 80095fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009600:	e005      	b.n	800960e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009602:	2303      	movs	r3, #3
 8009604:	73fb      	strb	r3, [r7, #15]
    break;
 8009606:	e002      	b.n	800960e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009608:	2303      	movs	r3, #3
 800960a:	73fb      	strb	r3, [r7, #15]
    break;
 800960c:	bf00      	nop
  }
  return usb_status;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	461a      	mov	r2, r3
 8009626:	4603      	mov	r3, r0
 8009628:	70fb      	strb	r3, [r7, #3]
 800962a:	460b      	mov	r3, r1
 800962c:	70bb      	strb	r3, [r7, #2]
 800962e:	4613      	mov	r3, r2
 8009630:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009640:	78bb      	ldrb	r3, [r7, #2]
 8009642:	883a      	ldrh	r2, [r7, #0]
 8009644:	78f9      	ldrb	r1, [r7, #3]
 8009646:	f7f7 ffcd 	bl	80015e4 <HAL_PCD_EP_Open>
 800964a:	4603      	mov	r3, r0
 800964c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	2b03      	cmp	r3, #3
 8009652:	d817      	bhi.n	8009684 <USBD_LL_OpenEP+0x6c>
 8009654:	a201      	add	r2, pc, #4	; (adr r2, 800965c <USBD_LL_OpenEP+0x44>)
 8009656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965a:	bf00      	nop
 800965c:	0800966d 	.word	0x0800966d
 8009660:	08009673 	.word	0x08009673
 8009664:	08009679 	.word	0x08009679
 8009668:	0800967f 	.word	0x0800967f
    case HAL_OK :
      usb_status = USBD_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]
    break;
 8009670:	e00b      	b.n	800968a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009672:	2303      	movs	r3, #3
 8009674:	73fb      	strb	r3, [r7, #15]
    break;
 8009676:	e008      	b.n	800968a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009678:	2301      	movs	r3, #1
 800967a:	73fb      	strb	r3, [r7, #15]
    break;
 800967c:	e005      	b.n	800968a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	73fb      	strb	r3, [r7, #15]
    break;
 8009682:	e002      	b.n	800968a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	73fb      	strb	r3, [r7, #15]
    break;
 8009688:	bf00      	nop
  }
  return usb_status;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096ae:	78fa      	ldrb	r2, [r7, #3]
 80096b0:	4611      	mov	r1, r2
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f7 fff3 	bl	800169e <HAL_PCD_EP_Close>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b03      	cmp	r3, #3
 80096c0:	d816      	bhi.n	80096f0 <USBD_LL_CloseEP+0x5c>
 80096c2:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <USBD_LL_CloseEP+0x34>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	080096d9 	.word	0x080096d9
 80096cc:	080096df 	.word	0x080096df
 80096d0:	080096e5 	.word	0x080096e5
 80096d4:	080096eb 	.word	0x080096eb
    case HAL_OK :
      usb_status = USBD_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
    break;
 80096dc:	e00b      	b.n	80096f6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096de:	2303      	movs	r3, #3
 80096e0:	73fb      	strb	r3, [r7, #15]
    break;
 80096e2:	e008      	b.n	80096f6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096e4:	2301      	movs	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
    break;
 80096e8:	e005      	b.n	80096f6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096ea:	2303      	movs	r3, #3
 80096ec:	73fb      	strb	r3, [r7, #15]
    break;
 80096ee:	e002      	b.n	80096f6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80096f0:	2303      	movs	r3, #3
 80096f2:	73fb      	strb	r3, [r7, #15]
    break;
 80096f4:	bf00      	nop
  }
  return usb_status;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800971a:	78fa      	ldrb	r2, [r7, #3]
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f7f8 f885 	bl	800182e <HAL_PCD_EP_SetStall>
 8009724:	4603      	mov	r3, r0
 8009726:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b03      	cmp	r3, #3
 800972c:	d816      	bhi.n	800975c <USBD_LL_StallEP+0x5c>
 800972e:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <USBD_LL_StallEP+0x34>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	08009745 	.word	0x08009745
 8009738:	0800974b 	.word	0x0800974b
 800973c:	08009751 	.word	0x08009751
 8009740:	08009757 	.word	0x08009757
    case HAL_OK :
      usb_status = USBD_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]
    break;
 8009748:	e00b      	b.n	8009762 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800974a:	2303      	movs	r3, #3
 800974c:	73fb      	strb	r3, [r7, #15]
    break;
 800974e:	e008      	b.n	8009762 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009750:	2301      	movs	r3, #1
 8009752:	73fb      	strb	r3, [r7, #15]
    break;
 8009754:	e005      	b.n	8009762 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009756:	2303      	movs	r3, #3
 8009758:	73fb      	strb	r3, [r7, #15]
    break;
 800975a:	e002      	b.n	8009762 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800975c:	2303      	movs	r3, #3
 800975e:	73fb      	strb	r3, [r7, #15]
    break;
 8009760:	bf00      	nop
  }
  return usb_status;
 8009762:	7bfb      	ldrb	r3, [r7, #15]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009786:	78fa      	ldrb	r2, [r7, #3]
 8009788:	4611      	mov	r1, r2
 800978a:	4618      	mov	r0, r3
 800978c:	f7f8 f8af 	bl	80018ee <HAL_PCD_EP_ClrStall>
 8009790:	4603      	mov	r3, r0
 8009792:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	2b03      	cmp	r3, #3
 8009798:	d816      	bhi.n	80097c8 <USBD_LL_ClearStallEP+0x5c>
 800979a:	a201      	add	r2, pc, #4	; (adr r2, 80097a0 <USBD_LL_ClearStallEP+0x34>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097b1 	.word	0x080097b1
 80097a4:	080097b7 	.word	0x080097b7
 80097a8:	080097bd 	.word	0x080097bd
 80097ac:	080097c3 	.word	0x080097c3
    case HAL_OK :
      usb_status = USBD_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
    break;
 80097b4:	e00b      	b.n	80097ce <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097b6:	2303      	movs	r3, #3
 80097b8:	73fb      	strb	r3, [r7, #15]
    break;
 80097ba:	e008      	b.n	80097ce <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097bc:	2301      	movs	r3, #1
 80097be:	73fb      	strb	r3, [r7, #15]
    break;
 80097c0:	e005      	b.n	80097ce <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097c2:	2303      	movs	r3, #3
 80097c4:	73fb      	strb	r3, [r7, #15]
    break;
 80097c6:	e002      	b.n	80097ce <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80097c8:	2303      	movs	r3, #3
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	bf00      	nop
  }
  return usb_status;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	da0c      	bge.n	800980e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	440b      	add	r3, r1
 8009808:	3302      	adds	r3, #2
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	e00b      	b.n	8009826 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009814:	68f9      	ldr	r1, [r7, #12]
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	440b      	add	r3, r1
 8009820:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009824:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
	...

08009834 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	4611      	mov	r1, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f7f7 fea1 	bl	800159a <HAL_PCD_SetAddress>
 8009858:	4603      	mov	r3, r0
 800985a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	2b03      	cmp	r3, #3
 8009860:	d816      	bhi.n	8009890 <USBD_LL_SetUSBAddress+0x5c>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <USBD_LL_SetUSBAddress+0x34>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	08009879 	.word	0x08009879
 800986c:	0800987f 	.word	0x0800987f
 8009870:	08009885 	.word	0x08009885
 8009874:	0800988b 	.word	0x0800988b
    case HAL_OK :
      usb_status = USBD_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
    break;
 800987c:	e00b      	b.n	8009896 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800987e:	2303      	movs	r3, #3
 8009880:	73fb      	strb	r3, [r7, #15]
    break;
 8009882:	e008      	b.n	8009896 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009884:	2301      	movs	r3, #1
 8009886:	73fb      	strb	r3, [r7, #15]
    break;
 8009888:	e005      	b.n	8009896 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800988a:	2303      	movs	r3, #3
 800988c:	73fb      	strb	r3, [r7, #15]
    break;
 800988e:	e002      	b.n	8009896 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009890:	2303      	movs	r3, #3
 8009892:	73fb      	strb	r3, [r7, #15]
    break;
 8009894:	bf00      	nop
  }
  return usb_status;
 8009896:	7bfb      	ldrb	r3, [r7, #15]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	603b      	str	r3, [r7, #0]
 80098ac:	460b      	mov	r3, r1
 80098ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098be:	7af9      	ldrb	r1, [r7, #11]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	f7f7 ff7c 	bl	80017c0 <HAL_PCD_EP_Transmit>
 80098c8:	4603      	mov	r3, r0
 80098ca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80098cc:	7dbb      	ldrb	r3, [r7, #22]
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d816      	bhi.n	8009900 <USBD_LL_Transmit+0x60>
 80098d2:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <USBD_LL_Transmit+0x38>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	080098e9 	.word	0x080098e9
 80098dc:	080098ef 	.word	0x080098ef
 80098e0:	080098f5 	.word	0x080098f5
 80098e4:	080098fb 	.word	0x080098fb
    case HAL_OK :
      usb_status = USBD_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	75fb      	strb	r3, [r7, #23]
    break;
 80098ec:	e00b      	b.n	8009906 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098ee:	2303      	movs	r3, #3
 80098f0:	75fb      	strb	r3, [r7, #23]
    break;
 80098f2:	e008      	b.n	8009906 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098f4:	2301      	movs	r3, #1
 80098f6:	75fb      	strb	r3, [r7, #23]
    break;
 80098f8:	e005      	b.n	8009906 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098fa:	2303      	movs	r3, #3
 80098fc:	75fb      	strb	r3, [r7, #23]
    break;
 80098fe:	e002      	b.n	8009906 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009900:	2303      	movs	r3, #3
 8009902:	75fb      	strb	r3, [r7, #23]
    break;
 8009904:	bf00      	nop
  }
  return usb_status;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	607a      	str	r2, [r7, #4]
 800991a:	603b      	str	r3, [r7, #0]
 800991c:	460b      	mov	r3, r1
 800991e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800992e:	7af9      	ldrb	r1, [r7, #11]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	f7f7 fefb 	bl	800172e <HAL_PCD_EP_Receive>
 8009938:	4603      	mov	r3, r0
 800993a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800993c:	7dbb      	ldrb	r3, [r7, #22]
 800993e:	2b03      	cmp	r3, #3
 8009940:	d816      	bhi.n	8009970 <USBD_LL_PrepareReceive+0x60>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <USBD_LL_PrepareReceive+0x38>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	08009959 	.word	0x08009959
 800994c:	0800995f 	.word	0x0800995f
 8009950:	08009965 	.word	0x08009965
 8009954:	0800996b 	.word	0x0800996b
    case HAL_OK :
      usb_status = USBD_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	75fb      	strb	r3, [r7, #23]
    break;
 800995c:	e00b      	b.n	8009976 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800995e:	2303      	movs	r3, #3
 8009960:	75fb      	strb	r3, [r7, #23]
    break;
 8009962:	e008      	b.n	8009976 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009964:	2301      	movs	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
    break;
 8009968:	e005      	b.n	8009976 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800996a:	2303      	movs	r3, #3
 800996c:	75fb      	strb	r3, [r7, #23]
    break;
 800996e:	e002      	b.n	8009976 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009970:	2303      	movs	r3, #3
 8009972:	75fb      	strb	r3, [r7, #23]
    break;
 8009974:	bf00      	nop
  }
  return usb_status;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009992:	78fa      	ldrb	r2, [r7, #3]
 8009994:	4611      	mov	r1, r2
 8009996:	4618      	mov	r0, r3
 8009998:	f7f7 fefa 	bl	8001790 <HAL_PCD_EP_GetRxCount>
 800999c:	4603      	mov	r3, r0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <HAL_PCDEx_LPM_Callback+0x18>
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d013      	beq.n	80099e6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80099be:	e023      	b.n	8009a08 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d007      	beq.n	80099d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099c8:	f000 f83c 	bl	8009a44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099cc:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <HAL_PCDEx_LPM_Callback+0x68>)
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	4a0f      	ldr	r2, [pc, #60]	; (8009a10 <HAL_PCDEx_LPM_Callback+0x68>)
 80099d2:	f023 0306 	bic.w	r3, r3, #6
 80099d6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fb09 	bl	8007ff6 <USBD_LL_Resume>
    break;
 80099e4:	e010      	b.n	8009a08 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fe fae6 	bl	8007fbe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d005      	beq.n	8009a06 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099fa:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <HAL_PCDEx_LPM_Callback+0x68>)
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	4a04      	ldr	r2, [pc, #16]	; (8009a10 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a00:	f043 0306 	orr.w	r3, r3, #6
 8009a04:	6113      	str	r3, [r2, #16]
    break;
 8009a06:	bf00      	nop
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	e000ed00 	.word	0xe000ed00

08009a14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a1c:	4b03      	ldr	r3, [pc, #12]	; (8009a2c <USBD_static_malloc+0x18>)
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	20001278 	.word	0x20001278

08009a30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]

}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a48:	f7f6 fdbd 	bl	80005c6 <SystemClock_Config>
}
 8009a4c:	bf00      	nop
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <memset>:
 8009a50:	4402      	add	r2, r0
 8009a52:	4603      	mov	r3, r0
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d100      	bne.n	8009a5a <memset+0xa>
 8009a58:	4770      	bx	lr
 8009a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a5e:	e7f9      	b.n	8009a54 <memset+0x4>

08009a60 <__libc_init_array>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4d0d      	ldr	r5, [pc, #52]	; (8009a98 <__libc_init_array+0x38>)
 8009a64:	4c0d      	ldr	r4, [pc, #52]	; (8009a9c <__libc_init_array+0x3c>)
 8009a66:	1b64      	subs	r4, r4, r5
 8009a68:	10a4      	asrs	r4, r4, #2
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	42a6      	cmp	r6, r4
 8009a6e:	d109      	bne.n	8009a84 <__libc_init_array+0x24>
 8009a70:	4d0b      	ldr	r5, [pc, #44]	; (8009aa0 <__libc_init_array+0x40>)
 8009a72:	4c0c      	ldr	r4, [pc, #48]	; (8009aa4 <__libc_init_array+0x44>)
 8009a74:	f000 f818 	bl	8009aa8 <_init>
 8009a78:	1b64      	subs	r4, r4, r5
 8009a7a:	10a4      	asrs	r4, r4, #2
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	42a6      	cmp	r6, r4
 8009a80:	d105      	bne.n	8009a8e <__libc_init_array+0x2e>
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a88:	4798      	blx	r3
 8009a8a:	3601      	adds	r6, #1
 8009a8c:	e7ee      	b.n	8009a6c <__libc_init_array+0xc>
 8009a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a92:	4798      	blx	r3
 8009a94:	3601      	adds	r6, #1
 8009a96:	e7f2      	b.n	8009a7e <__libc_init_array+0x1e>
 8009a98:	08009b58 	.word	0x08009b58
 8009a9c:	08009b58 	.word	0x08009b58
 8009aa0:	08009b58 	.word	0x08009b58
 8009aa4:	08009b5c 	.word	0x08009b5c

08009aa8 <_init>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	bf00      	nop
 8009aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aae:	bc08      	pop	{r3}
 8009ab0:	469e      	mov	lr, r3
 8009ab2:	4770      	bx	lr

08009ab4 <_fini>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	bf00      	nop
 8009ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aba:	bc08      	pop	{r3}
 8009abc:	469e      	mov	lr, r3
 8009abe:	4770      	bx	lr
