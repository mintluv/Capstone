
STM32F103DFUBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002cac  08002cac  00012cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d7c  08002d7c  00012d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  20000000  08002d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000de0  200000c0  08002e40  000200c0  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000ea0  08002e40  00020ea0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dc3d  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000036ec  00000000  00000000  0002dd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 000043a2  00000000  00000000  00031455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000968  00000000  00000000  000357f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a23  00000000  00000000  00036160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016b4c  00000000  00000000  00036b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011151  00000000  00000000  0004d6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0006d489  00000000  00000000  0005e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000168c  00000000  00000000  000cbcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  000cd338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c94 	.word	0x08002c94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08002c94 	.word	0x08002c94

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	781a      	ldrb	r2, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f2 	udiv	r3, r3, r2
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89a 	bl	800029c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4620      	mov	r0, r4
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 8000180:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
 8000186:	e7fc      	b.n	8000182 <HAL_InitTick+0x36>
 8000188:	20000000 	.word	0x20000000
 800018c:	2000006c 	.word	0x2000006c
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 face 	bl	800274c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000dc 	.word	0x200000dc

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b43      	subs	r3, r0, r5
 80001f6:	42a3      	cmp	r3, r4
 80001f8:	d3fa      	bcc.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4907      	ldr	r1, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800020e:	0412      	lsls	r2, r2, #16
 8000210:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800021c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf94      	ite	ls
 8000242:	2400      	movls	r4, #0
 8000244:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000246:	fa05 f303 	lsl.w	r3, r5, r3
 800024a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024e:	40a5      	lsls	r5, r4
 8000250:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) < 0)
 8000256:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000258:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	bfac      	ite	ge
 800025e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	4a07      	ldrlt	r2, [pc, #28]	; (8000280 <HAL_NVIC_SetPriority+0x5c>)
 8000264:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000268:	b2db      	uxtb	r3, r3
 800026a:	bfb5      	itete	lt
 800026c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	e000ed00 	.word	0xe000ed00
 8000280:	e000ed14 	.word	0xe000ed14

08000284 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000284:	2301      	movs	r3, #1
 8000286:	0941      	lsrs	r1, r0, #5
 8000288:	4a03      	ldr	r2, [pc, #12]	; (8000298 <HAL_NVIC_EnableIRQ+0x14>)
 800028a:	f000 001f 	and.w	r0, r0, #31
 800028e:	4083      	lsls	r3, r0
 8000290:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000e100 	.word	0xe000e100

0800029c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	3801      	subs	r0, #1
 800029e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a2:	d20b      	bcs.n	80002bc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	21f0      	movs	r1, #240	; 0xf0
 80002aa:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ae:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002bc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002be:	4770      	bx	lr
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002c8:	691a      	ldr	r2, [r3, #16]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ca:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002cc:	bf0c      	ite	eq
 80002ce:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002d2:	f022 0204 	bicne.w	r2, r2, #4
 80002d6:	611a      	str	r2, [r3, #16]
  }
}
 80002d8:	4770      	bx	lr

080002da <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80002da:	4770      	bx	lr

080002dc <HAL_SYSTICK_IRQHandler>:
{
 80002dc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002de:	f7ff fffc 	bl	80002da <HAL_SYSTICK_Callback>
}
 80002e2:	bd08      	pop	{r3, pc}

080002e4 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80002e4:	4a11      	ldr	r2, [pc, #68]	; (800032c <FLASH_SetErrorCode+0x48>)
 80002e6:	68d3      	ldr	r3, [r2, #12]
 80002e8:	f013 0310 	ands.w	r3, r3, #16
 80002ec:	d005      	beq.n	80002fa <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80002ee:	4910      	ldr	r1, [pc, #64]	; (8000330 <FLASH_SetErrorCode+0x4c>)
 80002f0:	69cb      	ldr	r3, [r1, #28]
 80002f2:	f043 0302 	orr.w	r3, r3, #2
 80002f6:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80002f8:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80002fa:	68d2      	ldr	r2, [r2, #12]
 80002fc:	0750      	lsls	r0, r2, #29
 80002fe:	d506      	bpl.n	800030e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000300:	490b      	ldr	r1, [pc, #44]	; (8000330 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000302:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000306:	69ca      	ldr	r2, [r1, #28]
 8000308:	f042 0201 	orr.w	r2, r2, #1
 800030c:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800030e:	4a07      	ldr	r2, [pc, #28]	; (800032c <FLASH_SetErrorCode+0x48>)
 8000310:	69d1      	ldr	r1, [r2, #28]
 8000312:	07c9      	lsls	r1, r1, #31
 8000314:	d508      	bpl.n	8000328 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000316:	4806      	ldr	r0, [pc, #24]	; (8000330 <FLASH_SetErrorCode+0x4c>)
 8000318:	69c1      	ldr	r1, [r0, #28]
 800031a:	f041 0104 	orr.w	r1, r1, #4
 800031e:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000320:	69d1      	ldr	r1, [r2, #28]
 8000322:	f021 0101 	bic.w	r1, r1, #1
 8000326:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000328:	60d3      	str	r3, [r2, #12]
}  
 800032a:	4770      	bx	lr
 800032c:	40022000 	.word	0x40022000
 8000330:	200000e0 	.word	0x200000e0

08000334 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_FLASH_Unlock+0x1c>)
 8000336:	6918      	ldr	r0, [r3, #16]
 8000338:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800033c:	d007      	beq.n	800034e <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <HAL_FLASH_Unlock+0x20>)
 8000340:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000342:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000346:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000348:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800034a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800034e:	4770      	bx	lr
 8000350:	40022000 	.word	0x40022000
 8000354:	45670123 	.word	0x45670123

08000358 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000358:	4a03      	ldr	r2, [pc, #12]	; (8000368 <HAL_FLASH_Lock+0x10>)
}
 800035a:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800035c:	6913      	ldr	r3, [r2, #16]
 800035e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000362:	6113      	str	r3, [r2, #16]
}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40022000 	.word	0x40022000

0800036c <FLASH_WaitForLastOperation>:
{
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000370:	f7ff ff2e 	bl	80001d0 <HAL_GetTick>
 8000374:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000376:	4c11      	ldr	r4, [pc, #68]	; (80003bc <FLASH_WaitForLastOperation+0x50>)
 8000378:	68e3      	ldr	r3, [r4, #12]
 800037a:	07d8      	lsls	r0, r3, #31
 800037c:	d412      	bmi.n	80003a4 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800037e:	68e3      	ldr	r3, [r4, #12]
 8000380:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000382:	bf44      	itt	mi
 8000384:	2320      	movmi	r3, #32
 8000386:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000388:	68e3      	ldr	r3, [r4, #12]
 800038a:	06da      	lsls	r2, r3, #27
 800038c:	d406      	bmi.n	800039c <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800038e:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000390:	07db      	lsls	r3, r3, #31
 8000392:	d403      	bmi.n	800039c <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000394:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000396:	f010 0004 	ands.w	r0, r0, #4
 800039a:	d007      	beq.n	80003ac <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 800039c:	f7ff ffa2 	bl	80002e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80003a0:	2001      	movs	r0, #1
 80003a2:	e003      	b.n	80003ac <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 80003a4:	1c6b      	adds	r3, r5, #1
 80003a6:	d0e7      	beq.n	8000378 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003a8:	b90d      	cbnz	r5, 80003ae <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 80003aa:	2003      	movs	r0, #3
}
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003ae:	f7ff ff0f 	bl	80001d0 <HAL_GetTick>
 80003b2:	1b80      	subs	r0, r0, r6
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	d9df      	bls.n	8000378 <FLASH_WaitForLastOperation+0xc>
 80003b8:	e7f7      	b.n	80003aa <FLASH_WaitForLastOperation+0x3e>
 80003ba:	bf00      	nop
 80003bc:	40022000 	.word	0x40022000

080003c0 <HAL_FLASH_Program>:
{
 80003c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80003c4:	f8df a094 	ldr.w	sl, [pc, #148]	; 800045c <HAL_FLASH_Program+0x9c>
{
 80003c8:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80003ca:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 80003ce:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80003d0:	2b01      	cmp	r3, #1
{
 80003d2:	4688      	mov	r8, r1
 80003d4:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80003d6:	d03f      	beq.n	8000458 <HAL_FLASH_Program+0x98>
 80003d8:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80003da:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80003de:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80003e2:	f7ff ffc3 	bl	800036c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80003e6:	bb90      	cbnz	r0, 800044e <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80003e8:	2d01      	cmp	r5, #1
 80003ea:	d003      	beq.n	80003f4 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 80003ec:	2d02      	cmp	r5, #2
 80003ee:	bf0c      	ite	eq
 80003f0:	2502      	moveq	r5, #2
 80003f2:	2504      	movne	r5, #4
 80003f4:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80003f6:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80003f8:	f8df b064 	ldr.w	fp, [pc, #100]	; 8000460 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80003fc:	0134      	lsls	r4, r6, #4
 80003fe:	f1c4 0120 	rsb	r1, r4, #32
 8000402:	f1a4 0220 	sub.w	r2, r4, #32
 8000406:	fa07 f101 	lsl.w	r1, r7, r1
 800040a:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800040e:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000412:	430c      	orrs	r4, r1
 8000414:	fa27 f202 	lsr.w	r2, r7, r2
 8000418:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800041a:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800041e:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000420:	f042 0201 	orr.w	r2, r2, #1
 8000424:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000428:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 800042c:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000430:	f7ff ff9c 	bl	800036c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000434:	f8db 2010 	ldr.w	r2, [fp, #16]
 8000438:	f022 0201 	bic.w	r2, r2, #1
 800043c:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8000440:	b928      	cbnz	r0, 800044e <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8000442:	3601      	adds	r6, #1
 8000444:	b2f2      	uxtb	r2, r6
 8000446:	4295      	cmp	r5, r2
 8000448:	f04f 0300 	mov.w	r3, #0
 800044c:	d8d6      	bhi.n	80003fc <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 800044e:	2300      	movs	r3, #0
 8000450:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8000454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000458:	2002      	movs	r0, #2
 800045a:	e7fb      	b.n	8000454 <HAL_FLASH_Program+0x94>
 800045c:	200000e0 	.word	0x200000e0
 8000460:	40022000 	.word	0x40022000

08000464 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000464:	2200      	movs	r2, #0
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <FLASH_PageErase+0x1c>)
 8000468:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800046a:	4b06      	ldr	r3, [pc, #24]	; (8000484 <FLASH_PageErase+0x20>)
 800046c:	691a      	ldr	r2, [r3, #16]
 800046e:	f042 0202 	orr.w	r2, r2, #2
 8000472:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000474:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000476:	691a      	ldr	r2, [r3, #16]
 8000478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800047c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800047e:	4770      	bx	lr
 8000480:	200000e0 	.word	0x200000e0
 8000484:	40022000 	.word	0x40022000

08000488 <HAL_FLASHEx_Erase>:
{
 8000488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800048c:	4f26      	ldr	r7, [pc, #152]	; (8000528 <HAL_FLASHEx_Erase+0xa0>)
{
 800048e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000490:	7e3b      	ldrb	r3, [r7, #24]
{
 8000492:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000494:	2b01      	cmp	r3, #1
 8000496:	d044      	beq.n	8000522 <HAL_FLASHEx_Erase+0x9a>
 8000498:	2401      	movs	r4, #1
 800049a:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800049c:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800049e:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d11a      	bne.n	80004dc <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004a6:	f7ff ff61 	bl	800036c <FLASH_WaitForLastOperation>
 80004aa:	b120      	cbz	r0, 80004b6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80004ac:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80004ae:	2300      	movs	r3, #0
 80004b0:	763b      	strb	r3, [r7, #24]
}
 80004b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80004b6:	4c1d      	ldr	r4, [pc, #116]	; (800052c <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80004b8:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80004ba:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004bc:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80004c0:	f043 0304 	orr.w	r3, r3, #4
 80004c4:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80004c6:	6923      	ldr	r3, [r4, #16]
 80004c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004cc:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004ce:	f7ff ff4d 	bl	800036c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80004d2:	6923      	ldr	r3, [r4, #16]
 80004d4:	f023 0304 	bic.w	r3, r3, #4
 80004d8:	6123      	str	r3, [r4, #16]
 80004da:	e7e8      	b.n	80004ae <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80004dc:	f7ff ff46 	bl	800036c <FLASH_WaitForLastOperation>
 80004e0:	2800      	cmp	r0, #0
 80004e2:	d1e3      	bne.n	80004ac <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80004ec:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80004ee:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80004f0:	4c0e      	ldr	r4, [pc, #56]	; (800052c <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80004f2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80004f6:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80004fa:	42b3      	cmp	r3, r6
 80004fc:	d9d7      	bls.n	80004ae <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80004fe:	4630      	mov	r0, r6
 8000500:	f7ff ffb0 	bl	8000464 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000508:	f7ff ff30 	bl	800036c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800050c:	6923      	ldr	r3, [r4, #16]
 800050e:	f023 0302 	bic.w	r3, r3, #2
 8000512:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000514:	b110      	cbz	r0, 800051c <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8000516:	f8c8 6000 	str.w	r6, [r8]
            break;
 800051a:	e7c8      	b.n	80004ae <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800051c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000520:	e7e7      	b.n	80004f2 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8000522:	2002      	movs	r0, #2
 8000524:	e7c5      	b.n	80004b2 <HAL_FLASHEx_Erase+0x2a>
 8000526:	bf00      	nop
 8000528:	200000e0 	.word	0x200000e0
 800052c:	40022000 	.word	0x40022000

08000530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000534:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000536:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000538:	4f64      	ldr	r7, [pc, #400]	; (80006cc <HAL_GPIO_Init+0x19c>)
 800053a:	4b65      	ldr	r3, [pc, #404]	; (80006d0 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 800053c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80006d4 <HAL_GPIO_Init+0x1a4>
 8000540:	f8df e194 	ldr.w	lr, [pc, #404]	; 80006d8 <HAL_GPIO_Init+0x1a8>
    ioposition = (0x01U << position);
 8000544:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000548:	680d      	ldr	r5, [r1, #0]
    ioposition = (0x01U << position);
 800054a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800054e:	ea08 0405 	and.w	r4, r8, r5
    if (iocurrent == ioposition)
 8000552:	ea38 0505 	bics.w	r5, r8, r5
 8000556:	d17a      	bne.n	800064e <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 8000558:	684d      	ldr	r5, [r1, #4]
 800055a:	2d03      	cmp	r5, #3
 800055c:	d807      	bhi.n	800056e <HAL_GPIO_Init+0x3e>
 800055e:	3d01      	subs	r5, #1
 8000560:	2d02      	cmp	r5, #2
 8000562:	f200 808d 	bhi.w	8000680 <HAL_GPIO_Init+0x150>
 8000566:	e8df f005 	tbb	[pc, r5]
 800056a:	a09b      	.short	0xa09b
 800056c:	a6          	.byte	0xa6
 800056d:	00          	.byte	0x00
 800056e:	2d12      	cmp	r5, #18
 8000570:	f000 809e 	beq.w	80006b0 <HAL_GPIO_Init+0x180>
 8000574:	d872      	bhi.n	800065c <HAL_GPIO_Init+0x12c>
 8000576:	2d11      	cmp	r5, #17
 8000578:	f000 8094 	beq.w	80006a4 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800057c:	2cff      	cmp	r4, #255	; 0xff
 800057e:	bf98      	it	ls
 8000580:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000582:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000586:	bf88      	it	hi
 8000588:	f100 0a04 	addhi.w	sl, r0, #4
 800058c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000590:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000594:	bf88      	it	hi
 8000596:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000598:	fa09 fb05 	lsl.w	fp, r9, r5
 800059c:	ea28 080b 	bic.w	r8, r8, fp
 80005a0:	fa02 f505 	lsl.w	r5, r2, r5
 80005a4:	ea48 0505 	orr.w	r5, r8, r5
 80005a8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ac:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80005b0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80005b4:	d04b      	beq.n	800064e <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	69bd      	ldr	r5, [r7, #24]
 80005b8:	f026 0803 	bic.w	r8, r6, #3
 80005bc:	f045 0501 	orr.w	r5, r5, #1
 80005c0:	61bd      	str	r5, [r7, #24]
 80005c2:	69bd      	ldr	r5, [r7, #24]
 80005c4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80005c8:	f005 0501 	and.w	r5, r5, #1
 80005cc:	9501      	str	r5, [sp, #4]
 80005ce:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005d2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80005dc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005e0:	fa09 f90b 	lsl.w	r9, r9, fp
 80005e4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005e8:	4d3c      	ldr	r5, [pc, #240]	; (80006dc <HAL_GPIO_Init+0x1ac>)
 80005ea:	42a8      	cmp	r0, r5
 80005ec:	d067      	beq.n	80006be <HAL_GPIO_Init+0x18e>
 80005ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005f2:	42a8      	cmp	r0, r5
 80005f4:	d065      	beq.n	80006c2 <HAL_GPIO_Init+0x192>
 80005f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005fa:	42a8      	cmp	r0, r5
 80005fc:	d063      	beq.n	80006c6 <HAL_GPIO_Init+0x196>
 80005fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000602:	42a8      	cmp	r0, r5
 8000604:	bf0c      	ite	eq
 8000606:	2503      	moveq	r5, #3
 8000608:	2504      	movne	r5, #4
 800060a:	fa05 f50b 	lsl.w	r5, r5, fp
 800060e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000612:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000616:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000618:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800061c:	bf14      	ite	ne
 800061e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000620:	43a5      	biceq	r5, r4
 8000622:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000624:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000626:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800062a:	bf14      	ite	ne
 800062c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062e:	43a5      	biceq	r5, r4
 8000630:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000632:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000634:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000638:	bf14      	ite	ne
 800063a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800063c:	43a5      	biceq	r5, r4
 800063e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000640:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000642:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000646:	bf14      	ite	ne
 8000648:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800064a:	43a5      	biceq	r5, r4
 800064c:	60dd      	str	r5, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800064e:	3601      	adds	r6, #1
 8000650:	2e10      	cmp	r6, #16
 8000652:	f47f af77 	bne.w	8000544 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000656:	b003      	add	sp, #12
 8000658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800065c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80006e0 <HAL_GPIO_Init+0x1b0>
 8000660:	454d      	cmp	r5, r9
 8000662:	d00d      	beq.n	8000680 <HAL_GPIO_Init+0x150>
 8000664:	d818      	bhi.n	8000698 <HAL_GPIO_Init+0x168>
 8000666:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800066a:	454d      	cmp	r5, r9
 800066c:	d008      	beq.n	8000680 <HAL_GPIO_Init+0x150>
 800066e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000672:	454d      	cmp	r5, r9
 8000674:	d004      	beq.n	8000680 <HAL_GPIO_Init+0x150>
 8000676:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800067a:	454d      	cmp	r5, r9
 800067c:	f47f af7e 	bne.w	800057c <HAL_GPIO_Init+0x4c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000680:	688a      	ldr	r2, [r1, #8]
 8000682:	b1d2      	cbz	r2, 80006ba <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000684:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000686:	bf08      	it	eq
 8000688:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800068c:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000690:	bf18      	it	ne
 8000692:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000696:	e771      	b.n	800057c <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 8000698:	4565      	cmp	r5, ip
 800069a:	d0f1      	beq.n	8000680 <HAL_GPIO_Init+0x150>
 800069c:	4575      	cmp	r5, lr
 800069e:	e7ed      	b.n	800067c <HAL_GPIO_Init+0x14c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006a0:	68ca      	ldr	r2, [r1, #12]
          break;
 80006a2:	e76b      	b.n	800057c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006a4:	68ca      	ldr	r2, [r1, #12]
 80006a6:	3204      	adds	r2, #4
          break;
 80006a8:	e768      	b.n	800057c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006aa:	68ca      	ldr	r2, [r1, #12]
 80006ac:	3208      	adds	r2, #8
          break;
 80006ae:	e765      	b.n	800057c <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006b0:	68ca      	ldr	r2, [r1, #12]
 80006b2:	320c      	adds	r2, #12
          break;
 80006b4:	e762      	b.n	800057c <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 80006b6:	2200      	movs	r2, #0
 80006b8:	e760      	b.n	800057c <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006ba:	2204      	movs	r2, #4
 80006bc:	e75e      	b.n	800057c <HAL_GPIO_Init+0x4c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006be:	2500      	movs	r5, #0
 80006c0:	e7a3      	b.n	800060a <HAL_GPIO_Init+0xda>
 80006c2:	2501      	movs	r5, #1
 80006c4:	e7a1      	b.n	800060a <HAL_GPIO_Init+0xda>
 80006c6:	2502      	movs	r5, #2
 80006c8:	e79f      	b.n	800060a <HAL_GPIO_Init+0xda>
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010400 	.word	0x40010400
 80006d4:	10310000 	.word	0x10310000
 80006d8:	10320000 	.word	0x10320000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	10220000 	.word	0x10220000

080006e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80006e4:	6883      	ldr	r3, [r0, #8]
 80006e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80006e8:	bf14      	ite	ne
 80006ea:	2001      	movne	r0, #1
 80006ec:	2000      	moveq	r0, #0
 80006ee:	4770      	bx	lr

080006f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80006f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80006f4:	4604      	mov	r4, r0
{
 80006f6:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d05e      	beq.n	80007ba <HAL_PCD_Init+0xca>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80006fc:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000700:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000704:	b91b      	cbnz	r3, 800070e <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000706:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800070a:	f002 f8c7 	bl	800289c <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 800070e:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000710:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000712:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000714:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000718:	f855 0b10 	ldr.w	r0, [r5], #16
 800071c:	f000 feba 	bl	8001494 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000724:	682b      	ldr	r3, [r5, #0]
 8000726:	f104 0804 	add.w	r8, r4, #4
 800072a:	6033      	str	r3, [r6, #0]
 800072c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000730:	6820      	ldr	r0, [r4, #0]
 8000732:	f000 fe9f 	bl	8001474 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000736:	2100      	movs	r1, #0
 8000738:	6820      	ldr	r0, [r4, #0]
 800073a:	f000 feb5 	bl	80014a8 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 800073e:	2100      	movs	r1, #0
 8000740:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000742:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000744:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000746:	4608      	mov	r0, r1
 8000748:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 800074c:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000750:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000752:	3101      	adds	r1, #1
 8000754:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].maxpacket =  0U;
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000756:	e9c2 000e 	strd	r0, r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].is_in = 1U;
 800075a:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800075e:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].xfer_len = 0U;
 8000762:	6410      	str	r0, [r2, #64]	; 0x40
  for (index = 0U; index < 15U ; index++)
 8000764:	f102 0220 	add.w	r2, r2, #32
 8000768:	d1f0      	bne.n	800074c <HAL_PCD_Init+0x5c>
  }
 
  for (index = 0U; index < 15U ; index++)
 800076a:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[index].is_in = 0U;
 800076c:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 800076e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000772:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000774:	3201      	adds	r2, #1
 8000776:	2a0f      	cmp	r2, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[index].maxpacket = 0U;
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000778:	e9c3 778e 	strd	r7, r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].is_in = 0U;
 800077c:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000780:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000784:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
  for (index = 0U; index < 15U ; index++)
 8000788:	f103 0320 	add.w	r3, r3, #32
 800078c:	d1ef      	bne.n	800076e <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800078e:	466e      	mov	r6, sp
 8000790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000792:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000794:	682b      	ldr	r3, [r5, #0]
 8000796:	6033      	str	r3, [r6, #0]
 8000798:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800079c:	6820      	ldr	r0, [r4, #0]
 800079e:	f000 fe85 	bl	80014ac <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 80007a2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80007a4:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80007a8:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80007aa:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 80007ae:	f001 f876 	bl	800189e <USB_DevDisconnect>
  return HAL_OK;
 80007b2:	2000      	movs	r0, #0
}
 80007b4:	b006      	add	sp, #24
 80007b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80007ba:	2001      	movs	r0, #1
 80007bc:	e7fa      	b.n	80007b4 <HAL_PCD_Init+0xc4>

080007be <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80007be:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80007c0:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80007c4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d00e      	beq.n	80007e8 <HAL_PCD_Start+0x2a>
 80007ca:	2101      	movs	r1, #1
 80007cc:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80007d0:	f002 f977 	bl	8002ac2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80007d4:	6820      	ldr	r0, [r4, #0]
 80007d6:	f001 f860 	bl	800189a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80007da:	6820      	ldr	r0, [r4, #0]
 80007dc:	f000 fe51 	bl	8001482 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 80007e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80007e8:	2002      	movs	r0, #2
 80007ea:	e7fc      	b.n	80007e6 <HAL_PCD_Start+0x28>

080007ec <HAL_PCD_Stop>:
  * @brief  Stop The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80007ec:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80007ee:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80007f2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d00f      	beq.n	8000818 <HAL_PCD_Stop+0x2c>
 80007f8:	2301      	movs	r3, #1
 80007fa:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  __HAL_PCD_DISABLE(hpcd);
 80007fe:	6800      	ldr	r0, [r0, #0]
 8000800:	f000 fe48 	bl	8001494 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8000804:	6820      	ldr	r0, [r4, #0]
 8000806:	f001 f837 	bl	8001878 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 800080a:	6820      	ldr	r0, [r4, #0]
 800080c:	f001 f847 	bl	800189e <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8000810:	2000      	movs	r0, #0
 8000812:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8000816:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000818:	2002      	movs	r0, #2
 800081a:	e7fc      	b.n	8000816 <HAL_PCD_Stop+0x2a>

0800081c <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800081c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800081e:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000822:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000824:	2a01      	cmp	r2, #1
 8000826:	d00b      	beq.n	8000840 <HAL_PCD_SetAddress+0x24>
 8000828:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800082a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800082e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_SetDevAddress(hpcd->Instance, address);
 8000832:	6800      	ldr	r0, [r0, #0]
 8000834:	f001 f82b 	bl	800188e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000838:	2000      	movs	r0, #0
 800083a:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 800083e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000840:	2002      	movs	r0, #2
 8000842:	e7fc      	b.n	800083e <HAL_PCD_SetAddress+0x22>

08000844 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000844:	b538      	push	{r3, r4, r5, lr}
 8000846:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000848:	b248      	sxtb	r0, r1
 800084a:	2800      	cmp	r0, #0
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800084c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000850:	bfb5      	itete	lt
 8000852:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000856:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800085a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800085c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000860:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000862:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000864:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8000866:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8000868:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 800086a:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
 800086e:	2b01      	cmp	r3, #1
 8000870:	d009      	beq.n	8000886 <HAL_PCD_EP_Open+0x42>
 8000872:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000874:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000876:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800087a:	f000 fe33 	bl	80014e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800087e:	2000      	movs	r0, #0
 8000880:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
}
 8000884:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000886:	2002      	movs	r0, #2
 8000888:	e7fc      	b.n	8000884 <HAL_PCD_EP_Open+0x40>

0800088a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800088a:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800088c:	2500      	movs	r5, #0
 800088e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8000892:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000896:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep->xfer_len = len;
 800089a:	e9c4 238f 	strd	r2, r3, [r4, #572]	; 0x23c
  ep->xfer_count = 0U;
 800089e:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
  ep->is_in = 0U;
 80008a2:	f884 5229 	strb.w	r5, [r4, #553]	; 0x229
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80008a6:	f504 710a 	add.w	r1, r4, #552	; 0x228
 80008aa:	6800      	ldr	r0, [r0, #0]
 80008ac:	f001 f80e 	bl	80018cc <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80008b0:	4628      	mov	r0, r5
 80008b2:	bd38      	pop	{r3, r4, r5, pc}

080008b4 <HAL_PCD_EP_Transmit>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80008b4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
 80008b8:	b538      	push	{r3, r4, r5, lr}
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80008ba:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80008be:	2500      	movs	r5, #0
  ep->xfer_len = len;
 80008c0:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->is_in = 1U;
  ep->num = ep_addr & 0x7FU;
 80008c4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->is_in = 1U;
 80008c8:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80008ca:	4621      	mov	r1, r4
  ep->xfer_count = 0U;
 80008cc:	6465      	str	r5, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80008ce:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80008d2:	3128      	adds	r1, #40	; 0x28
 80008d4:	6800      	ldr	r0, [r0, #0]
 80008d6:	f000 fff9 	bl	80018cc <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80008da:	4628      	mov	r0, r5
 80008dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080008e0 <HAL_PCD_IRQHandler>:
{ 
 80008e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80008e4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80008e6:	6800      	ldr	r0, [r0, #0]
 80008e8:	f000 ffdb 	bl	80018a2 <USB_ReadInterrupts>
 80008ec:	0400      	lsls	r0, r0, #16
 80008ee:	f100 8098 	bmi.w	8000a22 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80008f2:	6820      	ldr	r0, [r4, #0]
 80008f4:	f000 ffd5 	bl	80018a2 <USB_ReadInterrupts>
 80008f8:	0541      	lsls	r1, r0, #21
 80008fa:	d50f      	bpl.n	800091c <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008fc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80008fe:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000900:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000908:	041b      	lsls	r3, r3, #16
 800090a:	0c1b      	lsrs	r3, r3, #16
 800090c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000910:	f001 fffd 	bl	800290e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000914:	2100      	movs	r1, #0
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff ff80 	bl	800081c <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800091c:	6820      	ldr	r0, [r4, #0]
 800091e:	f000 ffc0 	bl	80018a2 <USB_ReadInterrupts>
 8000922:	0447      	lsls	r7, r0, #17
 8000924:	d508      	bpl.n	8000938 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000926:	6822      	ldr	r2, [r4, #0]
 8000928:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800092c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000930:	041b      	lsls	r3, r3, #16
 8000932:	0c1b      	lsrs	r3, r3, #16
 8000934:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000938:	6820      	ldr	r0, [r4, #0]
 800093a:	f000 ffb2 	bl	80018a2 <USB_ReadInterrupts>
 800093e:	0486      	lsls	r6, r0, #18
 8000940:	d508      	bpl.n	8000954 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000942:	6822      	ldr	r2, [r4, #0]
 8000944:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800094c:	041b      	lsls	r3, r3, #16
 800094e:	0c1b      	lsrs	r3, r3, #16
 8000950:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000954:	6820      	ldr	r0, [r4, #0]
 8000956:	f000 ffa4 	bl	80018a2 <USB_ReadInterrupts>
 800095a:	04c5      	lsls	r5, r0, #19
 800095c:	d51c      	bpl.n	8000998 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800095e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000960:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000962:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000966:	f023 0304 	bic.w	r3, r3, #4
 800096a:	041b      	lsls	r3, r3, #16
 800096c:	0c1b      	lsrs	r3, r3, #16
 800096e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000972:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000976:	f023 0308 	bic.w	r3, r3, #8
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	0c1b      	lsrs	r3, r3, #16
 800097e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000982:	f001 ffe1 	bl	8002948 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000986:	6822      	ldr	r2, [r4, #0]
 8000988:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800098c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000990:	041b      	lsls	r3, r3, #16
 8000992:	0c1b      	lsrs	r3, r3, #16
 8000994:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000998:	6820      	ldr	r0, [r4, #0]
 800099a:	f000 ff82 	bl	80018a2 <USB_ReadInterrupts>
 800099e:	0500      	lsls	r0, r0, #20
 80009a0:	d51d      	bpl.n	80009de <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80009a2:	6820      	ldr	r0, [r4, #0]
 80009a4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80009b2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80009b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009ba:	041b      	lsls	r3, r3, #16
 80009bc:	0c1b      	lsrs	r3, r3, #16
 80009be:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80009c2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80009d0:	f000 ff67 	bl	80018a2 <USB_ReadInterrupts>
 80009d4:	04c1      	lsls	r1, r0, #19
 80009d6:	d402      	bmi.n	80009de <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80009d8:	4620      	mov	r0, r4
 80009da:	f001 ffa5 	bl	8002928 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80009de:	6820      	ldr	r0, [r4, #0]
 80009e0:	f000 ff5f 	bl	80018a2 <USB_ReadInterrupts>
 80009e4:	0582      	lsls	r2, r0, #22
 80009e6:	d50b      	bpl.n	8000a00 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80009e8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80009ea:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80009ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009f4:	041b      	lsls	r3, r3, #16
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80009fc:	f001 ff83 	bl	8002906 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000a00:	6820      	ldr	r0, [r4, #0]
 8000a02:	f000 ff4e 	bl	80018a2 <USB_ReadInterrupts>
 8000a06:	05c3      	lsls	r3, r0, #23
 8000a08:	d508      	bpl.n	8000a1c <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000a0a:	6822      	ldr	r2, [r4, #0]
 8000a0c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a14:	041b      	lsls	r3, r3, #16
 8000a16:	0c1b      	lsrs	r3, r3, #16
 8000a18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000a1c:	b002      	add	sp, #8
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000a22:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a24:	4ecb      	ldr	r6, [pc, #812]	; (8000d54 <HAL_PCD_IRQHandler+0x474>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000a26:	4fcc      	ldr	r7, [pc, #816]	; (8000d58 <HAL_PCD_IRQHandler+0x478>)
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000a28:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8000d5c <HAL_PCD_IRQHandler+0x47c>
  __IO uint16_t wIstr = 0;  
 8000a2c:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000a30:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000a34:	6820      	ldr	r0, [r4, #0]
 8000a36:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	f57f af56 	bpl.w	80008f2 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000a46:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000a4a:	f015 050f 	ands.w	r5, r5, #15
 8000a4e:	f040 80aa 	bne.w	8000ba6 <HAL_PCD_IRQHandler+0x2c6>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a52:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a56:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a58:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a5c:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a5e:	d126      	bne.n	8000aae <HAL_PCD_IRQHandler+0x1ce>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a60:	4033      	ands	r3, r6
 8000a62:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a64:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a68:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000a7a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8000a80:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a82:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000a84:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8000a86:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000a88:	f001 ff36 	bl	80028f8 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000a8c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0cf      	beq.n	8000a34 <HAL_PCD_IRQHandler+0x154>
 8000a94:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000a96:	6821      	ldr	r1, [r4, #0]
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	d1cb      	bne.n	8000a34 <HAL_PCD_IRQHandler+0x154>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000a9c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000aa8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000aac:	e7c2      	b.n	8000a34 <HAL_PCD_IRQHandler+0x154>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000aae:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000ab2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ab6:	051a      	lsls	r2, r3, #20
 8000ab8:	d51f      	bpl.n	8000afa <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000aba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000abe:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ac8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000acc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000ad0:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ad8:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000adc:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000ae0:	f000 ffd6 	bl	8001a90 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000ae4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000ae6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000ae8:	8813      	ldrh	r3, [r2, #0]
 8000aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aee:	051b      	lsls	r3, r3, #20
 8000af0:	0d1b      	lsrs	r3, r3, #20
 8000af2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000af4:	f001 fef2 	bl	80028dc <HAL_PCD_SetupStageCallback>
 8000af8:	e79c      	b.n	8000a34 <HAL_PCD_IRQHandler+0x154>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000afa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000afe:	041b      	lsls	r3, r3, #16
 8000b00:	d598      	bpl.n	8000a34 <HAL_PCD_IRQHandler+0x154>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b02:	8803      	ldrh	r3, [r0, #0]
 8000b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b08:	051b      	lsls	r3, r3, #20
 8000b0a:	0d1b      	lsrs	r3, r3, #20
 8000b0c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b0e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b12:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b1c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b20:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b28:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000b2c:	b163      	cbz	r3, 8000b48 <HAL_PCD_IRQHandler+0x268>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000b2e:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000b32:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000b36:	f000 ffab 	bl	8001a90 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000b3a:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000b3e:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000b42:	4413      	add	r3, r2
 8000b44:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f001 fecc 	bl	80028e8 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b50:	6822      	ldr	r2, [r4, #0]
 8000b52:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000b56:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000b5a:	2d3e      	cmp	r5, #62	; 0x3e
 8000b5c:	b289      	uxth	r1, r1
 8000b5e:	f101 0106 	add.w	r1, r1, #6
 8000b62:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000b66:	d916      	bls.n	8000b96 <HAL_PCD_IRQHandler+0x2b6>
 8000b68:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000b6c:	06ed      	lsls	r5, r5, #27
 8000b6e:	bf04      	itt	eq
 8000b70:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000b74:	b29b      	uxtheq	r3, r3
 8000b76:	ea48 2383 	orr.w	r3, r8, r3, lsl #10
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000b80:	8813      	ldrh	r3, [r2, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	403b      	ands	r3, r7
 8000b86:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b92:	8013      	strh	r3, [r2, #0]
 8000b94:	e74e      	b.n	8000a34 <HAL_PCD_IRQHandler+0x154>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b96:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000b9a:	07ed      	lsls	r5, r5, #31
 8000b9c:	bf44      	itt	mi
 8000b9e:	3301      	addmi	r3, #1
 8000ba0:	b29b      	uxthmi	r3, r3
 8000ba2:	029b      	lsls	r3, r3, #10
 8000ba4:	e7e9      	b.n	8000b7a <HAL_PCD_IRQHandler+0x29a>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000ba6:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000bb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000bb4:	0419      	lsls	r1, r3, #16
 8000bb6:	d541      	bpl.n	8000c3c <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000bb8:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000bbc:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bc4:	051b      	lsls	r3, r3, #20
 8000bc6:	0d1b      	lsrs	r3, r3, #20
 8000bc8:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000bcc:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000bd0:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000bd4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d17a      	bne.n	8000cd2 <HAL_PCD_IRQHandler+0x3f2>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000bdc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000be0:	f891 c228 	ldrb.w	ip, [r1, #552]	; 0x228
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	3306      	adds	r3, #6
 8000be8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8000bec:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000bf0:	f3c3 0909 	ubfx	r9, r3, #0, #10
          if (count != 0U)
 8000bf4:	f1b9 0f00 	cmp.w	r9, #0
 8000bf8:	d006      	beq.n	8000c08 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000bfa:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000bfe:	464b      	mov	r3, r9
 8000c00:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000c04:	f000 ff44 	bl	8001a90 <USB_ReadPMA>
        ep->xfer_count+=count;
 8000c08:	eb04 010a 	add.w	r1, r4, sl
 8000c0c:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000c10:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000c14:	444b      	add	r3, r9
 8000c16:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000c1a:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000c1e:	444a      	add	r2, r9
 8000c20:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000c24:	b123      	cbz	r3, 8000c30 <HAL_PCD_IRQHandler+0x350>
 8000c26:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000c2a:	4581      	cmp	r9, r0
 8000c2c:	f080 808b 	bcs.w	8000d46 <HAL_PCD_IRQHandler+0x466>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000c30:	44a2      	add	sl, r4
 8000c32:	4620      	mov	r0, r4
 8000c34:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000c38:	f001 fe56 	bl	80028e8 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000c3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c40:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000c42:	061a      	lsls	r2, r3, #24
 8000c44:	f57f aef6 	bpl.w	8000a34 <HAL_PCD_IRQHandler+0x154>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c48:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000c4c:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4033      	ands	r3, r6
 8000c54:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c58:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000c5c:	ea4f 1945 	mov.w	r9, r5, lsl #5
 8000c60:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000c64:	3502      	adds	r5, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d17a      	bne.n	8000d60 <HAL_PCD_IRQHandler+0x480>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c6a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c6e:	f891 c028 	ldrb.w	ip, [r1, #40]	; 0x28
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3302      	adds	r3, #2
 8000c76:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8000c7a:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000c7e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c86:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000c88:	b11b      	cbz	r3, 8000c92 <HAL_PCD_IRQHandler+0x3b2>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000c8a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000c8c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000c8e:	f000 fe0e 	bl	80018ae <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c92:	6822      	ldr	r2, [r4, #0]
 8000c94:	44a1      	add	r9, r4
 8000c96:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000c9a:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000ca6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000caa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000cae:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff+=ep->xfer_count;
 8000cb6:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cb8:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000cbc:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000cc0:	4620      	mov	r0, r4
        ep->xfer_buff+=ep->xfer_count;
 8000cc2:	f8c9 203c 	str.w	r2, [r9, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8082 	bne.w	8000dd0 <HAL_PCD_IRQHandler+0x4f0>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000ccc:	f001 fe14 	bl	80028f8 <HAL_PCD_DataInStageCallback>
 8000cd0:	e6b0      	b.n	8000a34 <HAL_PCD_IRQHandler+0x154>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000cd2:	f891 c228 	ldrb.w	ip, [r1, #552]	; 0x228
 8000cd6:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000cda:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000cde:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ce2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4463      	add	r3, ip
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000cea:	d020      	beq.n	8000d2e <HAL_PCD_IRQHandler+0x44e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000cec:	3302      	adds	r3, #2
 8000cee:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000cf2:	f3c3 0909 	ubfx	r9, r3, #0, #10
            if (count != 0U)
 8000cf6:	f1b9 0f00 	cmp.w	r9, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_PCD_IRQHandler+0x42a>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d02:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000d06:	f000 fec3 	bl	8001a90 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000d0a:	eb04 030a 	add.w	r3, r4, sl
 8000d0e:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000d12:	6822      	ldr	r2, [r4, #0]
 8000d14:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d1c:	051b      	lsls	r3, r3, #20
 8000d1e:	0d1b      	lsrs	r3, r3, #20
 8000d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d28:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000d2c:	e76c      	b.n	8000c08 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d2e:	3306      	adds	r3, #6
 8000d30:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000d34:	f3c3 0909 	ubfx	r9, r3, #0, #10
            if (count != 0U)
 8000d38:	f1b9 0f00 	cmp.w	r9, #0
 8000d3c:	d0e5      	beq.n	8000d0a <HAL_PCD_IRQHandler+0x42a>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d3e:	464b      	mov	r3, r9
 8000d40:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000d44:	e7dd      	b.n	8000d02 <HAL_PCD_IRQHandler+0x422>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000d46:	4620      	mov	r0, r4
 8000d48:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000d4c:	f7ff fd9d 	bl	800088a <HAL_PCD_EP_Receive>
 8000d50:	e774      	b.n	8000c3c <HAL_PCD_IRQHandler+0x35c>
 8000d52:	bf00      	nop
 8000d54:	ffff8f0f 	.word	0xffff8f0f
 8000d58:	ffffbf8f 	.word	0xffffbf8f
 8000d5c:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d60:	f891 c028 	ldrb.w	ip, [r1, #40]	; 0x28
 8000d64:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d6c:	f013 0f40 	tst.w	r3, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d70:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4463      	add	r3, ip
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d78:	d01e      	beq.n	8000db8 <HAL_PCD_IRQHandler+0x4d8>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000d80:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d88:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000d8a:	b11b      	cbz	r3, 8000d94 <HAL_PCD_IRQHandler+0x4b4>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000d8c:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000d8e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000d90:	f000 fd8d 	bl	80018ae <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000d94:	eb04 0309 	add.w	r3, r4, r9
 8000d98:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000d9c:	6822      	ldr	r2, [r4, #0]
 8000d9e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000da6:	051b      	lsls	r3, r3, #20
 8000da8:	0d1b      	lsrs	r3, r3, #20
 8000daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000db6:	e76c      	b.n	8000c92 <HAL_PCD_IRQHandler+0x3b2>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000db8:	3306      	adds	r3, #6
 8000dba:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000dbe:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dc6:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0e3      	beq.n	8000d94 <HAL_PCD_IRQHandler+0x4b4>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000dcc:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000dce:	e7de      	b.n	8000d8e <HAL_PCD_IRQHandler+0x4ae>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000dd0:	f7ff fd70 	bl	80008b4 <HAL_PCD_EP_Transmit>
 8000dd4:	e62e      	b.n	8000a34 <HAL_PCD_IRQHandler+0x154>
 8000dd6:	bf00      	nop

08000dd8 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000dd8:	2201      	movs	r2, #1
{
 8000dda:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000ddc:	b24b      	sxtb	r3, r1
 8000dde:	2b00      	cmp	r3, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000de0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000de4:	bfb5      	itete	lt
 8000de6:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000dea:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dee:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000df0:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000df4:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 1U;
 8000df6:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000df8:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000dfa:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000dfc:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000e00:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00e      	beq.n	8000e24 <HAL_PCD_EP_SetStall+0x4c>
 8000e06:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000e0a:	6800      	ldr	r0, [r0, #0]
 8000e0c:	f000 fcc2 	bl	8001794 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000e10:	b925      	cbnz	r5, 8000e1c <HAL_PCD_EP_SetStall+0x44>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e12:	6820      	ldr	r0, [r4, #0]
 8000e14:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000e18:	f000 fd47 	bl	80018aa <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000e24:	2002      	movs	r0, #2
 8000e26:	e7fc      	b.n	8000e22 <HAL_PCD_EP_SetStall+0x4a>

08000e28 <HAL_PCD_EP_ClrStall>:
{
 8000e28:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000e2a:	2500      	movs	r5, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000e2c:	b24b      	sxtb	r3, r1
 8000e2e:	2b00      	cmp	r3, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e30:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8000e34:	bfb5      	itete	lt
 8000e36:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000e3a:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e3e:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000e40:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e44:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000e46:	708d      	strb	r5, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000e48:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e4a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000e4c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000e50:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d009      	beq.n	8000e6a <HAL_PCD_EP_ClrStall+0x42>
 8000e56:	2301      	movs	r3, #1
 8000e58:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000e5c:	6800      	ldr	r0, [r0, #0]
 8000e5e:	f000 fccb 	bl	80017f8 <USB_EPClearStall>
  return HAL_OK;
 8000e62:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd); 
 8000e64:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
}
 8000e68:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	e7fc      	b.n	8000e68 <HAL_PCD_EP_ClrStall+0x40>

08000e6e <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000e6e:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e72:	bf1b      	ittet	ne
 8000e74:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000e78:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e7c:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e80:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000e82:	bf08      	it	eq
 8000e84:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  if (ep_kind == PCD_SNG_BUF)
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000e88:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8000e8a:	b91a      	cbnz	r2, 8000e94 <HAL_PCDEx_PMAConfig+0x26>
    ep->doublebuffer = 0U;
 8000e8c:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8000e8e:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000e90:	2000      	movs	r0, #0
 8000e92:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000e94:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000e96:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000e98:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000e9a:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000e9c:	8103      	strh	r3, [r0, #8]
 8000e9e:	e7f7      	b.n	8000e90 <HAL_PCDEx_PMAConfig+0x22>

08000ea0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea0:	6803      	ldr	r3, [r0, #0]
{
 8000ea2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea6:	07db      	lsls	r3, r3, #31
{
 8000ea8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eaa:	d410      	bmi.n	8000ece <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	079f      	lsls	r7, r3, #30
 8000eb0:	d45e      	bmi.n	8000f70 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb2:	682b      	ldr	r3, [r5, #0]
 8000eb4:	0719      	lsls	r1, r3, #28
 8000eb6:	f100 8095 	bmi.w	8000fe4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	075a      	lsls	r2, r3, #29
 8000ebe:	f100 80c1 	bmi.w	8001044 <HAL_RCC_OscConfig+0x1a4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec2:	69ea      	ldr	r2, [r5, #28]
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 812d 	bne.w	8001124 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000eca:	2000      	movs	r0, #0
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ece:	4c91      	ldr	r4, [pc, #580]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d007      	beq.n	8000eea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eda:	6863      	ldr	r3, [r4, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d10c      	bne.n	8000efe <HAL_RCC_OscConfig+0x5e>
 8000ee4:	6863      	ldr	r3, [r4, #4]
 8000ee6:	03de      	lsls	r6, r3, #15
 8000ee8:	d509      	bpl.n	8000efe <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	039c      	lsls	r4, r3, #14
 8000eee:	d5dd      	bpl.n	8000eac <HAL_RCC_OscConfig+0xc>
 8000ef0:	686b      	ldr	r3, [r5, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1da      	bne.n	8000eac <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
}
 8000ef8:	b002      	add	sp, #8
 8000efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	686b      	ldr	r3, [r5, #4]
 8000f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f04:	d110      	bne.n	8000f28 <HAL_RCC_OscConfig+0x88>
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f0e:	f7ff f95f 	bl	80001d0 <HAL_GetTick>
 8000f12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	0398      	lsls	r0, r3, #14
 8000f18:	d4c8      	bmi.n	8000eac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1a:	f7ff f959 	bl	80001d0 <HAL_GetTick>
 8000f1e:	1b80      	subs	r0, r0, r6
 8000f20:	2864      	cmp	r0, #100	; 0x64
 8000f22:	d9f7      	bls.n	8000f14 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000f24:	2003      	movs	r0, #3
 8000f26:	e7e7      	b.n	8000ef8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f28:	b99b      	cbnz	r3, 8000f52 <HAL_RCC_OscConfig+0xb2>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f30:	6023      	str	r3, [r4, #0]
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f38:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f3a:	f7ff f949 	bl	80001d0 <HAL_GetTick>
 8000f3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	0399      	lsls	r1, r3, #14
 8000f44:	d5b2      	bpl.n	8000eac <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f46:	f7ff f943 	bl	80001d0 <HAL_GetTick>
 8000f4a:	1b80      	subs	r0, r0, r6
 8000f4c:	2864      	cmp	r0, #100	; 0x64
 8000f4e:	d9f7      	bls.n	8000f40 <HAL_RCC_OscConfig+0xa0>
 8000f50:	e7e8      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	d103      	bne.n	8000f62 <HAL_RCC_OscConfig+0xc2>
 8000f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5e:	6023      	str	r3, [r4, #0]
 8000f60:	e7d1      	b.n	8000f06 <HAL_RCC_OscConfig+0x66>
 8000f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f66:	6023      	str	r3, [r4, #0]
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6e:	e7cd      	b.n	8000f0c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f70:	4c68      	ldr	r4, [pc, #416]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	f013 0f0c 	tst.w	r3, #12
 8000f78:	d007      	beq.n	8000f8a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7a:	6863      	ldr	r3, [r4, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d110      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x106>
 8000f84:	6863      	ldr	r3, [r4, #4]
 8000f86:	03da      	lsls	r2, r3, #15
 8000f88:	d40d      	bmi.n	8000fa6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	079b      	lsls	r3, r3, #30
 8000f8e:	d502      	bpl.n	8000f96 <HAL_RCC_OscConfig+0xf6>
 8000f90:	692b      	ldr	r3, [r5, #16]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d1af      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	696a      	ldr	r2, [r5, #20]
 8000f9a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f9e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fa2:	6023      	str	r3, [r4, #0]
 8000fa4:	e785      	b.n	8000eb2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa6:	692a      	ldr	r2, [r5, #16]
 8000fa8:	4b5b      	ldr	r3, [pc, #364]	; (8001118 <HAL_RCC_OscConfig+0x278>)
 8000faa:	b16a      	cbz	r2, 8000fc8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fb0:	f7ff f90e 	bl	80001d0 <HAL_GetTick>
 8000fb4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	079f      	lsls	r7, r3, #30
 8000fba:	d4ec      	bmi.n	8000f96 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbc:	f7ff f908 	bl	80001d0 <HAL_GetTick>
 8000fc0:	1b80      	subs	r0, r0, r6
 8000fc2:	2802      	cmp	r0, #2
 8000fc4:	d9f7      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x116>
 8000fc6:	e7ad      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000fc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fca:	f7ff f901 	bl	80001d0 <HAL_GetTick>
 8000fce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	0798      	lsls	r0, r3, #30
 8000fd4:	f57f af6d 	bpl.w	8000eb2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd8:	f7ff f8fa 	bl	80001d0 <HAL_GetTick>
 8000fdc:	1b80      	subs	r0, r0, r6
 8000fde:	2802      	cmp	r0, #2
 8000fe0:	d9f6      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x130>
 8000fe2:	e79f      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe4:	69aa      	ldr	r2, [r5, #24]
 8000fe6:	4e4b      	ldr	r6, [pc, #300]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <HAL_RCC_OscConfig+0x278>)
 8000fea:	b1e2      	cbz	r2, 8001026 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8000fec:	2201      	movs	r2, #1
 8000fee:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000ff2:	f7ff f8ed 	bl	80001d0 <HAL_GetTick>
 8000ff6:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000ffa:	079b      	lsls	r3, r3, #30
 8000ffc:	d50d      	bpl.n	800101a <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ffe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <HAL_RCC_OscConfig+0x27c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	fbb3 f3f2 	udiv	r3, r3, r2
 800100a:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800100c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800100e:	9b01      	ldr	r3, [sp, #4]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	9201      	str	r2, [sp, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f9      	bne.n	800100c <HAL_RCC_OscConfig+0x16c>
 8001018:	e74f      	b.n	8000eba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101a:	f7ff f8d9 	bl	80001d0 <HAL_GetTick>
 800101e:	1b00      	subs	r0, r0, r4
 8001020:	2802      	cmp	r0, #2
 8001022:	d9e9      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x158>
 8001024:	e77e      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001026:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800102a:	f7ff f8d1 	bl	80001d0 <HAL_GetTick>
 800102e:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001030:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001032:	079f      	lsls	r7, r3, #30
 8001034:	f57f af41 	bpl.w	8000eba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001038:	f7ff f8ca 	bl	80001d0 <HAL_GetTick>
 800103c:	1b00      	subs	r0, r0, r4
 800103e:	2802      	cmp	r0, #2
 8001040:	d9f6      	bls.n	8001030 <HAL_RCC_OscConfig+0x190>
 8001042:	e76f      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001044:	4c33      	ldr	r4, [pc, #204]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 8001046:	69e3      	ldr	r3, [r4, #28]
 8001048:	00d8      	lsls	r0, r3, #3
 800104a:	d424      	bmi.n	8001096 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800104c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	69e3      	ldr	r3, [r4, #28]
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61e3      	str	r3, [r4, #28]
 8001056:	69e3      	ldr	r3, [r4, #28]
 8001058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001060:	4e2f      	ldr	r6, [pc, #188]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8001062:	6833      	ldr	r3, [r6, #0]
 8001064:	05d9      	lsls	r1, r3, #23
 8001066:	d518      	bpl.n	800109a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001068:	68eb      	ldr	r3, [r5, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d126      	bne.n	80010bc <HAL_RCC_OscConfig+0x21c>
 800106e:	6a23      	ldr	r3, [r4, #32]
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001076:	f7ff f8ab 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800107e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001080:	6a23      	ldr	r3, [r4, #32]
 8001082:	079b      	lsls	r3, r3, #30
 8001084:	d53f      	bpl.n	8001106 <HAL_RCC_OscConfig+0x266>
    if(pwrclkchanged == SET)
 8001086:	2f00      	cmp	r7, #0
 8001088:	f43f af1b 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800108c:	69e3      	ldr	r3, [r4, #28]
 800108e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001092:	61e3      	str	r3, [r4, #28]
 8001094:	e715      	b.n	8000ec2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001096:	2700      	movs	r7, #0
 8001098:	e7e2      	b.n	8001060 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800109a:	6833      	ldr	r3, [r6, #0]
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010a2:	f7ff f895 	bl	80001d0 <HAL_GetTick>
 80010a6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	6833      	ldr	r3, [r6, #0]
 80010aa:	05da      	lsls	r2, r3, #23
 80010ac:	d4dc      	bmi.n	8001068 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ae:	f7ff f88f 	bl	80001d0 <HAL_GetTick>
 80010b2:	eba0 0008 	sub.w	r0, r0, r8
 80010b6:	2864      	cmp	r0, #100	; 0x64
 80010b8:	d9f6      	bls.n	80010a8 <HAL_RCC_OscConfig+0x208>
 80010ba:	e733      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	b9ab      	cbnz	r3, 80010ea <HAL_RCC_OscConfig+0x24a>
 80010be:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	6223      	str	r3, [r4, #32]
 80010ca:	6a23      	ldr	r3, [r4, #32]
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010d2:	f7ff f87d 	bl	80001d0 <HAL_GetTick>
 80010d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	6a23      	ldr	r3, [r4, #32]
 80010da:	0798      	lsls	r0, r3, #30
 80010dc:	d5d3      	bpl.n	8001086 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff f877 	bl	80001d0 <HAL_GetTick>
 80010e2:	1b80      	subs	r0, r0, r6
 80010e4:	4540      	cmp	r0, r8
 80010e6:	d9f7      	bls.n	80010d8 <HAL_RCC_OscConfig+0x238>
 80010e8:	e71c      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ea:	2b05      	cmp	r3, #5
 80010ec:	6a23      	ldr	r3, [r4, #32]
 80010ee:	d103      	bne.n	80010f8 <HAL_RCC_OscConfig+0x258>
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6223      	str	r3, [r4, #32]
 80010f6:	e7ba      	b.n	800106e <HAL_RCC_OscConfig+0x1ce>
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6223      	str	r3, [r4, #32]
 80010fe:	6a23      	ldr	r3, [r4, #32]
 8001100:	f023 0304 	bic.w	r3, r3, #4
 8001104:	e7b6      	b.n	8001074 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff f863 	bl	80001d0 <HAL_GetTick>
 800110a:	1b80      	subs	r0, r0, r6
 800110c:	4540      	cmp	r0, r8
 800110e:	d9b7      	bls.n	8001080 <HAL_RCC_OscConfig+0x1e0>
 8001110:	e708      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	42420000 	.word	0x42420000
 800111c:	2000006c 	.word	0x2000006c
 8001120:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001124:	4c23      	ldr	r4, [pc, #140]	; (80011b4 <HAL_RCC_OscConfig+0x314>)
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	f003 030c 	and.w	r3, r3, #12
 800112c:	2b08      	cmp	r3, #8
 800112e:	f43f aee2 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x56>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001132:	2a02      	cmp	r2, #2
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_RCC_OscConfig+0x318>)
        __HAL_RCC_PLL_DISABLE();
 800113a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800113c:	d12c      	bne.n	8001198 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800113e:	f7ff f847 	bl	80001d0 <HAL_GetTick>
 8001142:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	0199      	lsls	r1, r3, #6
 8001148:	d420      	bmi.n	800118c <HAL_RCC_OscConfig+0x2ec>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800114a:	6a2b      	ldr	r3, [r5, #32]
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001150:	d105      	bne.n	800115e <HAL_RCC_OscConfig+0x2be>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001152:	6862      	ldr	r2, [r4, #4]
 8001154:	68a9      	ldr	r1, [r5, #8]
 8001156:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800115a:	430a      	orrs	r2, r1
 800115c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001160:	6862      	ldr	r2, [r4, #4]
 8001162:	430b      	orrs	r3, r1
 8001164:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001168:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800116a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800116c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_RCC_OscConfig+0x318>)
 8001170:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001172:	f7ff f82d 	bl	80001d0 <HAL_GetTick>
 8001176:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	019a      	lsls	r2, r3, #6
 800117c:	f53f aea5 	bmi.w	8000eca <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff f826 	bl	80001d0 <HAL_GetTick>
 8001184:	1b40      	subs	r0, r0, r5
 8001186:	2802      	cmp	r0, #2
 8001188:	d9f6      	bls.n	8001178 <HAL_RCC_OscConfig+0x2d8>
 800118a:	e6cb      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800118c:	f7ff f820 	bl	80001d0 <HAL_GetTick>
 8001190:	1b80      	subs	r0, r0, r6
 8001192:	2802      	cmp	r0, #2
 8001194:	d9d6      	bls.n	8001144 <HAL_RCC_OscConfig+0x2a4>
 8001196:	e6c5      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001198:	f7ff f81a 	bl	80001d0 <HAL_GetTick>
 800119c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	f57f ae92 	bpl.w	8000eca <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a6:	f7ff f813 	bl	80001d0 <HAL_GetTick>
 80011aa:	1b40      	subs	r0, r0, r5
 80011ac:	2802      	cmp	r0, #2
 80011ae:	d9f6      	bls.n	800119e <HAL_RCC_OscConfig+0x2fe>
 80011b0:	e6b8      	b.n	8000f24 <HAL_RCC_OscConfig+0x84>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	42420000 	.word	0x42420000

080011bc <HAL_RCC_GetSysClockFreq>:
{
 80011bc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80011c0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011c2:	ac02      	add	r4, sp, #8
 80011c4:	f103 0510 	add.w	r5, r3, #16
 80011c8:	4622      	mov	r2, r4
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	6859      	ldr	r1, [r3, #4]
 80011ce:	3308      	adds	r3, #8
 80011d0:	c203      	stmia	r2!, {r0, r1}
 80011d2:	42ab      	cmp	r3, r5
 80011d4:	4614      	mov	r4, r2
 80011d6:	d1f7      	bne.n	80011c8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011d8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80011dc:	4911      	ldr	r1, [pc, #68]	; (8001224 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011de:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80011e2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011e4:	f003 020c 	and.w	r2, r3, #12
 80011e8:	2a08      	cmp	r2, #8
 80011ea:	d117      	bne.n	800121c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ec:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011f0:	3218      	adds	r2, #24
 80011f2:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011f4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011f6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011fa:	d50c      	bpl.n	8001216 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011fc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001200:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001204:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001206:	3318      	adds	r3, #24
 8001208:	446b      	add	r3, sp
 800120a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800120e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001212:	b007      	add	sp, #28
 8001214:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_RCC_GetSysClockFreq+0x70>)
 8001218:	4358      	muls	r0, r3
 800121a:	e7fa      	b.n	8001212 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800121e:	e7f8      	b.n	8001212 <HAL_RCC_GetSysClockFreq+0x56>
 8001220:	08002cac 	.word	0x08002cac
 8001224:	40021000 	.word	0x40021000
 8001228:	007a1200 	.word	0x007a1200
 800122c:	003d0900 	.word	0x003d0900

08001230 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_RCC_ClockConfig+0x134>)
{
 8001232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001236:	6813      	ldr	r3, [r2, #0]
{
 8001238:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	428b      	cmp	r3, r1
{
 8001240:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001242:	d327      	bcc.n	8001294 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001244:	6822      	ldr	r2, [r4, #0]
 8001246:	0791      	lsls	r1, r2, #30
 8001248:	d431      	bmi.n	80012ae <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124a:	07d2      	lsls	r2, r2, #31
 800124c:	d437      	bmi.n	80012be <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800124e:	4a45      	ldr	r2, [pc, #276]	; (8001364 <HAL_RCC_ClockConfig+0x134>)
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	42ab      	cmp	r3, r5
 8001258:	d871      	bhi.n	800133e <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125a:	6822      	ldr	r2, [r4, #0]
 800125c:	4d42      	ldr	r5, [pc, #264]	; (8001368 <HAL_RCC_ClockConfig+0x138>)
 800125e:	f012 0f04 	tst.w	r2, #4
 8001262:	d177      	bne.n	8001354 <HAL_RCC_ClockConfig+0x124>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	0713      	lsls	r3, r2, #28
 8001266:	d506      	bpl.n	8001276 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001268:	686b      	ldr	r3, [r5, #4]
 800126a:	6922      	ldr	r2, [r4, #16]
 800126c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001270:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001274:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001276:	f7ff ffa1 	bl	80011bc <HAL_RCC_GetSysClockFreq>
 800127a:	686b      	ldr	r3, [r5, #4]
 800127c:	4a3b      	ldr	r2, [pc, #236]	; (800136c <HAL_RCC_ClockConfig+0x13c>)
 800127e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	40d8      	lsrs	r0, r3
 8001286:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <HAL_RCC_ClockConfig+0x140>)
 8001288:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f7fe ff5e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001290:	2000      	movs	r0, #0
 8001292:	e00a      	b.n	80012aa <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f023 0307 	bic.w	r3, r3, #7
 800129a:	430b      	orrs	r3, r1
 800129c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	428b      	cmp	r3, r1
 80012a6:	d0cd      	beq.n	8001244 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80012a8:	2001      	movs	r0, #1
}
 80012aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ae:	492e      	ldr	r1, [pc, #184]	; (8001368 <HAL_RCC_ClockConfig+0x138>)
 80012b0:	68a0      	ldr	r0, [r4, #8]
 80012b2:	684b      	ldr	r3, [r1, #4]
 80012b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012b8:	4303      	orrs	r3, r0
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e7c5      	b.n	800124a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012be:	6862      	ldr	r2, [r4, #4]
 80012c0:	4e29      	ldr	r6, [pc, #164]	; (8001368 <HAL_RCC_ClockConfig+0x138>)
 80012c2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c4:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	d11b      	bne.n	8001300 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	d0ec      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ce:	6873      	ldr	r3, [r6, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d4:	f023 0303 	bic.w	r3, r3, #3
 80012d8:	4313      	orrs	r3, r2
 80012da:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80012dc:	f7fe ff78 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80012e2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d113      	bne.n	8001310 <HAL_RCC_ClockConfig+0xe0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e8:	6873      	ldr	r3, [r6, #4]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d0ad      	beq.n	800124e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f2:	f7fe ff6d 	bl	80001d0 <HAL_GetTick>
 80012f6:	1bc0      	subs	r0, r0, r7
 80012f8:	4540      	cmp	r0, r8
 80012fa:	d9f5      	bls.n	80012e8 <HAL_RCC_ClockConfig+0xb8>
          return HAL_TIMEOUT;
 80012fc:	2003      	movs	r0, #3
 80012fe:	e7d4      	b.n	80012aa <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001300:	2a02      	cmp	r2, #2
 8001302:	d102      	bne.n	800130a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001304:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001308:	e7e0      	b.n	80012cc <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130a:	f013 0f02 	tst.w	r3, #2
 800130e:	e7dd      	b.n	80012cc <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001310:	2b02      	cmp	r3, #2
 8001312:	d10f      	bne.n	8001334 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001314:	6873      	ldr	r3, [r6, #4]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b08      	cmp	r3, #8
 800131c:	d097      	beq.n	800124e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131e:	f7fe ff57 	bl	80001d0 <HAL_GetTick>
 8001322:	1bc0      	subs	r0, r0, r7
 8001324:	4540      	cmp	r0, r8
 8001326:	d9f5      	bls.n	8001314 <HAL_RCC_ClockConfig+0xe4>
 8001328:	e7e8      	b.n	80012fc <HAL_RCC_ClockConfig+0xcc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132a:	f7fe ff51 	bl	80001d0 <HAL_GetTick>
 800132e:	1bc0      	subs	r0, r0, r7
 8001330:	4540      	cmp	r0, r8
 8001332:	d8e3      	bhi.n	80012fc <HAL_RCC_ClockConfig+0xcc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001334:	6873      	ldr	r3, [r6, #4]
 8001336:	f013 0f0c 	tst.w	r3, #12
 800133a:	d1f6      	bne.n	800132a <HAL_RCC_ClockConfig+0xfa>
 800133c:	e787      	b.n	800124e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	6813      	ldr	r3, [r2, #0]
 8001340:	f023 0307 	bic.w	r3, r3, #7
 8001344:	432b      	orrs	r3, r5
 8001346:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	42ab      	cmp	r3, r5
 8001350:	d1aa      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x78>
 8001352:	e782      	b.n	800125a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001354:	686b      	ldr	r3, [r5, #4]
 8001356:	68e1      	ldr	r1, [r4, #12]
 8001358:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800135c:	430b      	orrs	r3, r1
 800135e:	606b      	str	r3, [r5, #4]
 8001360:	e780      	b.n	8001264 <HAL_RCC_ClockConfig+0x34>
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000
 8001368:	40021000 	.word	0x40021000
 800136c:	08002cbd 	.word	0x08002cbd
 8001370:	2000006c 	.word	0x2000006c

08001374 <HAL_RCC_GetHCLKFreq>:
}
 8001374:	4b01      	ldr	r3, [pc, #4]	; (800137c <HAL_RCC_GetHCLKFreq+0x8>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000006c 	.word	0x2000006c

08001380 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001380:	6803      	ldr	r3, [r0, #0]
{
 8001382:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001386:	07d9      	lsls	r1, r3, #31
{
 8001388:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800138a:	d521      	bpl.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138c:	4c36      	ldr	r4, [pc, #216]	; (8001468 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800138e:	69e3      	ldr	r3, [r4, #28]
 8001390:	00da      	lsls	r2, r3, #3
 8001392:	d433      	bmi.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001394:	2601      	movs	r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	69e3      	ldr	r3, [r4, #28]
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	61e3      	str	r3, [r4, #28]
 800139e:	69e3      	ldr	r3, [r4, #28]
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	4f30      	ldr	r7, [pc, #192]	; (800146c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	d527      	bpl.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013b0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013b2:	686a      	ldr	r2, [r5, #4]
 80013b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013b8:	d136      	bne.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80013ba:	6a23      	ldr	r3, [r4, #32]
 80013bc:	686a      	ldr	r2, [r5, #4]
 80013be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013c2:	4313      	orrs	r3, r2
 80013c4:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013c6:	b11e      	cbz	r6, 80013d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c8:	69e3      	ldr	r3, [r4, #28]
 80013ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ce:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80013d0:	6828      	ldr	r0, [r5, #0]
 80013d2:	0783      	lsls	r3, r0, #30
 80013d4:	d506      	bpl.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013d6:	4924      	ldr	r1, [pc, #144]	; (8001468 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80013d8:	68ab      	ldr	r3, [r5, #8]
 80013da:	684a      	ldr	r2, [r1, #4]
 80013dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013e0:	431a      	orrs	r2, r3
 80013e2:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013e4:	f010 0010 	ands.w	r0, r0, #16
 80013e8:	d01b      	beq.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013ea:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80013ec:	68e9      	ldr	r1, [r5, #12]
 80013ee:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80013f0:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013f6:	430b      	orrs	r3, r1
 80013f8:	6053      	str	r3, [r2, #4]
 80013fa:	e012      	b.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 80013fc:	2600      	movs	r6, #0
 80013fe:	e7d3      	b.n	80013a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001408:	f7fe fee2 	bl	80001d0 <HAL_GetTick>
 800140c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	05d8      	lsls	r0, r3, #23
 8001412:	d4cd      	bmi.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001414:	f7fe fedc 	bl	80001d0 <HAL_GetTick>
 8001418:	eba0 0008 	sub.w	r0, r0, r8
 800141c:	2864      	cmp	r0, #100	; 0x64
 800141e:	d9f6      	bls.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8001420:	2003      	movs	r0, #3
}
 8001422:	b002      	add	sp, #8
 8001424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001428:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800142c:	429a      	cmp	r2, r3
 800142e:	d0c4      	beq.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001430:	2001      	movs	r0, #1
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001434:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001436:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800143a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800143c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001440:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8001444:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001446:	07d9      	lsls	r1, r3, #31
 8001448:	d5b7      	bpl.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800144a:	f7fe fec1 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001452:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	6a23      	ldr	r3, [r4, #32]
 8001456:	079a      	lsls	r2, r3, #30
 8001458:	d4af      	bmi.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7fe feb9 	bl	80001d0 <HAL_GetTick>
 800145e:	1bc0      	subs	r0, r0, r7
 8001460:	4540      	cmp	r0, r8
 8001462:	d9f7      	bls.n	8001454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001464:	e7dc      	b.n	8001420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	40007000 	.word	0x40007000
 8001470:	42420000 	.word	0x42420000

08001474 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001474:	b084      	sub	sp, #16
 8001476:	a801      	add	r0, sp, #4
 8001478:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800147c:	b004      	add	sp, #16
 800147e:	2000      	movs	r0, #0
 8001480:	4770      	bx	lr

08001482 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001482:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001486:	b29b      	uxth	r3, r3
 8001488:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800148c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001490:	2000      	movs	r0, #0
 8001492:	4770      	bx	lr

08001494 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001494:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001498:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800149c:	045b      	lsls	r3, r3, #17
 800149e:	0c5b      	lsrs	r3, r3, #17
 80014a0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80014a4:	2000      	movs	r0, #0
 80014a6:	4770      	bx	lr

080014a8 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80014a8:	2000      	movs	r0, #0
 80014aa:	4770      	bx	lr

080014ac <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80014ac:	b084      	sub	sp, #16
 80014ae:	b510      	push	{r4, lr}
 80014b0:	4604      	mov	r4, r0
 80014b2:	a803      	add	r0, sp, #12
 80014b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80014b8:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 80014c0:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80014c4:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80014c8:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80014cc:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80014d6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 80014da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014de:	b004      	add	sp, #16
 80014e0:	4770      	bx	lr
	...

080014e4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80014e6:	78cb      	ldrb	r3, [r1, #3]
 80014e8:	780a      	ldrb	r2, [r1, #0]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d80f      	bhi.n	800150e <USB_ActivateEndpoint+0x2a>
 80014ee:	e8df f003 	tbb	[pc, r3]
 80014f2:	6102      	.short	0x6102
 80014f4:	564d      	.short	0x564d
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80014f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80014fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80014fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	0c1b      	lsrs	r3, r3, #16
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 800150a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800150e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001512:	780b      	ldrb	r3, [r1, #0]
 8001514:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001518:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 800151c:	4014      	ands	r4, r2
 800151e:	431c      	orrs	r4, r3
 8001520:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001524:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001528:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
  
  if (ep->doublebuffer == 0) 
 800152c:	7a8e      	ldrb	r6, [r1, #10]
 800152e:	00dc      	lsls	r4, r3, #3
 8001530:	2e00      	cmp	r6, #0
 8001532:	f040 808a 	bne.w	800164a <USB_ActivateEndpoint+0x166>
  {
    if (ep->is_in)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001536:	888e      	ldrh	r6, [r1, #4]
    if (ep->is_in)
 8001538:	784f      	ldrb	r7, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800153a:	0876      	lsrs	r6, r6, #1
 800153c:	0076      	lsls	r6, r6, #1
    if (ep->is_in)
 800153e:	2f00      	cmp	r7, #0
 8001540:	d043      	beq.n	80015ca <USB_ActivateEndpoint+0xe6>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001542:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001546:	b289      	uxth	r1, r1
 8001548:	4421      	add	r1, r4
 800154a:	f845 6011 	str.w	r6, [r5, r1, lsl #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800154e:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001552:	0649      	lsls	r1, r1, #25
 8001554:	d508      	bpl.n	8001568 <USB_ActivateEndpoint+0x84>
 8001556:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 800155a:	400a      	ands	r2, r1
 800155c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001560:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001564:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001568:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800156c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001574:	0412      	lsls	r2, r2, #16
 8001576:	0c12      	lsrs	r2, r2, #16
 8001578:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800157c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001580:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001584:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001588:	2000      	movs	r0, #0
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800158c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001590:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	e7b5      	b.n	800150a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 800159e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015aa:	041b      	lsls	r3, r3, #16
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80015b2:	e7aa      	b.n	800150a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80015b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80015b8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015c0:	041b      	lsls	r3, r3, #16
 80015c2:	0c1b      	lsrs	r3, r3, #16
 80015c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c8:	e79f      	b.n	800150a <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80015ca:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015ce:	b292      	uxth	r2, r2
 80015d0:	4422      	add	r2, r4
 80015d2:	3204      	adds	r2, #4
 80015d4:	f845 6012 	str.w	r6, [r5, r2, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80015d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015dc:	6909      	ldr	r1, [r1, #16]
 80015de:	b292      	uxth	r2, r2
 80015e0:	3206      	adds	r2, #6
 80015e2:	293e      	cmp	r1, #62	; 0x3e
 80015e4:	4414      	add	r4, r2
 80015e6:	d928      	bls.n	800163a <USB_ActivateEndpoint+0x156>
 80015e8:	f3c1 164f 	ubfx	r6, r1, #5, #16
 80015ec:	06ca      	lsls	r2, r1, #27
 80015ee:	bf08      	it	eq
 80015f0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80015f4:	4a66      	ldr	r2, [pc, #408]	; (8001790 <USB_ActivateEndpoint+0x2ac>)
 80015f6:	bf08      	it	eq
 80015f8:	b2b6      	uxtheq	r6, r6
 80015fa:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80015fe:	b292      	uxth	r2, r2
 8001600:	f845 2014 	str.w	r2, [r5, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001604:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001608:	0456      	lsls	r6, r2, #17
 800160a:	d50b      	bpl.n	8001624 <USB_ActivateEndpoint+0x140>
 800160c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001610:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001614:	0512      	lsls	r2, r2, #20
 8001616:	0d12      	lsrs	r2, r2, #20
 8001618:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800161c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001620:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001624:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001628:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800162c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001630:	0412      	lsls	r2, r2, #16
 8001632:	0c12      	lsrs	r2, r2, #16
 8001634:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001638:	e7a0      	b.n	800157c <USB_ActivateEndpoint+0x98>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800163a:	f3c1 024f 	ubfx	r2, r1, #1, #16
 800163e:	07cf      	lsls	r7, r1, #31
 8001640:	bf44      	itt	mi
 8001642:	3201      	addmi	r2, #1
 8001644:	b292      	uxthmi	r2, r2
 8001646:	0292      	lsls	r2, r2, #10
 8001648:	e7d9      	b.n	80015fe <USB_ActivateEndpoint+0x11a>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800164a:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 800164e:	f426 76f8 	bic.w	r6, r6, #496	; 0x1f0
 8001652:	0536      	lsls	r6, r6, #20
 8001654:	0d36      	lsrs	r6, r6, #20
 8001656:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 800165a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 800165e:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001662:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001666:	88cf      	ldrh	r7, [r1, #6]
 8001668:	b2b6      	uxth	r6, r6
 800166a:	087f      	lsrs	r7, r7, #1
 800166c:	4426      	add	r6, r4
 800166e:	007f      	lsls	r7, r7, #1
 8001670:	f845 7016 	str.w	r7, [r5, r6, lsl #1]
 8001674:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001678:	b2b6      	uxth	r6, r6
 800167a:	4434      	add	r4, r6
 800167c:	890e      	ldrh	r6, [r1, #8]
 800167e:	3404      	adds	r4, #4
 8001680:	0876      	lsrs	r6, r6, #1
 8001682:	0076      	lsls	r6, r6, #1
 8001684:	f845 6014 	str.w	r6, [r5, r4, lsl #1]
    if (ep->is_in==0)
 8001688:	7849      	ldrb	r1, [r1, #1]
 800168a:	2900      	cmp	r1, #0
 800168c:	d143      	bne.n	8001716 <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800168e:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001692:	044d      	lsls	r5, r1, #17
 8001694:	d508      	bpl.n	80016a8 <USB_ActivateEndpoint+0x1c4>
 8001696:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 800169a:	400a      	ands	r2, r1
 800169c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80016a8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016ac:	0654      	lsls	r4, r2, #25
 80016ae:	d50b      	bpl.n	80016c8 <USB_ActivateEndpoint+0x1e4>
 80016b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016b8:	0512      	lsls	r2, r2, #20
 80016ba:	0d12      	lsrs	r2, r2, #20
 80016bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016c0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80016c4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80016c8:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80016cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016d4:	0512      	lsls	r2, r2, #20
 80016d6:	0d12      	lsrs	r2, r2, #20
 80016d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80016e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80016e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80016e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016f0:	0412      	lsls	r2, r2, #16
 80016f2:	0c12      	lsrs	r2, r2, #16
 80016f4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80016f8:	430a      	orrs	r2, r1
 80016fa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80016fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001702:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800170a:	0412      	lsls	r2, r2, #16
 800170c:	0c12      	lsrs	r2, r2, #16
 800170e:	4311      	orrs	r1, r2
 8001710:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8001714:	e738      	b.n	8001588 <USB_ActivateEndpoint+0xa4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001716:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 800171a:	0449      	lsls	r1, r1, #17
 800171c:	d508      	bpl.n	8001730 <USB_ActivateEndpoint+0x24c>
 800171e:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001722:	400a      	ands	r2, r1
 8001724:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800172c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001730:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001734:	0652      	lsls	r2, r2, #25
 8001736:	d50b      	bpl.n	8001750 <USB_ActivateEndpoint+0x26c>
 8001738:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800173c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001740:	0512      	lsls	r2, r2, #20
 8001742:	0d12      	lsrs	r2, r2, #20
 8001744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001748:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800174c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001750:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8001754:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001758:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800175c:	0512      	lsls	r2, r2, #20
 800175e:	0d12      	lsrs	r2, r2, #20
 8001760:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001764:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001768:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800176c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001770:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001778:	0412      	lsls	r2, r2, #16
 800177a:	0c12      	lsrs	r2, r2, #16
 800177c:	430a      	orrs	r2, r1
 800177e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001782:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001786:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800178a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800178e:	e7bc      	b.n	800170a <USB_ActivateEndpoint+0x226>
 8001790:	ffff8000 	.word	0xffff8000

08001794 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001794:	780a      	ldrb	r2, [r1, #0]
 8001796:	b98a      	cbnz	r2, 80017bc <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001798:	8803      	ldrh	r3, [r0, #0]
 800179a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800179e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017aa:	f083 0310 	eor.w	r3, r3, #16
 80017ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b6:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 80017b8:	2000      	movs	r0, #0
 80017ba:	4770      	bx	lr
    if (ep->is_in)
 80017bc:	784b      	ldrb	r3, [r1, #1]
 80017be:	b183      	cbz	r3, 80017e2 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80017c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017cc:	041b      	lsls	r3, r3, #16
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80017d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80017e0:	e7ea      	b.n	80017b8 <USB_EPSetStall+0x24>
 80017e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	0c1b      	lsrs	r3, r3, #16
 80017f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017f6:	e7ed      	b.n	80017d4 <USB_EPSetStall+0x40>

080017f8 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80017f8:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017fa:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in)
 80017fc:	b30b      	cbz	r3, 8001842 <USB_EPClearStall+0x4a>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001802:	0659      	lsls	r1, r3, #25
 8001804:	d50b      	bpl.n	800181e <USB_EPClearStall+0x26>
 8001806:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800180a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800180e:	051b      	lsls	r3, r3, #20
 8001810:	0d1b      	lsrs	r3, r3, #20
 8001812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001816:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800181a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800181e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	0c1b      	lsrs	r3, r3, #16
 800182e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 800183e:	2000      	movs	r0, #0
 8001840:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001842:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001846:	045b      	lsls	r3, r3, #17
 8001848:	d50b      	bpl.n	8001862 <USB_EPClearStall+0x6a>
 800184a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800184e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001852:	051b      	lsls	r3, r3, #20
 8001854:	0d1b      	lsrs	r3, r3, #20
 8001856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800185a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001862:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800186a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186e:	041b      	lsls	r3, r3, #16
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001876:	e7dc      	b.n	8001832 <USB_EPClearStall+0x3a>

08001878 <USB_StopDevice>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 8001878:	2201      	movs	r2, #1
{
 800187a:	4603      	mov	r3, r0
  USBx->CNTR = USB_CNTR_FRES;
 800187c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  
  /* clear interrupt status register */
  USBx->ISTR = 0;
 8001880:	2000      	movs	r0, #0
  
  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 8001882:	2203      	movs	r2, #3
  USBx->ISTR = 0;
 8001884:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 8001888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
}
 800188c:	4770      	bx	lr

0800188e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 800188e:	b911      	cbnz	r1, 8001896 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001896:	2000      	movs	r0, #0
 8001898:	4770      	bx	lr

0800189a <USB_DevConnect>:
 800189a:	2000      	movs	r0, #0
 800189c:	4770      	bx	lr

0800189e <USB_DevDisconnect>:
 800189e:	2000      	movs	r0, #0
 80018a0:	4770      	bx	lr

080018a2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80018a2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80018a6:	b280      	uxth	r0, r0
 80018a8:	4770      	bx	lr

080018aa <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80018aa:	2000      	movs	r0, #0
 80018ac:	4770      	bx	lr

080018ae <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80018ae:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80018b0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80018b4:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80018b6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80018ba:	b903      	cbnz	r3, 80018be <USB_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80018bc:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80018be:	f831 0b02 	ldrh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 80018c2:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 80018c4:	f822 0b04 	strh.w	r0, [r2], #4
  for (index = nbytes; index != 0; index--)
 80018c8:	e7f7      	b.n	80018ba <USB_WritePMA+0xc>
	...

080018cc <USB_EPStartXfer>:
{
 80018cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1)
 80018ce:	784a      	ldrb	r2, [r1, #1]
{
 80018d0:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 80018d2:	2a01      	cmp	r2, #1
{
 80018d4:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 80018d6:	698c      	ldr	r4, [r1, #24]
    if (ep->xfer_len > ep->maxpacket)
 80018d8:	690b      	ldr	r3, [r1, #16]
 80018da:	7a88      	ldrb	r0, [r1, #10]
  if (ep->is_in == 1)
 80018dc:	d15b      	bne.n	8001996 <USB_EPStartXfer+0xca>
    if (ep->xfer_len > ep->maxpacket)
 80018de:	429c      	cmp	r4, r3
      ep->xfer_len-=len; 
 80018e0:	bf8a      	itet	hi
 80018e2:	1ae2      	subhi	r2, r4, r3
      ep->xfer_len =0;
 80018e4:	2200      	movls	r2, #0
 80018e6:	461c      	movhi	r4, r3
 80018e8:	618a      	str	r2, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80018ea:	b2a3      	uxth	r3, r4
 80018ec:	6949      	ldr	r1, [r1, #20]
 80018ee:	f505 6780 	add.w	r7, r5, #1024	; 0x400
    if (ep->doublebuffer == 0) 
 80018f2:	b9f8      	cbnz	r0, 8001934 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80018f4:	88b2      	ldrh	r2, [r6, #4]
 80018f6:	4628      	mov	r0, r5
 80018f8:	f7ff ffd9 	bl	80018ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80018fc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001900:	7832      	ldrb	r2, [r6, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	3302      	adds	r3, #2
 8001906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800190a:	f847 4013 	str.w	r4, [r7, r3, lsl #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800190e:	7832      	ldrb	r2, [r6, #0]
 8001910:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	0c1b      	lsrs	r3, r3, #16
 8001920:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 800192c:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800192e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001934:	7830      	ldrb	r0, [r6, #0]
 8001936:	f835 2020 	ldrh.w	r2, [r5, r0, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800193a:	00c0      	lsls	r0, r0, #3
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800193c:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001940:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001944:	b292      	uxth	r2, r2
 8001946:	4402      	add	r2, r0
 8001948:	f102 0202 	add.w	r2, r2, #2
 800194c:	f847 4012 	str.w	r4, [r7, r2, lsl #1]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001950:	4628      	mov	r0, r5
        pmabuffer = ep->pmaaddr1;
 8001952:	bf14      	ite	ne
 8001954:	8932      	ldrhne	r2, [r6, #8]
        pmabuffer = ep->pmaaddr0;
 8001956:	88f2      	ldrheq	r2, [r6, #6]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001958:	f7ff ffa9 	bl	80018ae <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800195c:	7873      	ldrb	r3, [r6, #1]
 800195e:	7832      	ldrb	r2, [r6, #0]
 8001960:	b963      	cbnz	r3, 800197c <USB_EPStartXfer+0xb0>
 8001962:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800196a:	051b      	lsls	r3, r3, #20
 800196c:	0d1b      	lsrs	r3, r3, #20
 800196e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001972:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001976:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800197a:	e7c8      	b.n	800190e <USB_EPStartXfer+0x42>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d1c6      	bne.n	800190e <USB_EPStartXfer+0x42>
 8001980:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001988:	051b      	lsls	r3, r3, #20
 800198a:	0d1b      	lsrs	r3, r3, #20
 800198c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	e7ef      	b.n	8001976 <USB_EPStartXfer+0xaa>
    if (ep->xfer_len > ep->maxpacket)
 8001996:	429c      	cmp	r4, r3
      ep->xfer_len =0;
 8001998:	bf94      	ite	ls
 800199a:	2100      	movls	r1, #0
      ep->xfer_len-=len; 
 800199c:	1ae1      	subhi	r1, r4, r3
 800199e:	61b1      	str	r1, [r6, #24]
 80019a0:	bf88      	it	hi
 80019a2:	461c      	movhi	r4, r3
    if (ep->doublebuffer == 0) 
 80019a4:	7833      	ldrb	r3, [r6, #0]
 80019a6:	bb60      	cbnz	r0, 8001a02 <USB_EPStartXfer+0x136>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80019a8:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80019ac:	2c3e      	cmp	r4, #62	; 0x3e
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f102 0206 	add.w	r2, r2, #6
 80019b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80019b8:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80019bc:	d919      	bls.n	80019f2 <USB_EPStartXfer+0x126>
 80019be:	f3c4 114f 	ubfx	r1, r4, #5, #16
 80019c2:	06e4      	lsls	r4, r4, #27
 80019c4:	bf08      	it	eq
 80019c6:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <USB_EPStartXfer+0x1c0>)
 80019cc:	bf08      	it	eq
 80019ce:	b289      	uxtheq	r1, r1
 80019d0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80019da:	7832      	ldrb	r2, [r6, #0]
 80019dc:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80019e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	0c1b      	lsrs	r3, r3, #16
 80019ec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80019f0:	e798      	b.n	8001924 <USB_EPStartXfer+0x58>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80019f2:	f3c4 034f 	ubfx	r3, r4, #1, #16
 80019f6:	07e1      	lsls	r1, r4, #31
 80019f8:	bf44      	itt	mi
 80019fa:	3301      	addmi	r3, #1
 80019fc:	b29b      	uxthmi	r3, r3
 80019fe:	029b      	lsls	r3, r3, #10
 8001a00:	e7e8      	b.n	80019d4 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	d1e9      	bne.n	80019da <USB_EPStartXfer+0x10e>
 8001a06:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001a0a:	2c3e      	cmp	r4, #62	; 0x3e
 8001a0c:	b289      	uxth	r1, r1
 8001a0e:	f101 0102 	add.w	r1, r1, #2
 8001a12:	ea4f 00c3 	mov.w	r0, r3, lsl #3
 8001a16:	f505 6280 	add.w	r2, r5, #1024	; 0x400
 8001a1a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001a1e:	d91d      	bls.n	8001a5c <USB_EPStartXfer+0x190>
 8001a20:	f3c4 174f 	ubfx	r7, r4, #5, #16
 8001a24:	06e3      	lsls	r3, r4, #27
 8001a26:	bf08      	it	eq
 8001a28:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <USB_EPStartXfer+0x1c0>)
 8001a2e:	bf08      	it	eq
 8001a30:	b2bf      	uxtheq	r7, r7
 8001a32:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f842 3011 	str.w	r3, [r2, r1, lsl #1]
 8001a3c:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001a40:	2c3e      	cmp	r4, #62	; 0x3e
 8001a42:	b289      	uxth	r1, r1
 8001a44:	f101 0106 	add.w	r1, r1, #6
 8001a48:	4401      	add	r1, r0
 8001a4a:	d80f      	bhi.n	8001a6c <USB_EPStartXfer+0x1a0>
 8001a4c:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8001a50:	07e0      	lsls	r0, r4, #31
 8001a52:	bf44      	itt	mi
 8001a54:	3301      	addmi	r3, #1
 8001a56:	b29b      	uxthmi	r3, r3
 8001a58:	029b      	lsls	r3, r3, #10
 8001a5a:	e012      	b.n	8001a82 <USB_EPStartXfer+0x1b6>
 8001a5c:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8001a60:	07e7      	lsls	r7, r4, #31
 8001a62:	bf44      	itt	mi
 8001a64:	3301      	addmi	r3, #1
 8001a66:	b29b      	uxthmi	r3, r3
 8001a68:	029b      	lsls	r3, r3, #10
 8001a6a:	e7e4      	b.n	8001a36 <USB_EPStartXfer+0x16a>
 8001a6c:	f3c4 104f 	ubfx	r0, r4, #5, #16
 8001a70:	06e4      	lsls	r4, r4, #27
 8001a72:	bf08      	it	eq
 8001a74:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <USB_EPStartXfer+0x1c0>)
 8001a7a:	bf08      	it	eq
 8001a7c:	b280      	uxtheq	r0, r0
 8001a7e:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f842 3011 	str.w	r3, [r2, r1, lsl #1]
 8001a88:	e7a7      	b.n	80019da <USB_EPStartXfer+0x10e>
 8001a8a:	bf00      	nop
 8001a8c:	ffff8000 	.word	0xffff8000

08001a90 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001a90:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001a92:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001a96:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001a98:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001a9c:	b903      	cbnz	r3, 8001aa0 <USB_ReadPMA+0x10>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001a9e:	4770      	bx	lr
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001aa0:	f850 2b04 	ldr.w	r2, [r0], #4
  for (index = nbytes; index != 0; index--)
 8001aa4:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001aa6:	f821 2b02 	strh.w	r2, [r1], #2
  for (index = nbytes; index != 0; index--)
 8001aaa:	e7f7      	b.n	8001a9c <USB_ReadPMA+0xc>

08001aac <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_DFU_CfgDesc);
 8001aac:	231b      	movs	r3, #27
 8001aae:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8001ab0:	4800      	ldr	r0, [pc, #0]	; (8001ab4 <USBD_DFU_GetCfgDesc+0x8>)
 8001ab2:	4770      	bx	lr
 8001ab4:	20000044 	.word	0x20000044

08001ab8 <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{

  return USBD_OK;
}
 8001ab8:	2000      	movs	r0, #0
 8001aba:	4770      	bx	lr

08001abc <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady (USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8001abc:	2000      	movs	r0, #0
 8001abe:	4770      	bx	lr

08001ac0 <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_DFU_DeviceQualifierDesc);
 8001ac0:	230a      	movs	r3, #10
 8001ac2:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8001ac4:	4800      	ldr	r0, [pc, #0]	; (8001ac8 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8001ac6:	4770      	bx	lr
 8001ac8:	20000060 	.word	0x20000060

08001acc <USBD_DFU_EP0_TxReady>:
{
 8001acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8001ace:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 8001ad2:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8001ad4:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d165      	bne.n	8001ba8 <USBD_DFU_EP0_TxReady+0xdc>
    if (hdfu->wblock_num == 0)   
 8001adc:	f8d4 1408 	ldr.w	r1, [r4, #1032]	; 0x408
 8001ae0:	2900      	cmp	r1, #0
 8001ae2:	d152      	bne.n	8001b8a <USBD_DFU_EP0_TxReady+0xbe>
      if ((hdfu->buffer.d8[0] ==  DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1))
 8001ae4:	7823      	ldrb	r3, [r4, #0]
 8001ae6:	b9a3      	cbnz	r3, 8001b12 <USBD_DFU_EP0_TxReady+0x46>
 8001ae8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d13d      	bne.n	8001b6c <USBD_DFU_EP0_TxReady+0xa0>
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8001af0:	2203      	movs	r2, #3
    hdfu->wlength = 0;
 8001af2:	2300      	movs	r3, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8001af4:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0;
 8001af8:	f44f 7240 	mov.w	r2, #768	; 0x300
    hdfu->wlength = 0;
 8001afc:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    hdfu->wblock_num = 0;
 8001b00:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
    hdfu->dev_status[1] = 0;
 8001b04:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;

    hdfu->dev_status[1] = 0;
    hdfu->dev_status[2] = 0;
    hdfu->dev_status[3] = 0;
 8001b08:	f8a4 2404 	strh.w	r2, [r4, #1028]	; 0x404
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	b003      	add	sp, #12
 8001b10:	bd30      	pop	{r4, r5, pc}
      else if  (( hdfu->buffer.d8[0] ==  DFU_CMD_SETADDRESSPOINTER ) && (hdfu->wlength == 5))
 8001b12:	2b21      	cmp	r3, #33	; 0x21
 8001b14:	d110      	bne.n	8001b38 <USBD_DFU_EP0_TxReady+0x6c>
 8001b16:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d126      	bne.n	8001b6c <USBD_DFU_EP0_TxReady+0xa0>
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b1e:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += hdfu->buffer.d8[2] << 8;
 8001b20:	78a2      	ldrb	r2, [r4, #2]
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b22:	041b      	lsls	r3, r3, #16
 8001b24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr  = hdfu->buffer.d8[1];
 8001b28:	7862      	ldrb	r2, [r4, #1]
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b2a:	4413      	add	r3, r2
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8001b2c:	7922      	ldrb	r2, [r4, #4]
 8001b2e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8001b32:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
 8001b36:	e7db      	b.n	8001af0 <USBD_DFU_EP0_TxReady+0x24>
      else if (( hdfu->buffer.d8[0] ==  DFU_CMD_ERASE ) && (hdfu->wlength == 5))
 8001b38:	2b41      	cmp	r3, #65	; 0x41
 8001b3a:	d117      	bne.n	8001b6c <USBD_DFU_EP0_TxReady+0xa0>
 8001b3c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d113      	bne.n	8001b6c <USBD_DFU_EP0_TxReady+0xa0>
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b44:	78e0      	ldrb	r0, [r4, #3]
        hdfu->data_ptr += hdfu->buffer.d8[2] << 8;
 8001b46:	78a3      	ldrb	r3, [r4, #2]
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b48:	0400      	lsls	r0, r0, #16
 8001b4a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
        hdfu->data_ptr  = hdfu->buffer.d8[1];
 8001b4e:	7863      	ldrb	r3, [r4, #1]
        hdfu->data_ptr += hdfu->buffer.d8[3] << 16;
 8001b50:	4418      	add	r0, r3
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8001b52:	7923      	ldrb	r3, [r4, #4]
 8001b54:	eb00 6003 	add.w	r0, r0, r3, lsl #24
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8001b58:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
        hdfu->data_ptr += hdfu->buffer.d8[4] << 24;
 8001b5c:	f8c4 0410 	str.w	r0, [r4, #1040]	; 0x410
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	4798      	blx	r3
      if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d0c3      	beq.n	8001af0 <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e7cf      	b.n	8001b0c <USBD_DFU_EP0_TxReady+0x40>
        hdfu->wlength = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        hdfu->wblock_num = 0;     
 8001b72:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
        req.bmRequest = 0;
 8001b76:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1;
 8001b7a:	2301      	movs	r3, #1
        USBD_CtlError (pdev, &req);
 8001b7c:	4669      	mov	r1, sp
 8001b7e:	4628      	mov	r0, r5
        req.wLength = 1;
 8001b80:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError (pdev, &req);
 8001b84:	f000 fceb 	bl	800255e <USBD_CtlError>
 8001b88:	e7b2      	b.n	8001af0 <USBD_DFU_EP0_TxReady+0x24>
    else if (hdfu->wblock_num > 1)  
 8001b8a:	2901      	cmp	r1, #1
 8001b8c:	d0b0      	beq.n	8001af0 <USBD_DFU_EP0_TxReady+0x24>
      addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8001b8e:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
      if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8001b92:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
      addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8001b96:	3902      	subs	r1, #2
      if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8001b98:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
 8001ba4:	4798      	blx	r3
 8001ba6:	e7dd      	b.n	8001b64 <USBD_DFU_EP0_TxReady+0x98>
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress*/
 8001ba8:	2b07      	cmp	r3, #7
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	d1ad      	bne.n	8001b0c <USBD_DFU_EP0_TxReady+0x40>
  if ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04)
 8001bb0:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <USBD_DFU_EP0_TxReady+0x13c>)
 hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8001bb2:	f884 3407 	strb.w	r3, [r4, #1031]	; 0x407
  if ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04)
 8001bb6:	7d12      	ldrb	r2, [r2, #20]
 8001bb8:	f012 0204 	ands.w	r2, r2, #4
 8001bbc:	d007      	beq.n	8001bce <USBD_DFU_EP0_TxReady+0x102>
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8001bbe:	2206      	movs	r2, #6
    hdfu->dev_status[1] = 0;
 8001bc0:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8001bc4:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0;
 8001bc8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001bcc:	e79c      	b.n	8001b08 <USBD_DFU_EP0_TxReady+0x3c>
    return;
  }
  else
  {
    
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
    
    hdfu->dev_status[1] = 0;
    hdfu->dev_status[2] = 0;
    hdfu->dev_status[3] = 0;
 8001bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdfu->dev_status[1] = 0;
 8001bd8:	f8a4 2402 	strh.w	r2, [r4, #1026]	; 0x402
    hdfu->dev_status[3] = 0;
 8001bdc:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
    hdfu->dev_status[4] = hdfu->dev_state;     
    
    /* Disconnect the USB device */
    USBD_Stop (pdev);
 8001be0:	f000 fa1a 	bl	8002018 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8001be4:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bec:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bf0:	4906      	ldr	r1, [pc, #24]	; (8001c0c <USBD_DFU_EP0_TxReady+0x140>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <USBD_DFU_EP0_TxReady+0x144>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bf4:	68ca      	ldr	r2, [r1, #12]
 8001bf6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60cb      	str	r3, [r1, #12]
 8001bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <USBD_DFU_EP0_TxReady+0x136>
 8001c06:	bf00      	nop
 8001c08:	20000044 	.word	0x20000044
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	05fa0004 	.word	0x05fa0004

08001c14 <USBD_DFU_DeInit>:
  hdfu->dev_state = DFU_STATE_IDLE;
 8001c14:	2202      	movs	r2, #2
{
 8001c16:	b538      	push	{r3, r4, r5, lr}
  hdfu->wblock_num = 0;
 8001c18:	2500      	movs	r5, #0
{
 8001c1a:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8001c1c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  hdfu->dev_state = DFU_STATE_IDLE;
 8001c20:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8001c24:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
  hdfu->wblock_num = 0;
 8001c28:	f8c3 5408 	str.w	r5, [r3, #1032]	; 0x408
  hdfu->wlength = 0;
 8001c2c:	f8c3 540c 	str.w	r5, [r3, #1036]	; 0x40c
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit(); 
 8001c30:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001c38:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001c3c:	f000 ff40 	bl	8002ac0 <USBD_static_free>
}
 8001c40:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 8001c42:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
}
 8001c46:	bd38      	pop	{r3, r4, r5, pc}

08001c48 <USBD_DFU_Init>:
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof (USBD_DFU_HandleTypeDef));
 8001c4c:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8001c50:	f000 ff32 	bl	8002ab8 <USBD_static_malloc>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	b1bb      	cbz	r3, 8001c8e <USBD_DFU_Init+0x46>
    hdfu->alt_setting = 0;
 8001c5e:	2200      	movs	r2, #0
    hdfu->dev_status[3] = 0;
 8001c60:	f44f 7100 	mov.w	r1, #512	; 0x200
    hdfu->alt_setting = 0;
 8001c64:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    hdfu->wblock_num = 0;
 8001c68:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wlength = 0;
 8001c6c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <USBD_DFU_Init+0x48>)
    hdfu->dev_state = DFU_STATE_IDLE;
 8001c72:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
    hdfu->dev_status[3] = 0;
 8001c76:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8001c7a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8001c7e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4798      	blx	r3
 8001c86:	3800      	subs	r0, #0
 8001c88:	bf18      	it	ne
 8001c8a:	2001      	movne	r0, #1
 8001c8c:	0040      	lsls	r0, r0, #1
}
 8001c8e:	bd10      	pop	{r4, pc}
 8001c90:	08010000 	.word	0x08010000

08001c94 <USBD_DFU_IsoOutIncomplete>:
 8001c94:	2000      	movs	r0, #0
 8001c96:	4770      	bx	lr

08001c98 <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8001c98:	2906      	cmp	r1, #6
{
 8001c9a:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8001c9c:	d807      	bhi.n	8001cae <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString ((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8001c9e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001ca2:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <USBD_DFU_GetUsrStringDesc+0x1c>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f000 fc65 	bl	8002574 <USBD_GetString>
 8001caa:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 8001cac:	bd08      	pop	{r3, pc}
    return NULL;
 8001cae:	2000      	movs	r0, #0
 8001cb0:	e7fc      	b.n	8001cac <USBD_DFU_GetUsrStringDesc+0x14>
 8001cb2:	bf00      	nop
 8001cb4:	20000100 	.word	0x20000100

08001cb8 <USBD_DFU_Setup>:
{
 8001cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cbc:	780d      	ldrb	r5, [r1, #0]
 8001cbe:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001cc0:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8001cc4:	468c      	mov	ip, r1
  hdfu = (USBD_DFU_HandleTypeDef*) pdev->pClassData;
 8001cc6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001cca:	f000 8156 	beq.w	8001f7a <USBD_DFU_Setup+0x2c2>
 8001cce:	2d20      	cmp	r5, #32
 8001cd0:	d125      	bne.n	8001d1e <USBD_DFU_Setup+0x66>
    switch (req->bRequest)
 8001cd2:	f891 8001 	ldrb.w	r8, [r1, #1]
 8001cd6:	f1b8 0f06 	cmp.w	r8, #6
 8001cda:	f200 8148 	bhi.w	8001f6e <USBD_DFU_Setup+0x2b6>
 8001cde:	e8df f018 	tbh	[pc, r8, lsl #1]
 8001ce2:	011d      	.short	0x011d
 8001ce4:	00390007 	.word	0x00390007
 8001ce8:	00e9009c 	.word	0x00e9009c
 8001cec:	010300ff 	.word	0x010300ff
  if (req->wLength > 0)
 8001cf0:	88ca      	ldrh	r2, [r1, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8001cf2:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
  if (req->wLength > 0)
 8001cf6:	b1ca      	cbz	r2, 8001d2c <USBD_DFU_Setup+0x74>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d001      	beq.n	8001d00 <USBD_DFU_Setup+0x48>
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d110      	bne.n	8001d22 <USBD_DFU_Setup+0x6a>
      hdfu->wblock_num = req->wValue;
 8001d00:	f8bc 3002 	ldrh.w	r3, [ip, #2]
      USBD_CtlPrepareRx (pdev,
 8001d04:	4621      	mov	r1, r4
      hdfu->wblock_num = req->wValue;
 8001d06:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8001d0a:	2303      	movs	r3, #3
      USBD_CtlPrepareRx (pdev,
 8001d0c:	4630      	mov	r0, r6
      hdfu->wlength = req->wLength;
 8001d0e:	f8c4 240c 	str.w	r2, [r4, #1036]	; 0x40c
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8001d12:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_status[4] = hdfu->dev_state;
 8001d16:	f884 3405 	strb.w	r3, [r4, #1029]	; 0x405
      USBD_CtlPrepareRx (pdev,
 8001d1a:	f000 fc5c 	bl	80025d6 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8001d1e:	2500      	movs	r5, #0
 8001d20:	e015      	b.n	8001d4e <USBD_DFU_Setup+0x96>
      USBD_CtlError (pdev, req);
 8001d22:	4661      	mov	r1, ip
 8001d24:	4630      	mov	r0, r6
 8001d26:	f000 fc1a 	bl	800255e <USBD_CtlError>
 8001d2a:	e7f8      	b.n	8001d1e <USBD_DFU_Setup+0x66>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE )
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d001      	beq.n	8001d34 <USBD_DFU_Setup+0x7c>
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d1f6      	bne.n	8001d22 <USBD_DFU_Setup+0x6a>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8001d34:	2301      	movs	r3, #1
 8001d36:	f884 3407 	strb.w	r3, [r4, #1031]	; 0x407
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8001d3a:	2306      	movs	r3, #6
      hdfu->dev_status[1] = 0;
 8001d3c:	2500      	movs	r5, #0
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8001d3e:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_status[3] = 0;
 8001d42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
      hdfu->dev_status[1] = 0;
 8001d46:	f8a4 5402 	strh.w	r5, [r4, #1026]	; 0x402
      hdfu->dev_status[3] = 0;
 8001d4a:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
}
 8001d4e:	4628      	mov	r0, r5
 8001d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (req->wLength > 0)
 8001d54:	88ca      	ldrh	r2, [r1, #6]
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d055      	beq.n	8001e06 <USBD_DFU_Setup+0x14e>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8001d5a:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d001      	beq.n	8001d66 <USBD_DFU_Setup+0xae>
 8001d62:	2b09      	cmp	r3, #9
 8001d64:	d149      	bne.n	8001dfa <USBD_DFU_Setup+0x142>
      hdfu->wblock_num = req->wValue;
 8001d66:	f8bc 7002 	ldrh.w	r7, [ip, #2]
      hdfu->wlength = req->wLength;
 8001d6a:	f8c4 240c 	str.w	r2, [r4, #1036]	; 0x40c
      hdfu->wblock_num = req->wValue;
 8001d6e:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
      if (hdfu->wblock_num == 0)  
 8001d72:	b9b7      	cbnz	r7, 8001da2 <USBD_DFU_Setup+0xea>
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8001d74:	f44f 5304 	mov.w	r3, #8448	; 0x2100
        hdfu->dev_state = (hdfu->wlength > 3)? DFU_STATE_IDLE:DFU_STATE_UPLOAD_IDLE;        
 8001d78:	2a03      	cmp	r2, #3
 8001d7a:	bf98      	it	ls
 8001d7c:	f04f 0809 	movls.w	r8, #9
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8001d80:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8001d82:	2341      	movs	r3, #65	; 0x41
        USBD_CtlSendData (pdev,
 8001d84:	2203      	movs	r2, #3
 8001d86:	4621      	mov	r1, r4
        hdfu->dev_state = (hdfu->wlength > 3)? DFU_STATE_IDLE:DFU_STATE_UPLOAD_IDLE;        
 8001d88:	f884 8400 	strb.w	r8, [r4, #1024]	; 0x400
        hdfu->dev_status[1] = 0;
 8001d8c:	f8a4 7402 	strh.w	r7, [r4, #1026]	; 0x402
        hdfu->dev_status[3] = 0;
 8001d90:	f884 7404 	strb.w	r7, [r4, #1028]	; 0x404
        hdfu->dev_status[4] = hdfu->dev_state;       
 8001d94:	f884 8405 	strb.w	r8, [r4, #1029]	; 0x405
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8001d98:	70a3      	strb	r3, [r4, #2]
  USBD_CtlSendData (pdev,
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	f000 fc06 	bl	80025ac <USBD_CtlSendData>
 8001da0:	e7bd      	b.n	8001d1e <USBD_DFU_Setup+0x66>
      else if (hdfu->wblock_num > 1)
 8001da2:	2f01      	cmp	r7, #1
 8001da4:	f04f 0500 	mov.w	r5, #0
 8001da8:	d019      	beq.n	8001dde <USBD_DFU_Setup+0x126>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE ;
 8001daa:	2309      	movs	r3, #9
 8001dac:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
        hdfu->dev_status[3] = 0;
 8001db0:	f44f 6310 	mov.w	r3, #2304	; 0x900
        hdfu->dev_status[1] = 0;
 8001db4:	f8a4 5402 	strh.w	r5, [r4, #1026]	; 0x402
        hdfu->dev_status[3] = 0;
 8001db8:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
        addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8001dbc:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
        phaddr =  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);  
 8001dc0:	f8d6 321c 	ldr.w	r3, [r6, #540]	; 0x21c
        addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8001dc4:	3f02      	subs	r7, #2
        phaddr =  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);  
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	eb00 2087 	add.w	r0, r0, r7, lsl #10
 8001dce:	4798      	blx	r3
 8001dd0:	4601      	mov	r1, r0
        USBD_CtlSendData (pdev,
 8001dd2:	f8b4 240c 	ldrh.w	r2, [r4, #1036]	; 0x40c
      USBD_CtlSendData (pdev, 
 8001dd6:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8001dd8:	f000 fbe8 	bl	80025ac <USBD_CtlSendData>
      break;
 8001ddc:	e7b7      	b.n	8001d4e <USBD_DFU_Setup+0x96>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8001dde:	230f      	movs	r3, #15
 8001de0:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
        hdfu->dev_status[3] = 0;
 8001de4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
        hdfu->dev_status[1] = 0;
 8001de8:	f8a4 5402 	strh.w	r5, [r4, #1026]	; 0x402
        hdfu->dev_status[3] = 0;
 8001dec:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
      USBD_CtlError (pdev, req);
 8001df0:	4661      	mov	r1, ip
 8001df2:	4630      	mov	r0, r6
 8001df4:	f000 fbb3 	bl	800255e <USBD_CtlError>
 8001df8:	e7a9      	b.n	8001d4e <USBD_DFU_Setup+0x96>
      hdfu->wlength = 0;
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
      hdfu->wblock_num = 0;   
 8001e00:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
 8001e04:	e7f4      	b.n	8001df0 <USBD_DFU_Setup+0x138>
    hdfu->dev_state = DFU_STATE_IDLE;
 8001e06:	2302      	movs	r3, #2
 8001e08:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0;
 8001e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
    hdfu->dev_status[1] = 0;
 8001e10:	f8a4 2402 	strh.w	r2, [r4, #1026]	; 0x402
    hdfu->dev_status[3] = 0;
 8001e14:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
 8001e18:	e781      	b.n	8001d1e <USBD_DFU_Setup+0x66>
  switch (hdfu->dev_state)
 8001e1a:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8001e1e:	f204 4501 	addw	r5, r4, #1025	; 0x401
  switch (hdfu->dev_state)
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d004      	beq.n	8001e30 <USBD_DFU_Setup+0x178>
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d02a      	beq.n	8001e80 <USBD_DFU_Setup+0x1c8>
  USBD_CtlSendData (pdev,
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	e7b4      	b.n	8001d9a <USBD_DFU_Setup+0xe2>
    if (hdfu->wlength != 0)
 8001e30:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8001e34:	b1d3      	cbz	r3, 8001e6c <USBD_DFU_Setup+0x1b4>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8001e36:	2304      	movs	r3, #4
 8001e38:	f884 3400 	strb.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_status[1] = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_status[3] = 0;
 8001e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e46:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8001e4a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
      if ((hdfu->wblock_num == 0) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8001e4e:	f8d4 1408 	ldr.w	r1, [r4, #1032]	; 0x408
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8001e52:	699b      	ldr	r3, [r3, #24]
        addr = ((hdfu->wblock_num - 2) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8001e54:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
      if ((hdfu->wblock_num == 0) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8001e58:	b929      	cbnz	r1, 8001e66 <USBD_DFU_Setup+0x1ae>
 8001e5a:	7822      	ldrb	r2, [r4, #0]
 8001e5c:	2a41      	cmp	r2, #65	; 0x41
 8001e5e:	d102      	bne.n	8001e66 <USBD_DFU_Setup+0x1ae>
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8001e60:	462a      	mov	r2, r5
        ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8001e62:	4798      	blx	r3
 8001e64:	e7e1      	b.n	8001e2a <USBD_DFU_Setup+0x172>
 8001e66:	462a      	mov	r2, r5
 8001e68:	2101      	movs	r1, #1
 8001e6a:	e7fa      	b.n	8001e62 <USBD_DFU_Setup+0x1aa>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8001e6c:	2205      	movs	r2, #5
      hdfu->dev_status[1] = 0;
 8001e6e:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_status[3] = 0;
 8001e72:	f44f 63a0 	mov.w	r3, #1280	; 0x500
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8001e76:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[3] = 0;
 8001e7a:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
 8001e7e:	e7d4      	b.n	8001e2a <USBD_DFU_Setup+0x172>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8001e80:	f894 3407 	ldrb.w	r3, [r4, #1031]	; 0x407
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d107      	bne.n	8001e98 <USBD_DFU_Setup+0x1e0>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8001e88:	2207      	movs	r2, #7
      hdfu->dev_status[1] = 1;             /*bwPollTimeout = 1ms*/
 8001e8a:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8001e8e:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[3] = 0;
 8001e92:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e96:	e7f0      	b.n	8001e7a <USBD_DFU_Setup+0x1c2>
    else if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && \
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1c6      	bne.n	8001e2a <USBD_DFU_Setup+0x172>
      ((USBD_DFU_CfgDesc[(11 + (9 * USBD_DFU_MAX_ITF_NUM))]) & 0x04))
 8001e9c:	4a46      	ldr	r2, [pc, #280]	; (8001fb8 <USBD_DFU_Setup+0x300>)
    else if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) && \
 8001e9e:	7d12      	ldrb	r2, [r2, #20]
 8001ea0:	0752      	lsls	r2, r2, #29
 8001ea2:	d5c2      	bpl.n	8001e2a <USBD_DFU_Setup+0x172>
      hdfu->dev_state = DFU_STATE_IDLE;
 8001ea4:	2202      	movs	r2, #2
      hdfu->dev_status[1] = 0;
 8001ea6:	f8a4 3402 	strh.w	r3, [r4, #1026]	; 0x402
      hdfu->dev_state = DFU_STATE_IDLE;
 8001eaa:	f884 2400 	strb.w	r2, [r4, #1024]	; 0x400
      hdfu->dev_status[3] = 0;
 8001eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb2:	e7e2      	b.n	8001e7a <USBD_DFU_Setup+0x1c2>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8001eb4:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[5] = 0;/*iString*/
 8001eb8:	2500      	movs	r5, #0
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8001eba:	2b0a      	cmp	r3, #10
    hdfu->dev_state = DFU_STATE_IDLE;
 8001ebc:	bf0b      	itete	eq
 8001ebe:	2302      	moveq	r3, #2
    hdfu->dev_state = DFU_STATE_ERROR;
 8001ec0:	f640 630a 	movwne	r3, #3594	; 0xe0a
    hdfu->dev_state = DFU_STATE_IDLE;
 8001ec4:	f8c4 3400 	streq.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_state = DFU_STATE_ERROR;
 8001ec8:	f8c4 3400 	strne.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001ecc:	bf0c      	ite	eq
 8001ece:	f44f 7300 	moveq.w	r3, #512	; 0x200
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001ed2:	f44f 6320 	movne.w	r3, #2560	; 0xa00
    hdfu->dev_status[5] = 0;/*iString*/
 8001ed6:	f884 5406 	strb.w	r5, [r4, #1030]	; 0x406
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001eda:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
 8001ede:	e736      	b.n	8001d4e <USBD_DFU_Setup+0x96>
  USBD_CtlSendData (pdev, 
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 8001ee6:	e758      	b.n	8001d9a <USBD_DFU_Setup+0xe2>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8001ee8:	f894 3400 	ldrb.w	r3, [r4, #1024]	; 0x400
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	f63f af16 	bhi.w	8001d1e <USBD_DFU_Setup+0x66>
 8001ef2:	f46f 751b 	mvn.w	r5, #620	; 0x26c
 8001ef6:	411d      	asrs	r5, r3
 8001ef8:	f015 0501 	ands.w	r5, r5, #1
 8001efc:	f47f af0f 	bne.w	8001d1e <USBD_DFU_Setup+0x66>
    hdfu->dev_state = DFU_STATE_IDLE;
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f06:	f44f 7300 	mov.w	r3, #512	; 0x200
    hdfu->dev_status[5] = 0; /*iString*/
 8001f0a:	f884 5406 	strb.w	r5, [r4, #1030]	; 0x406
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f0e:	f8a4 3404 	strh.w	r3, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0;
 8001f12:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
    hdfu->wlength = 0;
 8001f16:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
 8001f1a:	e718      	b.n	8001d4e <USBD_DFU_Setup+0x96>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8001f1c:	f894 2400 	ldrb.w	r2, [r4, #1024]	; 0x400
 8001f20:	2a09      	cmp	r2, #9
 8001f22:	d812      	bhi.n	8001f4a <USBD_DFU_Setup+0x292>
 8001f24:	f46f 731b 	mvn.w	r3, #620	; 0x26c
 8001f28:	4113      	asrs	r3, r2
 8001f2a:	f013 0301 	ands.w	r3, r3, #1
 8001f2e:	d10c      	bne.n	8001f4a <USBD_DFU_Setup+0x292>
    hdfu->dev_state = DFU_STATE_IDLE;
 8001f30:	2202      	movs	r2, #2
 8001f32:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f36:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdfu->dev_status[5] = 0; /*iString*/
 8001f3a:	f884 3406 	strb.w	r3, [r4, #1030]	; 0x406
    hdfu->dev_status[3] = 0; /*bwPollTimeout=0ms*/
 8001f3e:	f8a4 2404 	strh.w	r2, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0;
 8001f42:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
    hdfu->wlength = 0;
 8001f46:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
  if ((USBD_DFU_CfgDesc[12 + (9 * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <USBD_DFU_Setup+0x300>)
 8001f4c:	7d5d      	ldrb	r5, [r3, #21]
 8001f4e:	f015 0510 	ands.w	r5, r5, #16
 8001f52:	d007      	beq.n	8001f64 <USBD_DFU_Setup+0x2ac>
    USBD_Stop (pdev);
 8001f54:	4630      	mov	r0, r6
 8001f56:	f000 f85f 	bl	8002018 <USBD_Stop>
    USBD_Start (pdev);  
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	f000 f857 	bl	800200e <USBD_Start>
  uint8_t ret = USBD_OK;
 8001f60:	4645      	mov	r5, r8
 8001f62:	e6f4      	b.n	8001d4e <USBD_DFU_Setup+0x96>
    USBD_Delay (req->wValue);  
 8001f64:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8001f68:	f7fe f938 	bl	80001dc <HAL_Delay>
 8001f6c:	e6ef      	b.n	8001d4e <USBD_DFU_Setup+0x96>
      USBD_CtlError (pdev, req);
 8001f6e:	4661      	mov	r1, ip
 8001f70:	4630      	mov	r0, r6
        USBD_CtlError (pdev, req);
 8001f72:	f000 faf4 	bl	800255e <USBD_CtlError>
        ret = USBD_FAIL;  
 8001f76:	2502      	movs	r5, #2
 8001f78:	e6e9      	b.n	8001d4e <USBD_DFU_Setup+0x96>
    switch (req->bRequest)
 8001f7a:	784b      	ldrb	r3, [r1, #1]
 8001f7c:	2b0a      	cmp	r3, #10
 8001f7e:	d010      	beq.n	8001fa2 <USBD_DFU_Setup+0x2ea>
 8001f80:	2b0b      	cmp	r3, #11
 8001f82:	d012      	beq.n	8001faa <USBD_DFU_Setup+0x2f2>
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d1f2      	bne.n	8001f6e <USBD_DFU_Setup+0x2b6>
      if( (req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8001f88:	884b      	ldrh	r3, [r1, #2]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	2b21      	cmp	r3, #33	; 0x21
 8001f8e:	d105      	bne.n	8001f9c <USBD_DFU_Setup+0x2e4>
        len = MIN(USB_DFU_DESC_SIZ , req->wLength);
 8001f90:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_DFU_CfgDesc + (9 * (USBD_DFU_MAX_ITF_NUM + 1));
 8001f92:	490a      	ldr	r1, [pc, #40]	; (8001fbc <USBD_DFU_Setup+0x304>)
        len = MIN(USB_DFU_DESC_SIZ , req->wLength);
 8001f94:	2a09      	cmp	r2, #9
 8001f96:	bf28      	it	cs
 8001f98:	2209      	movcs	r2, #9
 8001f9a:	e71c      	b.n	8001dd6 <USBD_DFU_Setup+0x11e>
  uint16_t len = 0;
 8001f9c:	462a      	mov	r2, r5
  uint8_t *pbuf = 0;
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	e719      	b.n	8001dd6 <USBD_DFU_Setup+0x11e>
      USBD_CtlSendData (pdev,
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f204 4114 	addw	r1, r4, #1044	; 0x414
 8001fa8:	e716      	b.n	8001dd8 <USBD_DFU_Setup+0x120>
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8001faa:	788d      	ldrb	r5, [r1, #2]
 8001fac:	2d00      	cmp	r5, #0
 8001fae:	d1e0      	bne.n	8001f72 <USBD_DFU_Setup+0x2ba>
        hdfu->alt_setting = (uint8_t)(req->wValue);
 8001fb0:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
 8001fb4:	e6cb      	b.n	8001d4e <USBD_DFU_Setup+0x96>
 8001fb6:	bf00      	nop
 8001fb8:	20000044 	.word	0x20000044
 8001fbc:	20000056 	.word	0x20000056

08001fc0 <USBD_DFU_DataOut>:
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	4770      	bx	lr

08001fc4 <USBD_DFU_IsoINIncomplete>:
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	4770      	bx	lr

08001fc8 <USBD_DFU_SOF>:
 8001fc8:	2000      	movs	r0, #0
 8001fca:	4770      	bx	lr

08001fcc <USBD_DFU_RegisterMedia>:
  if(fops != NULL)
 8001fcc:	b109      	cbz	r1, 8001fd2 <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData= fops;
 8001fce:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
}
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	4770      	bx	lr

08001fd6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001fd6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001fd8:	b180      	cbz	r0, 8001ffc <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001fda:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fde:	b113      	cbz	r3, 8001fe6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001fe6:	b109      	cbz	r1, 8001fec <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001fe8:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001fec:	2301      	movs	r3, #1
  pdev->id = id;
 8001fee:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001ff0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001ff4:	f000 fcac 	bl	8002950 <USBD_LL_Init>
  
  return USBD_OK; 
 8001ff8:	2000      	movs	r0, #0
}
 8001ffa:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	e7fc      	b.n	8001ffa <USBD_Init+0x24>

08002000 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002000:	b119      	cbz	r1, 800200a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002002:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002006:	2000      	movs	r0, #0
 8002008:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800200a:	2002      	movs	r0, #2
  }
  
  return status;
}
 800200c:	4770      	bx	lr

0800200e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800200e:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002010:	f000 fcd0 	bl	80029b4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002014:	2000      	movs	r0, #0
 8002016:	bd08      	pop	{r3, pc}

08002018 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8002018:	b510      	push	{r4, lr}
 800201a:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800201c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002020:	7901      	ldrb	r1, [r0, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8002026:	4620      	mov	r0, r4
 8002028:	f000 fcd2 	bl	80029d0 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 800202c:	2000      	movs	r0, #0
 800202e:	bd10      	pop	{r4, pc}

08002030 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002030:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002032:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002036:	b133      	cbz	r3, 8002046 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4798      	blx	r3
 800203c:	3800      	subs	r0, #0
 800203e:	bf18      	it	ne
 8002040:	2001      	movne	r0, #1
 8002042:	0040      	lsls	r0, r0, #1
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002044:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002046:	2002      	movs	r0, #2
 8002048:	e7fc      	b.n	8002044 <USBD_SetClassConfig+0x14>

0800204a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800204a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800204c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4798      	blx	r3
  return USBD_OK;
}
 8002054:	2000      	movs	r0, #0
 8002056:	bd08      	pop	{r3, pc}

08002058 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002058:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800205a:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 800205e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002060:	4628      	mov	r0, r5
 8002062:	f000 fa68 	bl	8002536 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002066:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002068:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800206c:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002070:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002074:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002078:	f001 031f 	and.w	r3, r1, #31
 800207c:	2b01      	cmp	r3, #1
 800207e:	d008      	beq.n	8002092 <USBD_LL_SetupStage+0x3a>
 8002080:	2b02      	cmp	r3, #2
 8002082:	d00b      	beq.n	800209c <USBD_LL_SetupStage+0x44>
 8002084:	b97b      	cbnz	r3, 80020a6 <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8002086:	4629      	mov	r1, r5
 8002088:	4620      	mov	r0, r4
 800208a:	f000 f8d9 	bl	8002240 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 800208e:	2000      	movs	r0, #0
 8002090:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002092:	4629      	mov	r1, r5
 8002094:	4620      	mov	r0, r4
 8002096:	f000 f9d3 	bl	8002440 <USBD_StdItfReq>
    break;
 800209a:	e7f8      	b.n	800208e <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 800209c:	4629      	mov	r1, r5
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 f9e6 	bl	8002470 <USBD_StdEPReq>
    break;
 80020a4:	e7f3      	b.n	800208e <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80020a6:	4620      	mov	r0, r4
 80020a8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80020ac:	f000 fcae 	bl	8002a0c <USBD_LL_StallEP>
    break;
 80020b0:	e7ed      	b.n	800208e <USBD_LL_SetupStage+0x36>

080020b2 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80020b2:	b570      	push	{r4, r5, r6, lr}
 80020b4:	4604      	mov	r4, r0
 80020b6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80020b8:	bb01      	cbnz	r1, 80020fc <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80020ba:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d10d      	bne.n	80020de <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 80020c2:	e9d0 5343 	ldrd	r5, r3, [r0, #268]	; 0x10c
 80020c6:	429d      	cmp	r5, r3
 80020c8:	d90b      	bls.n	80020e2 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 80020ca:	1aed      	subs	r5, r5, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80020cc:	42ab      	cmp	r3, r5
 80020ce:	bf28      	it	cs
 80020d0:	462b      	movcs	r3, r5
        USBD_CtlContinueRx (pdev, 
 80020d2:	4631      	mov	r1, r6
        pep->rem_length -=  pep->maxpacket;
 80020d4:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80020d8:	b29a      	uxth	r2, r3
 80020da:	f000 fa89 	bl	80025f0 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80020de:	2000      	movs	r0, #0
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80020e2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	b123      	cbz	r3, 80020f4 <USBD_LL_DataOutStage+0x42>
 80020ea:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80020ee:	2a03      	cmp	r2, #3
 80020f0:	d100      	bne.n	80020f4 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 80020f2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80020f4:	4620      	mov	r0, r4
 80020f6:	f000 fa83 	bl	8002600 <USBD_CtlSendStatus>
 80020fa:	e7f0      	b.n	80020de <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 80020fc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0eb      	beq.n	80020de <USBD_LL_DataOutStage+0x2c>
 8002106:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800210a:	2a03      	cmp	r2, #3
 800210c:	d1e7      	bne.n	80020de <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 800210e:	4798      	blx	r3
 8002110:	e7e5      	b.n	80020de <USBD_LL_DataOutStage+0x2c>

08002112 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002114:	4604      	mov	r4, r0
 8002116:	4613      	mov	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002118:	460f      	mov	r7, r1
 800211a:	2900      	cmp	r1, #0
 800211c:	d13d      	bne.n	800219a <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800211e:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002122:	2a02      	cmp	r2, #2
 8002124:	d10f      	bne.n	8002146 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002126:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 800212a:	42b5      	cmp	r5, r6
 800212c:	d914      	bls.n	8002158 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800212e:	1bad      	subs	r5, r5, r6
        
        USBD_CtlContinueSendData (pdev, 
 8002130:	4619      	mov	r1, r3
        pep->rem_length -=  pep->maxpacket;
 8002132:	61c5      	str	r5, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8002134:	b2aa      	uxth	r2, r5
 8002136:	f000 fa46 	bl	80025c6 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800213a:	463b      	mov	r3, r7
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800213c:	461a      	mov	r2, r3
 800213e:	4619      	mov	r1, r3
 8002140:	4620      	mov	r0, r4
 8002142:	f000 fcab 	bl	8002a9c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002146:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002154:	2000      	movs	r0, #0
 8002156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002158:	6983      	ldr	r3, [r0, #24]
 800215a:	fbb3 f5f6 	udiv	r5, r3, r6
 800215e:	fb06 3515 	mls	r5, r6, r5, r3
 8002162:	b965      	cbnz	r5, 800217e <USBD_LL_DataInStage+0x6c>
 8002164:	429e      	cmp	r6, r3
 8002166:	d80a      	bhi.n	800217e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002168:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800216c:	4293      	cmp	r3, r2
 800216e:	d206      	bcs.n	800217e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002170:	462a      	mov	r2, r5
 8002172:	f000 fa28 	bl	80025c6 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8002176:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0;
 8002178:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800217c:	e7de      	b.n	800213c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800217e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	b12b      	cbz	r3, 8002192 <USBD_LL_DataInStage+0x80>
 8002186:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800218a:	2a03      	cmp	r2, #3
 800218c:	d101      	bne.n	8002192 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800218e:	4620      	mov	r0, r4
 8002190:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002192:	4620      	mov	r0, r4
 8002194:	f000 fa3f 	bl	8002616 <USBD_CtlReceiveStatus>
 8002198:	e7d5      	b.n	8002146 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800219a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0d7      	beq.n	8002154 <USBD_LL_DataInStage+0x42>
 80021a4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80021a8:	2a03      	cmp	r2, #3
 80021aa:	d1d3      	bne.n	8002154 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80021ac:	4798      	blx	r3
 80021ae:	e7d1      	b.n	8002154 <USBD_LL_DataInStage+0x42>

080021b0 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80021b0:	2200      	movs	r2, #0
{
 80021b2:	b538      	push	{r3, r4, r5, lr}
 80021b4:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80021b6:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80021b8:	4611      	mov	r1, r2
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	f000 fc16 	bl	80029ec <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80021c0:	462b      	mov	r3, r5
 80021c2:	2200      	movs	r2, #0
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	4620      	mov	r0, r4
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80021c8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80021cc:	f000 fc0e 	bl	80029ec <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80021d6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80021da:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80021dc:	b12b      	cbz	r3, 80021ea <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80021de:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80021e2:	4620      	mov	r0, r4
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	7921      	ldrb	r1, [r4, #4]
 80021e8:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80021ea:	2000      	movs	r0, #0
 80021ec:	bd38      	pop	{r3, r4, r5, pc}

080021ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80021ee:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80021f0:	2000      	movs	r0, #0
 80021f2:	4770      	bx	lr

080021f4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80021f4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021f8:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80021fc:	2304      	movs	r3, #4
 80021fe:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002202:	2000      	movs	r0, #0
 8002204:	4770      	bx	lr

08002206 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002206:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800220a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800220e:	2000      	movs	r0, #0
 8002210:	4770      	bx	lr

08002212 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002212:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002214:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002218:	2a03      	cmp	r2, #3
 800221a:	d104      	bne.n	8002226 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800221c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	b103      	cbz	r3, 8002226 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002224:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002226:	2000      	movs	r0, #0
 8002228:	bd08      	pop	{r3, pc}

0800222a <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800222a:	b510      	push	{r4, lr}
 800222c:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	f000 fbec 	bl	8002a0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002234:	4620      	mov	r0, r4
}
 8002236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800223a:	2100      	movs	r1, #0
 800223c:	f000 bbe6 	b.w	8002a0c <USBD_LL_StallEP>

08002240 <USBD_StdDevReq>:
{
 8002240:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002242:	784b      	ldrb	r3, [r1, #1]
{
 8002244:	4604      	mov	r4, r0
 8002246:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002248:	2b09      	cmp	r3, #9
 800224a:	d87e      	bhi.n	800234a <USBD_StdDevReq+0x10a>
 800224c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002250:	00ec00d0 	.word	0x00ec00d0
 8002254:	00e0007d 	.word	0x00e0007d
 8002258:	0074007d 	.word	0x0074007d
 800225c:	007d000a 	.word	0x007d000a
 8002260:	009400c0 	.word	0x009400c0
  switch (req->wValue >> 8)
 8002264:	8849      	ldrh	r1, [r1, #2]
 8002266:	0a0b      	lsrs	r3, r1, #8
 8002268:	3b01      	subs	r3, #1
 800226a:	2b06      	cmp	r3, #6
 800226c:	d86d      	bhi.n	800234a <USBD_StdDevReq+0x10a>
 800226e:	e8df f003 	tbb	[pc, r3]
 8002272:	1c04      	.short	0x1c04
 8002274:	506c6c29 	.word	0x506c6c29
 8002278:	59          	.byte	0x59
 8002279:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800227a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800227e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002280:	7c20      	ldrb	r0, [r4, #16]
 8002282:	f10d 0106 	add.w	r1, sp, #6
 8002286:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002288:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800228c:	2a00      	cmp	r2, #0
 800228e:	d06e      	beq.n	800236e <USBD_StdDevReq+0x12e>
 8002290:	88eb      	ldrh	r3, [r5, #6]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d06b      	beq.n	800236e <USBD_StdDevReq+0x12e>
    len = MIN(len , req->wLength);
 8002296:	429a      	cmp	r2, r3
 8002298:	bf28      	it	cs
 800229a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 800229c:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 800229e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80022a2:	4620      	mov	r0, r4
 80022a4:	f000 f982 	bl	80025ac <USBD_CtlSendData>
    break;
 80022a8:	e061      	b.n	800236e <USBD_StdDevReq+0x12e>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80022aa:	7c02      	ldrb	r2, [r0, #16]
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80022ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80022b0:	b932      	cbnz	r2, 80022c0 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80022b4:	f10d 0006 	add.w	r0, sp, #6
 80022b8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80022ba:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80022bc:	7043      	strb	r3, [r0, #1]
      break; 
 80022be:	e7e3      	b.n	8002288 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	e7f7      	b.n	80022b4 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80022c4:	b2c9      	uxtb	r1, r1
 80022c6:	2905      	cmp	r1, #5
 80022c8:	d81c      	bhi.n	8002304 <USBD_StdDevReq+0xc4>
 80022ca:	e8df f001 	tbb	[pc, r1]
 80022ce:	0703      	.short	0x0703
 80022d0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80022d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	e7d1      	b.n	8002280 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80022dc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	e7cd      	b.n	8002280 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80022e4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	e7c9      	b.n	8002280 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80022ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	e7c5      	b.n	8002280 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80022f4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	e7c1      	b.n	8002280 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80022fc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	e7bd      	b.n	8002280 <USBD_StdDevReq+0x40>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8002304:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002308:	f10d 0206 	add.w	r2, sp, #6
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	4798      	blx	r3
      break;
 8002310:	e7ba      	b.n	8002288 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002312:	7c03      	ldrb	r3, [r0, #16]
 8002314:	b9cb      	cbnz	r3, 800234a <USBD_StdDevReq+0x10a>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002316:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800231a:	f10d 0006 	add.w	r0, sp, #6
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	4798      	blx	r3
      break;
 8002322:	e7b1      	b.n	8002288 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002324:	7c03      	ldrb	r3, [r0, #16]
 8002326:	b983      	cbnz	r3, 800234a <USBD_StdDevReq+0x10a>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002328:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800232c:	f10d 0006 	add.w	r0, sp, #6
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002334:	2307      	movs	r3, #7
 8002336:	e7c1      	b.n	80022bc <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002338:	888b      	ldrh	r3, [r1, #4]
 800233a:	b933      	cbnz	r3, 800234a <USBD_StdDevReq+0x10a>
 800233c:	88cb      	ldrh	r3, [r1, #6]
 800233e:	b923      	cbnz	r3, 800234a <USBD_StdDevReq+0x10a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002340:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002344:	884d      	ldrh	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002346:	2b03      	cmp	r3, #3
 8002348:	d103      	bne.n	8002352 <USBD_StdDevReq+0x112>
       USBD_CtlError(pdev , req);                     
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff ff6d 	bl	800222a <USBD_CtlError.constprop.0>
      break;
 8002350:	e00d      	b.n	800236e <USBD_StdDevReq+0x12e>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002352:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002356:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8002358:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800235c:	f000 fb82 	bl	8002a64 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002360:	4620      	mov	r0, r4
 8002362:	f000 f94d 	bl	8002600 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002366:	b12d      	cbz	r5, 8002374 <USBD_StdDevReq+0x134>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002368:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800236a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800236e:	2000      	movs	r0, #0
 8002370:	b003      	add	sp, #12
 8002372:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002374:	2301      	movs	r3, #1
 8002376:	e7f8      	b.n	800236a <USBD_StdDevReq+0x12a>
  cfgidx = (uint8_t)(req->wValue);                 
 8002378:	7889      	ldrb	r1, [r1, #2]
 800237a:	4d30      	ldr	r5, [pc, #192]	; (800243c <USBD_StdDevReq+0x1fc>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800237c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800237e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002380:	d8e3      	bhi.n	800234a <USBD_StdDevReq+0x10a>
    switch (pdev->dev_state) 
 8002382:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002386:	2b02      	cmp	r3, #2
 8002388:	d00c      	beq.n	80023a4 <USBD_StdDevReq+0x164>
 800238a:	2b03      	cmp	r3, #3
 800238c:	d1dd      	bne.n	800234a <USBD_StdDevReq+0x10a>
      if (cfgidx == 0) 
 800238e:	b9b1      	cbnz	r1, 80023be <USBD_StdDevReq+0x17e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002390:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002392:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002394:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002398:	f7ff fe57 	bl	800204a <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800239c:	4620      	mov	r0, r4
 800239e:	f000 f92f 	bl	8002600 <USBD_CtlSendStatus>
 80023a2:	e7e4      	b.n	800236e <USBD_StdDevReq+0x12e>
      if (cfgidx) 
 80023a4:	2900      	cmp	r1, #0
 80023a6:	d0f9      	beq.n	800239c <USBD_StdDevReq+0x15c>
        pdev->dev_config = cfgidx;
 80023a8:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023aa:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80023ac:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80023ae:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fe3c 	bl	8002030 <USBD_SetClassConfig>
 80023b8:	2802      	cmp	r0, #2
 80023ba:	d1ef      	bne.n	800239c <USBD_StdDevReq+0x15c>
 80023bc:	e7c5      	b.n	800234a <USBD_StdDevReq+0x10a>
      else  if (cfgidx != pdev->dev_config) 
 80023be:	6841      	ldr	r1, [r0, #4]
 80023c0:	2901      	cmp	r1, #1
 80023c2:	d0eb      	beq.n	800239c <USBD_StdDevReq+0x15c>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80023c4:	b2c9      	uxtb	r1, r1
 80023c6:	f7ff fe40 	bl	800204a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80023ca:	7829      	ldrb	r1, [r5, #0]
 80023cc:	6061      	str	r1, [r4, #4]
 80023ce:	e7f0      	b.n	80023b2 <USBD_StdDevReq+0x172>
  if (req->wLength != 1) 
 80023d0:	88ca      	ldrh	r2, [r1, #6]
 80023d2:	2a01      	cmp	r2, #1
 80023d4:	d1b9      	bne.n	800234a <USBD_StdDevReq+0x10a>
    switch (pdev->dev_state )  
 80023d6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d003      	beq.n	80023e6 <USBD_StdDevReq+0x1a6>
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d1b3      	bne.n	800234a <USBD_StdDevReq+0x10a>
      USBD_CtlSendData (pdev, 
 80023e2:	1d01      	adds	r1, r0, #4
 80023e4:	e75d      	b.n	80022a2 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80023e6:	4601      	mov	r1, r0
 80023e8:	2300      	movs	r3, #0
 80023ea:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80023ee:	e758      	b.n	80022a2 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80023f0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023f4:	3b02      	subs	r3, #2
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d8a7      	bhi.n	800234a <USBD_StdDevReq+0x10a>
    if (pdev->dev_remote_wakeup) 
 80023fa:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80023fe:	4601      	mov	r1, r0
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2303      	movne	r3, #3
 8002406:	2301      	moveq	r3, #1
    USBD_CtlSendData (pdev, 
 8002408:	2202      	movs	r2, #2
 800240a:	f841 3f0c 	str.w	r3, [r1, #12]!
 800240e:	e748      	b.n	80022a2 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002410:	884b      	ldrh	r3, [r1, #2]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d1ab      	bne.n	800236e <USBD_StdDevReq+0x12e>
      pdev->dev_remote_wakeup = 0; 
 8002416:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800241a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800241e:	4629      	mov	r1, r5
 8002420:	4620      	mov	r0, r4
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4798      	blx	r3
 8002426:	e7b9      	b.n	800239c <USBD_StdDevReq+0x15c>
  switch (pdev->dev_state)
 8002428:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800242c:	3b02      	subs	r3, #2
 800242e:	2b01      	cmp	r3, #1
 8002430:	d88b      	bhi.n	800234a <USBD_StdDevReq+0x10a>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002432:	884b      	ldrh	r3, [r1, #2]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d19a      	bne.n	800236e <USBD_StdDevReq+0x12e>
      pdev->dev_remote_wakeup = 0; 
 8002438:	2300      	movs	r3, #0
 800243a:	e7ec      	b.n	8002416 <USBD_StdDevReq+0x1d6>
 800243c:	200001ff 	.word	0x200001ff

08002440 <USBD_StdItfReq>:
{
 8002440:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002442:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002446:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002448:	2b03      	cmp	r3, #3
{
 800244a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800244c:	d10d      	bne.n	800246a <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800244e:	790b      	ldrb	r3, [r1, #4]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d80a      	bhi.n	800246a <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002454:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800245c:	88eb      	ldrh	r3, [r5, #6]
 800245e:	b913      	cbnz	r3, 8002466 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002460:	4620      	mov	r0, r4
 8002462:	f000 f8cd 	bl	8002600 <USBD_CtlSendStatus>
}
 8002466:	2000      	movs	r0, #0
 8002468:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800246a:	f7ff fede 	bl	800222a <USBD_CtlError.constprop.0>
    break;
 800246e:	e7fa      	b.n	8002466 <USBD_StdItfReq+0x26>

08002470 <USBD_StdEPReq>:
{
 8002470:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002472:	780a      	ldrb	r2, [r1, #0]
{
 8002474:	4604      	mov	r4, r0
  if ((req->bmRequest & 0x60) == 0x20)
 8002476:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800247a:	2a20      	cmp	r2, #32
{
 800247c:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800247e:	888e      	ldrh	r6, [r1, #4]
 8002480:	790b      	ldrb	r3, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002482:	d105      	bne.n	8002490 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002484:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4798      	blx	r3
}
 800248c:	2000      	movs	r0, #0
 800248e:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002490:	784a      	ldrb	r2, [r1, #1]
 8002492:	2a01      	cmp	r2, #1
 8002494:	d03a      	beq.n	800250c <USBD_StdEPReq+0x9c>
 8002496:	2a03      	cmp	r2, #3
 8002498:	d01d      	beq.n	80024d6 <USBD_StdEPReq+0x66>
 800249a:	2a00      	cmp	r2, #0
 800249c:	d1f6      	bne.n	800248c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800249e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024a2:	2a02      	cmp	r2, #2
 80024a4:	d041      	beq.n	800252a <USBD_StdEPReq+0xba>
 80024a6:	2a03      	cmp	r2, #3
 80024a8:	d11b      	bne.n	80024e2 <USBD_StdEPReq+0x72>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80024aa:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 80024ae:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80024b2:	0632      	lsls	r2, r6, #24
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80024b4:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80024b6:	bf4c      	ite	mi
 80024b8:	3514      	addmi	r5, #20
 80024ba:	f505 7582 	addpl.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80024be:	f000 fac1 	bl	8002a44 <USBD_LL_IsStallEP>
 80024c2:	3800      	subs	r0, #0
 80024c4:	bf18      	it	ne
 80024c6:	2001      	movne	r0, #1
      USBD_CtlSendData (pdev,
 80024c8:	2202      	movs	r2, #2
 80024ca:	6028      	str	r0, [r5, #0]
 80024cc:	4629      	mov	r1, r5
 80024ce:	4620      	mov	r0, r4
 80024d0:	f000 f86c 	bl	80025ac <USBD_CtlSendData>
      break;
 80024d4:	e7da      	b.n	800248c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80024d6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024da:	2a02      	cmp	r2, #2
 80024dc:	d025      	beq.n	800252a <USBD_StdEPReq+0xba>
 80024de:	2a03      	cmp	r2, #3
 80024e0:	d003      	beq.n	80024ea <USBD_StdEPReq+0x7a>
      USBD_CtlError(pdev , req);
 80024e2:	4620      	mov	r0, r4
 80024e4:	f7ff fea1 	bl	800222a <USBD_CtlError.constprop.0>
      break;    
 80024e8:	e7d0      	b.n	800248c <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80024ea:	884a      	ldrh	r2, [r1, #2]
 80024ec:	b922      	cbnz	r2, 80024f8 <USBD_StdEPReq+0x88>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80024ee:	065a      	lsls	r2, r3, #25
 80024f0:	d002      	beq.n	80024f8 <USBD_StdEPReq+0x88>
          USBD_LL_StallEP(pdev , ep_addr);
 80024f2:	4619      	mov	r1, r3
 80024f4:	f000 fa8a 	bl	8002a0c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80024f8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80024fc:	4629      	mov	r1, r5
 80024fe:	4620      	mov	r0, r4
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002504:	4620      	mov	r0, r4
 8002506:	f000 f87b 	bl	8002600 <USBD_CtlSendStatus>
 800250a:	e7bf      	b.n	800248c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800250c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002510:	2a02      	cmp	r2, #2
 8002512:	d00a      	beq.n	800252a <USBD_StdEPReq+0xba>
 8002514:	2a03      	cmp	r2, #3
 8002516:	d1e4      	bne.n	80024e2 <USBD_StdEPReq+0x72>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002518:	884a      	ldrh	r2, [r1, #2]
 800251a:	2a00      	cmp	r2, #0
 800251c:	d1b6      	bne.n	800248c <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800251e:	065e      	lsls	r6, r3, #25
 8002520:	d0f0      	beq.n	8002504 <USBD_StdEPReq+0x94>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002522:	4619      	mov	r1, r3
 8002524:	f000 fa80 	bl	8002a28 <USBD_LL_ClearStallEP>
 8002528:	e7e6      	b.n	80024f8 <USBD_StdEPReq+0x88>
      if ((ep_addr & 0x7F) != 0x00) 
 800252a:	0659      	lsls	r1, r3, #25
 800252c:	d0ae      	beq.n	800248c <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800252e:	4619      	mov	r1, r3
 8002530:	f000 fa6c 	bl	8002a0c <USBD_LL_StallEP>
 8002534:	e7aa      	b.n	800248c <USBD_StdEPReq+0x1c>

08002536 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002536:	780b      	ldrb	r3, [r1, #0]
 8002538:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800253a:	784b      	ldrb	r3, [r1, #1]
 800253c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800253e:	78ca      	ldrb	r2, [r1, #3]
 8002540:	788b      	ldrb	r3, [r1, #2]
 8002542:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002546:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002548:	794a      	ldrb	r2, [r1, #5]
 800254a:	790b      	ldrb	r3, [r1, #4]
 800254c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002550:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002552:	79ca      	ldrb	r2, [r1, #7]
 8002554:	798b      	ldrb	r3, [r1, #6]
 8002556:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800255a:	80c3      	strh	r3, [r0, #6]
}
 800255c:	4770      	bx	lr

0800255e <USBD_CtlError>:
{
 800255e:	b510      	push	{r4, lr}
 8002560:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	f000 fa52 	bl	8002a0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002568:	4620      	mov	r0, r4
}
 800256a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800256e:	2100      	movs	r1, #0
 8002570:	f000 ba4c 	b.w	8002a0c <USBD_LL_StallEP>

08002574 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002574:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002576:	b188      	cbz	r0, 800259c <USBD_GetString+0x28>
 8002578:	2400      	movs	r4, #0
 800257a:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800257c:	4623      	mov	r3, r4
 800257e:	3401      	adds	r4, #1
 8002580:	5d05      	ldrb	r5, [r0, r4]
 8002582:	2d00      	cmp	r5, #0
 8002584:	d1fa      	bne.n	800257c <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002586:	b2db      	uxtb	r3, r3
 8002588:	3301      	adds	r3, #1
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800258e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002590:	2303      	movs	r3, #3
 8002592:	704b      	strb	r3, [r1, #1]
 8002594:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002596:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800259a:	b904      	cbnz	r4, 800259e <USBD_GetString+0x2a>
}
 800259c:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	54cc      	strb	r4, [r1, r3]
 80025a2:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80025a4:	3302      	adds	r3, #2
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	548d      	strb	r5, [r1, r2]
 80025aa:	e7f4      	b.n	8002596 <USBD_GetString+0x22>

080025ac <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80025ac:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80025ae:	2202      	movs	r2, #2
{
 80025b0:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80025b2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80025b6:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80025ba:	460a      	mov	r2, r1
 80025bc:	2100      	movs	r1, #0
 80025be:	f000 fa5f 	bl	8002a80 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80025c2:	2000      	movs	r0, #0
 80025c4:	bd10      	pop	{r4, pc}

080025c6 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80025c6:	b508      	push	{r3, lr}
 80025c8:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80025ca:	460a      	mov	r2, r1
 80025cc:	2100      	movs	r1, #0
 80025ce:	f000 fa57 	bl	8002a80 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80025d2:	2000      	movs	r0, #0
 80025d4:	bd08      	pop	{r3, pc}

080025d6 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80025d6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80025d8:	2203      	movs	r2, #3
{
 80025da:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80025dc:	e9c0 3342 	strd	r3, r3, [r0, #264]	; 0x108
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80025e0:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80025e4:	460a      	mov	r2, r1
 80025e6:	2100      	movs	r1, #0
 80025e8:	f000 fa58 	bl	8002a9c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80025ec:	2000      	movs	r0, #0
 80025ee:	bd10      	pop	{r4, pc}

080025f0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80025f0:	b508      	push	{r3, lr}
 80025f2:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 80025f4:	460a      	mov	r2, r1
 80025f6:	2100      	movs	r1, #0
 80025f8:	f000 fa50 	bl	8002a9c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80025fc:	2000      	movs	r0, #0
 80025fe:	bd08      	pop	{r3, pc}

08002600 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002600:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002602:	2304      	movs	r3, #4
 8002604:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002608:	2300      	movs	r3, #0
 800260a:	461a      	mov	r2, r3
 800260c:	4619      	mov	r1, r3
 800260e:	f000 fa37 	bl	8002a80 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002612:	2000      	movs	r0, #0
 8002614:	bd08      	pop	{r3, pc}

08002616 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002616:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002618:	2305      	movs	r3, #5
 800261a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800261e:	2300      	movs	r3, #0
 8002620:	461a      	mov	r2, r3
 8002622:	4619      	mov	r1, r3
 8002624:	f000 fa3a 	bl	8002a9c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002628:	2000      	movs	r0, #0
 800262a:	bd08      	pop	{r3, pc}

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800262e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002632:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002634:	2502      	movs	r5, #2
{
 8002636:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002638:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800263a:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800263e:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002642:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002646:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002648:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800264a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800264c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264e:	f7fe fc27 	bl	8000ea0 <HAL_RCC_OscConfig>
 8002652:	b100      	cbz	r0, 8002656 <SystemClock_Config+0x2a>
 8002654:	e7fe      	b.n	8002654 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002656:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002658:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800265c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002660:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002662:	e9cd 3008 	strd	r3, r0, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002666:	4621      	mov	r1, r4
 8002668:	a805      	add	r0, sp, #20
 800266a:	f7fe fde1 	bl	8001230 <HAL_RCC_ClockConfig>
 800266e:	b100      	cbz	r0, 8002672 <SystemClock_Config+0x46>
 8002670:	e7fe      	b.n	8002670 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002672:	2310      	movs	r3, #16
 8002674:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267a:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800267c:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267e:	f7fe fe7f 	bl	8001380 <HAL_RCCEx_PeriphCLKConfig>
 8002682:	4604      	mov	r4, r0
 8002684:	b100      	cbz	r0, 8002688 <SystemClock_Config+0x5c>
 8002686:	e7fe      	b.n	8002686 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002688:	f7fe fe74 	bl	8001374 <HAL_RCC_GetHCLKFreq>
 800268c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002690:	fbb0 f0f3 	udiv	r0, r0, r3
 8002694:	f7fd fe02 	bl	800029c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002698:	2004      	movs	r0, #4
 800269a:	f7fd fe13 	bl	80002c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800269e:	4622      	mov	r2, r4
 80026a0:	4621      	mov	r1, r4
 80026a2:	f04f 30ff 	mov.w	r0, #4294967295
 80026a6:	f7fd fdbd 	bl	8000224 <HAL_NVIC_SetPriority>
}
 80026aa:	b015      	add	sp, #84	; 0x54
 80026ac:	bd30      	pop	{r4, r5, pc}
	...

080026b0 <main>:
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
  HAL_Init();
 80026b6:	f7fd fd6d 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80026ba:	f7ff ffb7 	bl	800262c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <main+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin : Firmup_Pin_Pin */
  GPIO_InitStruct.Pin = Firmup_Pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Firmup_Pin_GPIO_Port, &GPIO_InitStruct);
 80026c6:	481d      	ldr	r0, [pc, #116]	; (800273c <main+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c8:	f042 0210 	orr.w	r2, r2, #16
 80026cc:	619a      	str	r2, [r3, #24]
 80026ce:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(Firmup_Pin_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 0110 	add.w	r1, r7, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d4:	f002 0210 	and.w	r2, r2, #16
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	687a      	ldr	r2, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	619a      	str	r2, [r3, #24]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	f002 0220 	and.w	r2, r2, #32
 80026ea:	60ba      	str	r2, [r7, #8]
 80026ec:	68ba      	ldr	r2, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	f042 0204 	orr.w	r2, r2, #4
 80026f4:	619a      	str	r2, [r3, #24]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002700:	2300      	movs	r3, #0
 8002702:	e9c7 4304 	strd	r4, r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Firmup_Pin_GPIO_Port, &GPIO_InitStruct);
 8002708:	f7fd ff12 	bl	8000530 <HAL_GPIO_Init>
  if (HAL_GPIO_ReadPin(Firmup_Pin_GPIO_Port, Firmup_Pin_Pin) != GPIO_PIN_RESET)
 800270c:	4621      	mov	r1, r4
 800270e:	480b      	ldr	r0, [pc, #44]	; (800273c <main+0x8c>)
 8002710:	f7fd ffe8 	bl	80006e4 <HAL_GPIO_ReadPin>
 8002714:	b160      	cbz	r0, 8002730 <main+0x80>
    if (((*(__IO uint32_t*)USBD_DFU_APP_DEFAULT_ADD - 1) & 0x2FFFB000 ) == 0x20000000)
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <main+0x90>)
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <main+0x94>)
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	3901      	subs	r1, #1
 800271e:	400a      	ands	r2, r1
 8002720:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002724:	d104      	bne.n	8002730 <main+0x80>
      JumpAddress = *(__IO uint32_t*) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8002726:	685a      	ldr	r2, [r3, #4]
      __set_MSP(*(__IO uint32_t*) USBD_DFU_APP_DEFAULT_ADD);
 8002728:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 800272a:	f383 8808 	msr	MSP, r3
      Jump_To_Application();
 800272e:	4790      	blx	r2
  MX_USB_DEVICE_Init();
 8002730:	f000 f898 	bl	8002864 <MX_USB_DEVICE_Init>
  while (1)
 8002734:	e7fe      	b.n	8002734 <main+0x84>
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	40011000 	.word	0x40011000
 8002740:	08010000 	.word	0x08010000
 8002744:	2fffb000 	.word	0x2fffb000

08002748 <_Error_Handler>:
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002748:	e7fe      	b.n	8002748 <_Error_Handler>
	...

0800274c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_MspInit+0x98>)
{
 800274e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002750:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002752:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	f002 0201 	and.w	r2, r2, #1
 8002760:	9200      	str	r2, [sp, #0]
 8002762:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800276a:	61da      	str	r2, [r3, #28]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002776:	f7fd fd43 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	f06f 000b 	mvn.w	r0, #11
 8002780:	4611      	mov	r1, r2
 8002782:	f7fd fd4f 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	f06f 000a 	mvn.w	r0, #10
 800278c:	4611      	mov	r1, r2
 800278e:	f7fd fd49 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	f06f 0009 	mvn.w	r0, #9
 8002798:	4611      	mov	r1, r2
 800279a:	f7fd fd43 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	f06f 0004 	mvn.w	r0, #4
 80027a4:	4611      	mov	r1, r2
 80027a6:	f7fd fd3d 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	f06f 0003 	mvn.w	r0, #3
 80027b0:	4611      	mov	r1, r2
 80027b2:	f7fd fd37 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	f06f 0001 	mvn.w	r0, #1
 80027bc:	4611      	mov	r1, r2
 80027be:	f7fd fd31 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	4611      	mov	r1, r2
 80027ca:	f7fd fd2b 	bl	8000224 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ce:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <HAL_MspInit+0x9c>)
 80027d0:	6853      	ldr	r3, [r2, #4]
 80027d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027da:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027dc:	b003      	add	sp, #12
 80027de:	f85d fb04 	ldr.w	pc, [sp], #4
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000

080027ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027ec:	4770      	bx	lr

080027ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <HardFault_Handler>

080027f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <MemManage_Handler>

080027f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <BusFault_Handler>

080027f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <UsageFault_Handler>

080027f6 <SVC_Handler>:
 80027f6:	4770      	bx	lr

080027f8 <DebugMon_Handler>:
 80027f8:	4770      	bx	lr

080027fa <PendSV_Handler>:
 80027fa:	4770      	bx	lr

080027fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80027fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027fe:	f7fd fcdb 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002806:	f7fd bd69 	b.w	80002dc <HAL_SYSTICK_IRQHandler>
	...

0800280c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800280c:	4801      	ldr	r0, [pc, #4]	; (8002814 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800280e:	f7fe b867 	b.w	80008e0 <HAL_PCD_IRQHandler>
 8002812:	bf00      	nop
 8002814:	20000424 	.word	0x20000424

08002818 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <SystemInit+0x40>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	4a0d      	ldr	r2, [pc, #52]	; (800285c <SystemInit+0x44>)
 8002826:	400a      	ands	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002830:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002834:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800283c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002844:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002846:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800284a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800284c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <SystemInit+0x48>)
 8002852:	609a      	str	r2, [r3, #8]
#endif 
}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	f8ff0000 	.word	0xf8ff0000
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002864:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002866:	4c09      	ldr	r4, [pc, #36]	; (800288c <MX_USB_DEVICE_Init+0x28>)
 8002868:	2200      	movs	r2, #0
 800286a:	4620      	mov	r0, r4
 800286c:	4908      	ldr	r1, [pc, #32]	; (8002890 <MX_USB_DEVICE_Init+0x2c>)
 800286e:	f7ff fbb2 	bl	8001fd6 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU);
 8002872:	4620      	mov	r0, r4
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <MX_USB_DEVICE_Init+0x30>)
 8002876:	f7ff fbc3 	bl	8002000 <USBD_RegisterClass>

  USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS);
 800287a:	4620      	mov	r0, r4
 800287c:	4906      	ldr	r1, [pc, #24]	; (8002898 <MX_USB_DEVICE_Init+0x34>)
 800287e:	f7ff fba5 	bl	8001fcc <USBD_DFU_RegisterMedia>

  USBD_Start(&hUsbDeviceFS);
 8002882:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002888:	f7ff bbc1 	b.w	800200e <USBD_Start>
 800288c:	20000200 	.word	0x20000200
 8002890:	20000070 	.word	0x20000070
 8002894:	20000008 	.word	0x20000008
 8002898:	200000a4 	.word	0x200000a4

0800289c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800289c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_PCD_MspInit+0x3c>)
 80028a0:	6802      	ldr	r2, [r0, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d115      	bne.n	80028d2 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80028a6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80028aa:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80028ac:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80028ae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028b2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80028b4:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80028b6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80028b8:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80028ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80028c2:	f7fd fcaf 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80028c6:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80028c8:	b003      	add	sp, #12
 80028ca:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80028ce:	f7fd bcd9 	b.w	8000284 <HAL_NVIC_EnableIRQ>
}
 80028d2:	b003      	add	sp, #12
 80028d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80028d8:	40005c00 	.word	0x40005c00

080028dc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80028dc:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 80028e0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80028e4:	f7ff bbb8 	b.w	8002058 <USBD_LL_SetupStage>

080028e8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80028e8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80028ec:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 80028f0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80028f4:	f7ff bbdd 	b.w	80020b2 <USBD_LL_DataOutStage>

080028f8 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80028f8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80028fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028fe:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002902:	f7ff bc06 	b.w	8002112 <USBD_LL_DataInStage>

08002906 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002906:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800290a:	f7ff bc82 	b.w	8002212 <USBD_LL_SOF>

0800290e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800290e:	b510      	push	{r4, lr}
 8002910:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002912:	2101      	movs	r1, #1
 8002914:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002918:	f7ff fc69 	bl	80021ee <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800291c:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002924:	f7ff bc44 	b.w	80021b0 <USBD_LL_Reset>

08002928 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002928:	b510      	push	{r4, lr}
 800292a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800292c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002930:	f7ff fc60 	bl	80021f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002934:	69a3      	ldr	r3, [r4, #24]
 8002936:	b123      	cbz	r3, 8002942 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002938:	4a02      	ldr	r2, [pc, #8]	; (8002944 <HAL_PCD_SuspendCallback+0x1c>)
 800293a:	6913      	ldr	r3, [r2, #16]
 800293c:	f043 0306 	orr.w	r3, r3, #6
 8002940:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8002942:	bd10      	pop	{r4, pc}
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002948:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800294c:	f7ff bc5b 	b.w	8002206 <USBD_LL_Resume>

08002950 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002950:	2308      	movs	r3, #8
{
 8002952:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <USBD_LL_Init+0x58>)
{
 8002956:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8002958:	4814      	ldr	r0, [pc, #80]	; (80029ac <USBD_LL_Init+0x5c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800295a:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800295c:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002960:	2303      	movs	r3, #3
 8002962:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002966:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002968:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 800296c:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002970:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002974:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002976:	f7fd febb 	bl	80006f0 <HAL_PCD_Init>
 800297a:	b120      	cbz	r0, 8002986 <USBD_LL_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 800297c:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002980:	480b      	ldr	r0, [pc, #44]	; (80029b0 <USBD_LL_Init+0x60>)
 8002982:	f7ff fee1 	bl	8002748 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002986:	2200      	movs	r2, #0
 8002988:	2318      	movs	r3, #24
 800298a:	4611      	mov	r1, r2
 800298c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002990:	f7fe fa6d 	bl	8000e6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002994:	2358      	movs	r3, #88	; 0x58
 8002996:	2200      	movs	r2, #0
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800299e:	f7fe fa66 	bl	8000e6e <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80029a2:	2000      	movs	r0, #0
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	bf00      	nop
 80029a8:	40005c00 	.word	0x40005c00
 80029ac:	20000424 	.word	0x20000424
 80029b0:	08002ccd 	.word	0x08002ccd

080029b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80029b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80029b6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80029ba:	f7fd ff00 	bl	80007be <HAL_PCD_Start>
     
  switch (hal_status) {
 80029be:	2803      	cmp	r0, #3
 80029c0:	bf96      	itet	ls
 80029c2:	4b02      	ldrls	r3, [pc, #8]	; (80029cc <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80029c4:	2002      	movhi	r0, #2
 80029c6:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80029c8:	bd08      	pop	{r3, pc}
 80029ca:	bf00      	nop
 80029cc:	08002ce0 	.word	0x08002ce0

080029d0 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80029d0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Stop(pdev->pData);
 80029d2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80029d6:	f7fd ff09 	bl	80007ec <HAL_PCD_Stop>

  switch (hal_status) {
 80029da:	2803      	cmp	r0, #3
 80029dc:	bf96      	itet	ls
 80029de:	4b02      	ldrls	r3, [pc, #8]	; (80029e8 <USBD_LL_Stop+0x18>)
  hal_status = HAL_PCD_Stop(pdev->pData);
 80029e0:	2002      	movhi	r0, #2
 80029e2:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80029e4:	bd08      	pop	{r3, pc}
 80029e6:	bf00      	nop
 80029e8:	08002ce0 	.word	0x08002ce0

080029ec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80029ec:	b510      	push	{r4, lr}
 80029ee:	4614      	mov	r4, r2
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80029f0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 80029f4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80029f6:	4623      	mov	r3, r4
 80029f8:	f7fd ff24 	bl	8000844 <HAL_PCD_EP_Open>

  switch (hal_status) {
 80029fc:	2803      	cmp	r0, #3
 80029fe:	bf96      	itet	ls
 8002a00:	4b01      	ldrls	r3, [pc, #4]	; (8002a08 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002a02:	2002      	movhi	r0, #2
 8002a04:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002a06:	bd10      	pop	{r4, pc}
 8002a08:	08002ce0 	.word	0x08002ce0

08002a0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002a0c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002a0e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002a12:	f7fe f9e1 	bl	8000dd8 <HAL_PCD_EP_SetStall>

  switch (hal_status) {
 8002a16:	2803      	cmp	r0, #3
 8002a18:	bf96      	itet	ls
 8002a1a:	4b02      	ldrls	r3, [pc, #8]	; (8002a24 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002a1c:	2002      	movhi	r0, #2
 8002a1e:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002a20:	bd08      	pop	{r3, pc}
 8002a22:	bf00      	nop
 8002a24:	08002ce0 	.word	0x08002ce0

08002a28 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002a28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002a2a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002a2e:	f7fe f9fb 	bl	8000e28 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8002a32:	2803      	cmp	r0, #3
 8002a34:	bf96      	itet	ls
 8002a36:	4b02      	ldrls	r3, [pc, #8]	; (8002a40 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002a38:	2002      	movhi	r0, #2
 8002a3a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002a3c:	bd08      	pop	{r3, pc}
 8002a3e:	bf00      	nop
 8002a40:	08002ce0 	.word	0x08002ce0

08002a44 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002a44:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002a46:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002a4a:	bf45      	ittet	mi
 8002a4c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002a50:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002a54:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002a58:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002a5c:	bf58      	it	pl
 8002a5e:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002a62:	4770      	bx	lr

08002a64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002a64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002a66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002a6a:	f7fd fed7 	bl	800081c <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8002a6e:	2803      	cmp	r0, #3
 8002a70:	bf96      	itet	ls
 8002a72:	4b02      	ldrls	r3, [pc, #8]	; (8002a7c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002a74:	2002      	movhi	r0, #2
 8002a76:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002a78:	bd08      	pop	{r3, pc}
 8002a7a:	bf00      	nop
 8002a7c:	08002ce0 	.word	0x08002ce0

08002a80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002a80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002a82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002a86:	f7fd ff15 	bl	80008b4 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8002a8a:	2803      	cmp	r0, #3
 8002a8c:	bf96      	itet	ls
 8002a8e:	4b02      	ldrls	r3, [pc, #8]	; (8002a98 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002a90:	2002      	movhi	r0, #2
 8002a92:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002a94:	bd08      	pop	{r3, pc}
 8002a96:	bf00      	nop
 8002a98:	08002ce0 	.word	0x08002ce0

08002a9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002a9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002a9e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002aa2:	f7fd fef2 	bl	800088a <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8002aa6:	2803      	cmp	r0, #3
 8002aa8:	bf96      	itet	ls
 8002aaa:	4b02      	ldrls	r3, [pc, #8]	; (8002ab4 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002aac:	2002      	movhi	r0, #2
 8002aae:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002ab0:	bd08      	pop	{r3, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08002ce0 	.word	0x08002ce0

08002ab8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002ab8:	4800      	ldr	r0, [pc, #0]	; (8002abc <USBD_static_malloc+0x4>)
 8002aba:	4770      	bx	lr
 8002abc:	20000884 	.word	0x20000884

08002ac0 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8002ac2:	4770      	bx	lr

08002ac4 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002ac4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002ac6:	4801      	ldr	r0, [pc, #4]	; (8002acc <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002ac8:	800b      	strh	r3, [r1, #0]
}
 8002aca:	4770      	bx	lr
 8002acc:	2000008c 	.word	0x2000008c

08002ad0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002ad0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002ad2:	4801      	ldr	r0, [pc, #4]	; (8002ad8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002ad4:	800b      	strh	r3, [r1, #0]
}
 8002ad6:	4770      	bx	lr
 8002ad8:	200000a0 	.word	0x200000a0

08002adc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002adc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002ade:	4c04      	ldr	r4, [pc, #16]	; (8002af0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8002ae0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002ae2:	4804      	ldr	r0, [pc, #16]	; (8002af4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	f7ff fd45 	bl	8002574 <USBD_GetString>
  return USBD_StrDesc;
}
 8002aea:	4620      	mov	r0, r4
 8002aec:	bd10      	pop	{r4, pc}
 8002aee:	bf00      	nop
 8002af0:	20000ca0 	.word	0x20000ca0
 8002af4:	08002ce4 	.word	0x08002ce4

08002af8 <USBD_FS_ProductStrDescriptor>:
{
 8002af8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002afa:	4c04      	ldr	r4, [pc, #16]	; (8002b0c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8002afc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002afe:	4804      	ldr	r0, [pc, #16]	; (8002b10 <USBD_FS_ProductStrDescriptor+0x18>)
 8002b00:	4621      	mov	r1, r4
 8002b02:	f7ff fd37 	bl	8002574 <USBD_GetString>
}
 8002b06:	4620      	mov	r0, r4
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000ca0 	.word	0x20000ca0
 8002b10:	08002cf7 	.word	0x08002cf7

08002b14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002b14:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002b16:	4c04      	ldr	r4, [pc, #16]	; (8002b28 <USBD_FS_SerialStrDescriptor+0x14>)
{
 8002b18:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002b1a:	4804      	ldr	r0, [pc, #16]	; (8002b2c <USBD_FS_SerialStrDescriptor+0x18>)
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	f7ff fd29 	bl	8002574 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002b22:	4620      	mov	r0, r4
 8002b24:	bd10      	pop	{r4, pc}
 8002b26:	bf00      	nop
 8002b28:	20000ca0 	.word	0x20000ca0
 8002b2c:	08002d16 	.word	0x08002d16

08002b30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002b30:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002b32:	4c04      	ldr	r4, [pc, #16]	; (8002b44 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8002b34:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002b36:	4804      	ldr	r0, [pc, #16]	; (8002b48 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002b38:	4621      	mov	r1, r4
 8002b3a:	f7ff fd1b 	bl	8002574 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002b3e:	4620      	mov	r0, r4
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	bf00      	nop
 8002b44:	20000ca0 	.word	0x20000ca0
 8002b48:	08002d23 	.word	0x08002d23

08002b4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002b4c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002b4e:	4c04      	ldr	r4, [pc, #16]	; (8002b60 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8002b50:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002b52:	4804      	ldr	r0, [pc, #16]	; (8002b64 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002b54:	4621      	mov	r1, r4
 8002b56:	f7ff fd0d 	bl	8002574 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	bd10      	pop	{r4, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000ca0 	.word	0x20000ca0
 8002b64:	08002d2e 	.word	0x08002d2e

08002b68 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8002b68:	4603      	mov	r3, r0
 8002b6a:	b510      	push	{r4, lr}
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	441a      	add	r2, r3
 8002b70:	3901      	subs	r1, #1
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  uint32_t i = 0;
  uint8_t *psrc = src;
  for(i = 0;i < Len;i++) dest[i] = *psrc++;
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d100      	bne.n	8002b78 <MEM_If_Read_FS+0x10>
  return dest;
  /* USER CODE END 4 */
}
 8002b76:	bd10      	pop	{r4, pc}
  for(i = 0;i < Len;i++) dest[i] = *psrc++;
 8002b78:	f813 4b01 	ldrb.w	r4, [r3], #1
 8002b7c:	f801 4f01 	strb.w	r4, [r1, #1]!
 8002b80:	e7f7      	b.n	8002b72 <MEM_If_Read_FS+0xa>

08002b82 <MEM_If_GetStatus_FS>:

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002b82:	2000      	movs	r0, #0
 8002b84:	4770      	bx	lr

08002b86 <MEM_If_Write_FS>:
{
 8002b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b88:	4617      	mov	r7, r2
 8002b8a:	460d      	mov	r5, r1
 8002b8c:	1f06      	subs	r6, r0, #4
  for(i = 0;i < Len;i += 4)
 8002b8e:	f1c0 0404 	rsb	r4, r0, #4
 8002b92:	19a3      	adds	r3, r4, r6
 8002b94:	429f      	cmp	r7, r3
 8002b96:	d801      	bhi.n	8002b9c <MEM_If_Write_FS+0x16>
  return (USBD_OK);
 8002b98:	2000      	movs	r0, #0
}
 8002b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)(dest + i),*(uint32_t *)(src + i)) == HAL_OK)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	6872      	ldr	r2, [r6, #4]
 8002ba4:	f7fd fc0c 	bl	80003c0 <HAL_FLASH_Program>
 8002ba8:	b938      	cbnz	r0, 8002bba <MEM_If_Write_FS+0x34>
      if(*(uint32_t *)(src + i) != *(uint32_t *)(dest + i))
 8002baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bae:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d0ed      	beq.n	8002b92 <MEM_If_Write_FS+0xc>
    	  return 2;
 8002bb6:	2002      	movs	r0, #2
 8002bb8:	e7ef      	b.n	8002b9a <MEM_If_Write_FS+0x14>
      return 1;
 8002bba:	2001      	movs	r0, #1
 8002bbc:	e7ed      	b.n	8002b9a <MEM_If_Write_FS+0x14>

08002bbe <MEM_If_Erase_FS>:
{
 8002bbe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9302      	str	r3, [sp, #8]
  pEraseInit.NbPages = 1;
 8002bc4:	2301      	movs	r3, #1
  if(HAL_FLASHEx_Erase(&pEraseInit,&SectorError)!=HAL_OK)
 8002bc6:	a901      	add	r1, sp, #4
  pEraseInit.PageAddress = Add;
 8002bc8:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if(HAL_FLASHEx_Erase(&pEraseInit,&SectorError)!=HAL_OK)
 8002bcc:	a802      	add	r0, sp, #8
  pEraseInit.Banks = FLASH_BANK_1;
 8002bce:	9303      	str	r3, [sp, #12]
  if(HAL_FLASHEx_Erase(&pEraseInit,&SectorError)!=HAL_OK)
 8002bd0:	f7fd fc5a 	bl	8000488 <HAL_FLASHEx_Erase>
 8002bd4:	3800      	subs	r0, #0
 8002bd6:	bf18      	it	ne
 8002bd8:	2001      	movne	r0, #1
}
 8002bda:	0040      	lsls	r0, r0, #1
 8002bdc:	b007      	add	sp, #28
 8002bde:	f85d fb04 	ldr.w	pc, [sp], #4

08002be2 <MEM_If_DeInit_FS>:
{
 8002be2:	b508      	push	{r3, lr}
  HAL_FLASH_Lock();
 8002be4:	f7fd fbb8 	bl	8000358 <HAL_FLASH_Lock>
}
 8002be8:	2000      	movs	r0, #0
 8002bea:	bd08      	pop	{r3, pc}

08002bec <MEM_If_Init_FS>:
{
 8002bec:	b508      	push	{r3, lr}
  HAL_FLASH_Unlock();
 8002bee:	f7fd fba1 	bl	8000334 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR);
 8002bf2:	2230      	movs	r2, #48	; 0x30
 8002bf4:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <MEM_If_Init_FS+0x10>)
}
 8002bf6:	2000      	movs	r0, #0
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR);
 8002bf8:	60da      	str	r2, [r3, #12]
}
 8002bfa:	bd08      	pop	{r3, pc}
 8002bfc:	40022000 	.word	0x40022000

08002c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c02:	e003      	b.n	8002c0c <LoopCopyDataInit>

08002c04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c0a:	3104      	adds	r1, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c0c:	480a      	ldr	r0, [pc, #40]	; (8002c38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c14:	d3f6      	bcc.n	8002c04 <CopyDataInit>
  ldr r2, =_sbss
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c18:	e002      	b.n	8002c20 <LoopFillZerobss>

08002c1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c1c:	f842 3b04 	str.w	r3, [r2], #4

08002c20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c24:	d3f9      	bcc.n	8002c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c26:	f7ff fdf7 	bl	8002818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2a:	f000 f80f 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c2e:	f7ff fd3f 	bl	80026b0 <main>
  bx lr
 8002c32:	4770      	bx	lr
  ldr r3, =_sidata
 8002c34:	08002d80 	.word	0x08002d80
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c3c:	200000c0 	.word	0x200000c0
  ldr r2, =_sbss
 8002c40:	200000c0 	.word	0x200000c0
  ldr r3, = _ebss
 8002c44:	20000ea0 	.word	0x20000ea0

08002c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC1_2_IRQHandler>
	...

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2600      	movs	r6, #0
 8002c50:	4d0c      	ldr	r5, [pc, #48]	; (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	f000 f81a 	bl	8002c94 <_init>
 8002c60:	2600      	movs	r6, #0
 8002c62:	4d0a      	ldr	r5, [pc, #40]	; (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <__libc_init_array+0x44>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	08002d78 	.word	0x08002d78
 8002c88:	08002d78 	.word	0x08002d78
 8002c8c:	08002d78 	.word	0x08002d78
 8002c90:	08002d7c 	.word	0x08002d7c

08002c94 <_init>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr

08002ca0 <_fini>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	bf00      	nop
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr
